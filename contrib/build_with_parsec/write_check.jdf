extern "C" %{
/*
 * Copyright (c) 2014-2018 The University of Tennessee and The University
 *                         of Tennessee Research Foundation.  All rights
 *                         reserved.
 */
#include "parsec/data_dist/matrix/two_dim_rectangle_cyclic.h"
%}

A          [type = "parsec_data_collection_t*"]
NT         [type = int]
BLOCK      [type = int]

STARTUP(k)

  k = 0 .. NT
: A(k,0)

  WRITE A1 -> A2 TASK1(k)
BODY
  assert(NULL != A1);
  /*printf("STARTUP(%d)\n", k);*/
  /**
   * Set each element to their index position.
   */
  for( int i = 0; i < BLOCK; i++ ) {
    ((int*)A1)[i] = k * BLOCK + i;
  }
END

TASK1(k)
  k = 0 .. NT
: A(k,0)

  WRITE A3 -> A1 TASK2(k)    /* upon return will be set to A2: the index position */
  RW    A1 <- A(k,0)         /* A1 will be set to 1 */
           -> A2 TASK2(k)    /* upon return the content will be increased by 1 */
  READ  A2 <- A1 STARTUP(k)  /* A2 is set to their index position */

BODY
  assert(NULL != A3);
  /*printf("TASKS1(%d)\n", k);*/
  for( int i = 0; i < BLOCK; i++ ) {
    ((int*)A1)[i] += 1;
    ((int*)A3)[i] = ((int*)A2)[i];
  }
END

TASK2(k)
  k = 0 .. NT
: A(k,0)

  READ A1 <- A3 TASK1(k)   /* each element is initialized to the index position */
  RW   A2 <- A1 TASK1(k)   /* each element should be set to 2 */
          -> A(k, 0)

BODY
  /*printf("TASKS2(%d)\n", k);*/
  for( int i = 0; i < BLOCK; i++ ) {
    ((int*)A2)[i] += ((int*)A1)[i];
  }
END

extern "C" %{

#define TYPE  matrix_Integer
static two_dim_block_cyclic_t descA;

int main(int argc, char* argv[])
{
    parsec_write_check_taskpool_t* tp;
    parsec_context_t *parsec;
    int i = 0, block = 10, n = 1000, rc;

#ifdef PARSEC_HAVE_MPI
    {
        int provided;
        MPI_Init_thread(NULL, NULL, MPI_THREAD_SERIALIZED, &provided);
    }
#endif

    while( NULL != argv[i] ) {
        if( 0 == strncmp(argv[i], "-n=", 3) ) {
            n = strtol(argv[i]+3, NULL, 10);
            if( 0 >= n ) n = 1000;  /* set to default value */
            goto move_and_continue;
        }
        if( 0 == strncmp(argv[i], "-b=", 3) ) {
            block = strtol(argv[i]+3, NULL, 10);
            if( 0 >= block ) block = 10;  /* set to default value */
            goto move_and_continue;
        }
        i++;  /* skip this one */
        continue;
    move_and_continue:
        memmove(&argv[i], &argv[i+1], (argc - 1) * sizeof(char*));
        argc -= 1;
    }

    parsec = parsec_init(-1, &argc, &argv);
    if( NULL == parsec ) {
        exit(-1);
    }

    two_dim_block_cyclic_init( &descA, TYPE, matrix_Tile,
                               1 /*nodes*/, 0 /*rank*/,
                               block, 1, n, 1,
                               0, 0, n, n, 1, 1, 1);
    descA.mat = parsec_data_allocate( n * parsec_datadist_getsizeoftype(TYPE) );
    for( int i = 0; i < n; ((int*)descA.mat)[i++] = 1);

    /**
     * The original data is consistently initialized to 1. Upon completion it should
     * start with 2 and increase monotonically.
     */
    tp = parsec_write_check_new( (parsec_data_collection_t*)&descA, (n / block) - 1, block );
    assert( NULL != tp );

    /* This test generates no communications between processes, so the datatype
     * associated with the arena are insignificant. */
    parsec_arena_construct( tp->arenas[PARSEC_write_check_DEFAULT_ARENA],
                            descA.super.mb * descA.super.nb * parsec_datadist_getsizeoftype(TYPE),
                            PARSEC_ARENA_ALIGNMENT_SSE,
                            PARSEC_DATATYPE_NULL);  /* change for distributed cases */

    rc = parsec_context_start(parsec);
    PARSEC_CHECK_ERROR(rc, "parsec_context_start");

    rc = parsec_context_add_taskpool( parsec, (parsec_taskpool_t*)tp);
    PARSEC_CHECK_ERROR(rc, "parsec_context_add_taskpool");

    rc = parsec_context_wait(parsec);
    PARSEC_CHECK_ERROR(rc, "parsec_context_wait");

    for( int i = 0; i < n; i++ ) {
        if( (2+i) != ((int*)descA.mat)[i] )
            printf("position %d extected %d found %d\n",
                   i, (1+i), ((int*)descA.mat)[i]);
    }

    free(descA.mat);

#ifdef PARSEC_HAVE_MPI
    MPI_Finalize();
#endif
    return 0;
}

%}

