extern "C" %{
/*
 * Copyright (c) 2010-2013 The University of Tennessee and The University
 *                         of Tennessee Research Foundation.  All rights
 *                         reserved.
 * Copyright (c) 2013      Inria. All rights reserved.
 *
 * @precisions normal z -> c d s
 *
 * WARNING: This jdf works only in 1D distribution, and doesn't respect dataflow.
 *
 */
#include "dplasma/lib/dplasmajdf.h"
#include "parsec/data_dist/matrix/matrix.h"

%}

/** Globals */
dataA     [type = "parsec_tiled_matrix_dc_t*"]
dataIP    [type = "const parsec_tiled_matrix_dc_t*"]
inc       [type = "int"]

/************************************************************************************
 *                              SWAP                                                *
 ************************************************************************************/

LASWP_IPIV_in(k) [profile = off]
  k = 0..dataIP->nt-1

:dataIP(0, k)

READ IP <- dataIP(0, k)                         [type = PIVOT]
        -> IPIV LASWP_laswp(k, 0..dataA->nt-1)   [type = PIVOT]

BODY
{
    /* Nothing */
}
END


LASWP_laswp(k, n)
  /* Execution space */
  k = 0..dataIP->nt-1
  n = 0..dataA->nt-1

  /* Locality */
  :dataA(k, n)

  READ  A    <- dataA(k, n)
  READ  IPIV <- IP LASWP_IPIV_in(k)             [type = PIVOT]
  CTL   ctl  <- ( (inc > 0) && (k > 0 )          ) ? ctl LASWP_laswp(k-1, n)
             <- ( (inc < 0) && (k < dataIP->nt-1 )) ? ctl LASWP_laswp(k+1, n)
             -> ( (inc > 0) && (k < dataIP->nt-1 )) ? ctl LASWP_laswp(k+1, n)
             -> ( (inc < 0) && (k > 0 )          ) ? ctl LASWP_laswp(k-1, n)

BODY
{
#if !defined(PARSEC_DRY_RUN)
        int tempkm = ((k)==(dataA->mt-1)) ? (dataA->m-(k*dataA->mb)) : (dataA->mb);
        int tempnn = ((n)==(dataA->nt-1)) ? (dataA->n-(n*dataA->nb)) : (dataA->nb);
        int ldak = BLKLDD(dataA, k);

        if ( dataA->storage == matrix_Tile ) {
            int tempk = k * dataA->mb;
            int tempm = dataA->m - tempk;
            PLASMA_desc pdescA = plasma_desc_init( PlasmaComplexDouble,
                                                   dataA->mb, dataA->nb, dataA->mb * dataA->nb,
                                                   (dataA->mt-k)*dataA->mb, dataA->nb, 0, 0,
                                                   tempm, tempnn);
            pdescA.mat = A;
            CORE_zlaswp_ontile( pdescA, 1, tempkm, IPIV, 1);
        } else {
            CORE_zlaswp( tempnn, A, ldak, 1, tempkm, IPIV, inc );
        }
#endif /* !defined(PARSEC_DRY_RUN) */

    printlog("CORE_zlaswp(%d, %d)\n"
             "\t(%d, A(%d,%d)[%p], %d, %d, %d, IPIV(%d)[%p], %d)\n",
             k, n, tempnn, k, n, A, ldak, 1, tempkm, k, IPIV, inc);
}
END
