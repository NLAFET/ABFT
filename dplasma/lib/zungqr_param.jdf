extern "C" %{
/*
 * Copyright (c) 2010-2016 The University of Tennessee and The University
 *                         of Tennessee Research Foundation. All rights
 *                         reserved.
 * Copyright (c) 2013-2016 Inria. All rights reserved.
 * $COPYRIGHT
 *
 *
 * @precisions normal z -> s d c
 *
 */
#include "dplasma/lib/dplasmajdf.h"
#include "parsec/data_dist/matrix/matrix.h"

%}

descA  [type = "parsec_tiled_matrix_dc_t*"]
descTS [type = "parsec_tiled_matrix_dc_t*"]
descTT [type = "parsec_tiled_matrix_dc_t*"]
descQ  [type = "parsec_tiled_matrix_dc_t*"]
qrtree [type = "dplasma_qrtree_t"]

ib     [type = "int" hidden=on default="descTT->mb" ]
KT     [type = "int" hidden = on default = "descA->nt-1" ]
KT2    [type = "int" hidden = on default = "dplasma_imin( KT, descQ->mt-2 )" ]

p_work [type = "parsec_memory_pool_t *" size = "((sizeof(PLASMA_Complex64_t))*ib)*(descTT->nb)"]

zlaset(m, n) [profile = off]
  /* Execution Space */
  m = 0 .. descQ->mt-1
  n = 0 .. descQ->nt-1
  k     = %{ return dplasma_imin(KT,dplasma_imin(m, n)); %}
  prevm = %{ return qrtree.prevpiv(&qrtree, k, m, m); %}
  cc    = %{ return ((descQ->mt == descA->nt) & (m == (descQ->mt-1)) & (n == (descQ->mt-1))); %}

  : descQ(m,n)

  RW    A    <- descQ(m,n)
             ->  cc ? C zunmqr(k, 0, n)
             -> (!cc & ((m <= KT) & (n >= m))) ? A1 zttmqr(k, prevm, n)
             -> (!cc & ((m >  KT) | (n <  m))) ? A2 zttmqr(k, m,     n)

BODY
{
    int tempmm = (m == (descQ->mt-1)) ? (descQ->m - m * descQ->mb) : descQ->mb;
    int tempnn = (n == (descQ->nt-1)) ? (descQ->n - n * descQ->nb) : descQ->nb;
    int ldqm = BLKLDD( descQ, m );

    printlog("CORE_zlaset(%d, %d)\n"
             "\t(PlasmaUpperLower, tempmm, tempnn, alpha, (m == n) ? (beta) : (alpha), Q(%d,%d)[%p], ldqm)\n",
             m, n, m, n, A);

#if !defined(PARSEC_DRY_RUN)
    CORE_zlaset(PlasmaUpperLower, tempmm, tempnn,
                0., (m == n) ? 1.: 0.,
                A /* descQ(m,n) */, ldqm );
#endif  /* !defined(PARSEC_DRY_RUN) */
}
END

/**
 * zunmqr()
 *
 * There are qrtree.getnbgeqrf( &qrtree, k ) rows of unmqr applyed at step
 * k on the rows indexed by m.
 * nextm is the first row that will be killed by the row m at step k.
 * nextm = descA->mt if the row m is never used as a killer.
 */
zunmqr(k, i, n)
  /* Execution space */
  k = 0 .. KT
  i = 0 .. %{ return qrtree.getnbgeqrf( &qrtree, k ) - 1; %}
  n = k .. descQ->nt-1
  m     = %{ return qrtree.getm( &qrtree, k, i ); %}
  nextm = %{ return qrtree.nextpiv( &qrtree, k, m, descQ->mt ); %}

  /* Locality */
  : descQ(m, n)

  READ  A <- A zunmqr_in_A(k, i)        [type = LOWER_TILE]
  READ  T <- T zunmqr_in_T(k, i)        [type = LITTLE_T]

  RW    C -> ( k == 0 ) ? descQ(m, n)
          -> ( k >  0 ) ? A2 zttmqr(k-1, m, n)
          <- ( k == (descQ->mt-1)) ? A zlaset(m, n)
          <- ((k <  (descQ->mt-1)) & (nextm != descQ->mt)) ? A1 zttmqr(k, nextm, n)
          <- ((k <  (descQ->mt-1)) & (nextm == descQ->mt)) ? A2 zttmqr(k, m,     n)

BODY
{
    int tempAmm  = ( m == descA->mt-1 ) ? descA->m - m * descA->mb : descA->mb;
    int tempAkn  = ( k == descA->nt-1 ) ? descA->n - k * descA->nb : descA->nb;
    int tempmm   = ( m == descQ->mt-1 ) ? descQ->m - m * descQ->mb : descQ->mb;
    int tempnn   = ( n == descQ->nt-1 ) ? descQ->n - n * descQ->nb : descQ->nb;
    int tempkmin = dplasma_imin( tempAmm, tempAkn );
    int ldam = BLKLDD( descA, m );
    int ldqm = BLKLDD( descQ, m );

    void *p_elem_A = parsec_private_memory_pop( p_work );

    printlog("CORE_zunmqr(%d, %d)\n\t(PlasmaLeft, PlasmaNoTrans, tempkm, tempnn, tempkmin, ib, \n"
             "\tdescA(%d,%d)[%p], ldak, T(%d,%d)[%p], descT->mb, descQ(%d,%d)[%p], ldqk, p_elem_A, descT->nb)\n",
             k, n, k, k, A, k, k, T, k, n, C);

#if !defined(PARSEC_DRY_RUN)
    CORE_zunmqr(PlasmaLeft, PlasmaNoTrans,
                tempmm, tempnn, tempkmin, ib,
                A /* descA(m, k) */, ldam,
                T /* descT(m, k) */, descTT->mb,
                C /* descQ(m, n) */, ldqm,
                p_elem_A, descTT->nb );
#endif /* !defined(PARSEC_DRY_RUN) */

    parsec_private_memory_push( p_work, p_elem_A );
}
END

/*
 * Pseudo-task
 */
zunmqr_in_A(k, i) [profile = off]
  k = 0 .. KT
  i = 0 .. %{ return qrtree.getnbgeqrf( &qrtree, k ) - 1; %}
  m = %{ return qrtree.getm( &qrtree, k, i); %}

  : descA( m, k )

  RW A <- descA( m, k )                     [type = LOWER_TILE]
       -> A zunmqr(k, i, k .. descQ->nt-1)   [type = LOWER_TILE]

BODY
{
    /* nothing */
}
END


/*
 * Pseudo-task
 */
zunmqr_in_T(k, i) [profile = off]
  k = 0 .. KT
  i = 0 .. %{ return qrtree.getnbgeqrf( &qrtree, k ) - 1; %}
  m = %{ return qrtree.getm( &qrtree, k, i ); %}

  : descTS( m, k )

  RW T <- descTS( m, k )                    [type = LITTLE_T]
       -> T zunmqr(k, i, k .. descQ->nt-1)   [type = LITTLE_T]

BODY
{
    /* nothing */
}
END

/**
 * zttmqr()
 *
 * For explanations on zungqr_param.jdf, look at zgeqrf_param.jdf
 * The single difference is that the arrows are reversed on this case to browse
 * the tree from top to bottom.
 */
zttmqr(k, m, n)
  /* Execution space */
  k     = 0   .. KT
  m     = k+1 .. descQ->mt-1
  n     = k   .. descQ->nt-1
  p     = %{ return qrtree.currpiv( &qrtree, k, m);    %}
  nextp = %{ return qrtree.nextpiv( &qrtree, k, p, m); %}
  nextm = %{ return qrtree.nextpiv( &qrtree, k, m, descQ->mt); %}
  prevp = %{ return qrtree.prevpiv( &qrtree, k, p, m); %}
  prevm = %{ return qrtree.prevpiv( &qrtree, k, m, m); %}
  type  = %{ return qrtree.gettype( &qrtree, k, m );   %}
  ip    = %{ return qrtree.geti(    &qrtree, k, p );   %}
  im    = %{ return qrtree.geti(    &qrtree, k, m );   %}

  type1 = %{ return (k == KT) ? -1 : qrtree.gettype( &qrtree, k+1, m ); %}
  im1   = %{ return (k == KT) ? -1 : qrtree.geti(    &qrtree, k+1, m ); %}

  /* Locality */
  : descQ(m, n)

  RW   A1 <-  (nextp != descQ->mt) ? A1 zttmqr(k, nextp, n)
          <- ((nextp == descQ->mt) & ( p == k )) ? A  zlaset(p, n)
          <- ((nextp == descQ->mt) & ( p != k )) ? A2 zttmqr(k, p, n)
          ->  (prevp == descQ->mt) ? C zunmqr( k, ip, n ) : A1 zttmqr(k, prevp, n)

  RW   A2 <- ((k == KT) | (n == k)) ? A zlaset(m, n)
          <- ((k != KT) & (n != k) & (type1 != 0)) ? C  zunmqr( k+1, im1, n )
          <- ((k != KT) & (n != k) & (type1 == 0)) ? A2 zttmqr( k+1, m,   n )

          -> ( (type  == 0) && (k     == 0        ) ) ? descQ(m, n)
          -> ( (type  == 0) && (k     != 0        ) ) ? A2 zttmqr(k-1, m, n )
          -> ( (type  != 0) && (prevm == descQ->mt ) ) ? C  zunmqr(k, im, n)
          -> ( (type  != 0) && (prevm != descQ->mt ) ) ? A1 zttmqr(k, prevm, n )

  READ  V <- (type == 0) ? V zttmqr_in_V(k, m)
          <- (type != 0) ? V zttmqr_in_V(k, m) [type = UPPER_TILE]

  READ  T <- T zttmqr_in_T(k, m) [type = LITTLE_T]

BODY
{
    int tempnn  = ( n == descQ->nt-1 ) ? descQ->n - n * descQ->nb : descQ->nb;
    int tempmm  = ( m == descQ->mt-1 ) ? descQ->m - m * descQ->mb : descQ->mb;
    int tempAkn = ( k == descA->nt-1 ) ? descA->n - k * descA->nb : descA->nb;
    int ldqk = BLKLDD( descQ, k );
    int ldqm = BLKLDD( descQ, m );
    int ldam = BLKLDD( descA, m );
    int ldwork = ib;

    void *p_elem_A = parsec_private_memory_pop( p_work );

    printlog("CORE_zttmqr(%d, %d, %d)\n\t(PlasmaLeft, PlasmaNoTrans, \n"
             "\tdescQ->mb, tempnn, tempmm, tempnn, tempAkn, ib, \n"
             "\tdescQ(%d,%d)[%p], ldqk, descQ(%d,%d)[%p], ldqm, \n"
             "\tdescA(%d,%d)[%p], ldam, T(%d,%d)[%p], descT->mb, p_elem_A, ldwork)\n",
             k, m, n,
             k, n, A1, m, n, A2,
             m, k, V,  m, k, T);

#if !defined(PARSEC_DRY_RUN)
    if ( type == DPLASMA_QR_KILLED_BY_TS ) {
        CORE_ztsmqr(
            PlasmaLeft, PlasmaNoTrans,
            descQ->mb, tempnn, tempmm, tempnn, tempAkn, ib,
            A1 /* descQ( p, n) */, ldqk,
            A2 /* descQ( m, n) */, ldqm,
            V  /* descA( m, k) */, ldam,
            T  /* descTS(m, k) */, descTT->mb,
            p_elem_A, ldwork );
    } else {
        CORE_zttmqr(
            PlasmaLeft, PlasmaNoTrans,
            descQ->mb, tempnn, tempmm, tempnn, tempAkn, ib,
            A1 /* descQ( p, n) */, ldqk,
            A2 /* descQ( m, n) */, ldqm,
            V  /* descA( m, k) */, ldam,
            T  /* descTT(m, k) */, descTT->mb,
            p_elem_A, ldwork );
    }
#endif /* !defined(PARSEC_DRY_RUN) */

    parsec_private_memory_push( p_work, p_elem_A );
}
END

/*
 * Pseudo-task
 */
zttmqr_in_V(k, m) [profile = off]
  k = 0   .. KT2
  m = k+1 .. descQ->mt-1
  type = %{ return qrtree.gettype( &qrtree, k, m ); %}

  : descA(m, k)

  RW V <- descA(m, k)
       -> (type == 0) ? V zttmqr(k, m, k .. descQ->nt-1)
       -> (type != 0) ? V zttmqr(k, m, k .. descQ->nt-1) [type = UPPER_TILE]

BODY
{
    /* nothing */
}
END


/*
 * Pseudo-task
 */
zttmqr_in_T(k, m) [profile = off]
  k = 0   .. KT2
  m = k+1 .. descQ->mt-1

  : descTT(m, k)

  RW T <- descTT(m, k)                     [type = LITTLE_T]
       -> T zttmqr(k, m, k .. descQ->nt-1)  [type = LITTLE_T]
BODY
{
    /* nothing */
}
END
