extern "C" %{
/*
 * Copyright (c) 2010-2018 The University of Tennessee and The University
 *                         of Tennessee Research Foundation. All rights
 *                         reserved.
 * Copyright (c) 2013      Inria. All rights reserved.
 * $COPYRIGHT
 *
 * @precisions normal z -> s d c
 *
 */
#include "dplasma/lib/dplasmajdf.h"
#include "parsec/data_dist/matrix/matrix.h"
#include "dplasma/lib/flops.h"
#include "dplasma/lib/floputils.h"

%}

side      [type = "PLASMA_enum"]
uplo      [type = "PLASMA_enum"]
trans     [type = "PLASMA_enum"]
diag      [type = "PLASMA_enum"]
alpha     [type = "parsec_complex64_t"]
descA     [type = "const parsec_tiled_matrix_dc_t*"]
descB     [type = "parsec_tiled_matrix_dc_t*"]

read_A(n, k) [profile = off]
  /* Execution Space */
  n = 0 .. (descB->nt-1)
  k = 0 .. (descB->nt-n-1)

  /* Locality */
  : descA(k, (descB->nt-1)-n)

  READ  A    <- descA(k,(descB->nt-1)-n)
             -> (k == (descB->nt-1-n)) ? A ztrmm(n, 0..(descB->mt-1))
             -> (k != (descB->nt-1-n)) ? B zgemm(n, 0..(descB->mt-1), k)

BODY
{
    /* nothing */
}
END

read_B(m, k) [profile = off]
  /* Execution Space */
  m = 0 .. (descB->mt-1)
  k = 0 .. (descB->nt-2)

  /* Locality */
  : descB(m,k)

  READ  B    <- descB(m,k)
             -> A zgemm(0 .. (descB->nt-k-2), m, k)

BODY
{
    /* nothing */
}
END

ztrmm(n, m) [ flops = inline_c %{ return FLOPS_ZTRMM(side, CLEAN_MB(descB, m), CLEAN_NB(descB, n)); %} ]
  /* Execution Space */
  n = 0 .. (descB->nt-1)
  m = 0 .. (descB->mt-1)

  /* Locality */
  : descB(m,(descB->nt-1)-n)

  CTL   ctl0 <- ctl0 zgemm(0..n-1, m, descB->nt-n-1)
  READ  A    <- A read_A(n, descB->nt-1-n)
  RW    B    <- descB(m,(descB->nt-1)-n)
             -> (n <  (descB->nt-1)) ? C zgemm(n, m, 0)
             -> (n == (descB->nt-1)) ? descB(m,(descB->nt-1)-n)

BODY
{
    int tempmm = ((m)==(descB->mt-1)) ? (descB->m-(m*descB->mb)) : descB->mb;
    int tempnn = (((descB->nt-1)-n)==(descB->nt-1)) ? (descB->n-(((descB->nt-1)-n)*descB->nb)) : descB->nb;
    int lda = BLKLDD( descA, (descB->nt-1)-n );
    int ldb = BLKLDD( descB, m );

    printlog("CORE_ztrmm(%d, %d)\n"
             "\t(side, uplo, trans, diag, tempmm, tempnn, alpha, A(%d,%d)[%p], lda, B(%d,%d)[%p], ldb)\n",
             n, m, (descB->nt-1)-n, (descB->nt-1)-n, A, m, (descB->nt-1)-n, B);
#if !defined(PARSEC_DRY_RUN)
    CORE_ztrmm(side, uplo, trans,
               diag, tempmm, tempnn,
               alpha, A /* descA((descB->nt-1)-n,(descB->nt-1)-n) */, lda,
                      B /* descB(m,             (descB->nt-1)-n) */, ldb );
#endif  /* !defined(PARSEC_DRY_RUN) */
}
END

zgemm(n, m, k) [ flops = inline_c %{ return FLOPS_ZGEMM(CLEAN_MB(descB, m), CLEAN_NB(descB, n), descB->mb); %} ]
  /* Execution Space */
  n = 0 .. (descB->nt-2)
  m = 0 .. (descB->mt-1)
  k = 0 .. (descB->nt-n-2)

  /* Locality */
  : descB(m,(descB->nt-1)-n)

  CTL   ctl0 -> ctl0 ztrmm(descB->nt-k-1, m)
  READ  A    <- B read_B(m, k)
  READ  B    <- A read_A(n, k)
  RW    C    <- (k >  0) ? C zgemm(n, m, k-1)
             <- (k == 0) ? B ztrmm(n, m)
             -> ((n+k) == (descB->nt-2)) ? descB(m,(descB->nt-1)-n)
             -> ((n+k) <  (descB->nt-2)) ? C zgemm(n, m, k+1)

BODY
{
    int tempmm = ((m)==(descB->mt-1)) ? (descB->m-(m*descB->mb)) : descB->mb;
    int tempnn = (((descB->nt-1)-n)==(descB->nt-1)) ? (descB->n-(((descB->nt-1)-n)*descB->nb)) : descB->nb;
    int ldb = BLKLDD( descB, m );

    printlog("CORE_zgemm(%d, %d, %d)\n"
             "\t(PlasmaNoTrans, trans, tempmm, tempnn, descB->mb, alpha, B(%d,%d)[%p], ldb, A(%d,%d)[%p], descA->mb, 1.000000, B(%d,%d)[%p], ldb)\n",
             n, m, k, m, k, A, k, (descB->nt-1)-n, B, m, (descB->nt-1)-n, C);

#if !defined(PARSEC_DRY_RUN)
    CORE_zgemm(PlasmaNoTrans, trans, tempmm, tempnn, descB->mb,
               alpha, A /* descB(m,k) */, ldb,
                      B /* descA(k,(descB->nt-1)-n) */, descA->mb,
               1.0,   C /* descB(m,(descB->nt-1)-n) */, ldb );
#endif  /* !defined(PARSEC_DRY_RUN) */
}
END
