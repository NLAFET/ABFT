extern "C" %{
/*
 * Copyright (c) 2010-2018 The University of Tennessee and The University
 *                         of Tennessee Research Foundation. All rights
 *                         reserved.
 *
 * @precisions normal z -> z c
 *
 */
#include "dplasma/lib/dplasmajdf.h"
#include "parsec/data_dist/matrix/matrix.h"
#include "dplasma/lib/flops.h"
#include "dplasma/lib/floputils.h"

%}

uplo      [type = "PLASMA_enum"]
trans     [type = "PLASMA_enum"]
alpha     [type = "double"]
descA     [type = "const parsec_tiled_matrix_dc_t*"]
beta      [type = "double"]
descC     [type = "parsec_tiled_matrix_dc_t*"]


zherk(n, k) [flops = inline_c %{ return FLOPS_ZHERK(CLEAN_NB(descC, n), CLEAN_NB(descA, k)); %}]
  /* Execution Space */
  n = 0..(descC->nt-1)
  k = 0..(descA->nt-1)

  /* Locality */
  : descC(n,n)

  READ  A    <- A zherk_in_data_A0(n, k)
  RW    C    <- ((k>=1)) ? C zherk(n, k-1)
             <- ((0==k)) ? descC(n,n)
             -> ((descA->nt>=(k+2))) ? C zherk(n, k+1)
             -> ((descA->nt==(k+1))) ? descC(n,n)

BODY
{
    int tempnn = (n==(descC->nt-1)) ? (descC->n-(n*descC->nb)) : descC->nb;
    int tempkn = (k==(descA->nt-1)) ? (descA->n-(k*descA->nb)) : descA->nb;
    int ldan = BLKLDD( descA, n );
    double dbeta = (k==0) ? beta : ((double)1.);
    int ldcn = BLKLDD( descC, n );

    printlog("CORE_zherk(%d, %d)\n"
             "\t(uplo, trans, tempnn, tempkn, alpha, A(%d,%d)[%p], ldan, dbeta, C(%d,%d)[%p], ldcn)\n",
             n, k, n, k, A, n, n, C);
#if !defined(PARSEC_DRY_RUN)
    CORE_zherk(uplo, trans, tempnn,
               tempkn, alpha, A /* descA(n,k) */,
               ldan, dbeta, C /* descC(n,n) */,
               ldcn );
#endif /* !defined(PARSEC_DRY_RUN) */
}
END

zherk_in_data_A0(n, k) [profile = off]
  /* Execution Space */
  n = 0..(descC->nt-1)
  k = 0..(descA->nt-1)

  /* Locality */
  : descA(n,k)

  READ  A    <- descA(n,k)
             -> A zherk(n, k)

BODY
{
    /* nothing */
}
END

zgemm(n, m, k) [flops = inline_c%{ return FLOPS_ZGEMM(CLEAN_MB(descC, m), CLEAN_NB(descC, n), CLEAN_NB(descA, k)); %}]
  /* Execution Space */
  n = 0..(descC->mt-2)
  m = (n+1)..(descC->mt-1)
  k = 0..(descA->nt-1)

  /* Locality */
  : descC(m,n)

  READ  A    <- A zgemm_in_data_A0(m, k)
  READ  B    <- B zgemm_in_data_A1(n, k)
  RW    C    <- ((0==k)) ? descC(m,n)
             <- ((k>=1)) ? C zgemm(n, m, k-1)
             -> ((descA->nt==(k+1))) ? descC(m,n)
             -> ((descA->nt>=(k+2))) ? C zgemm(n, m, k+1)

BODY
{
    int tempmm = ((m)==(descC->mt-1)) ? (descC->m-(m*descC->mb)) : descC->mb;
    int tempnn = (n==(descC->nt-1)) ? (descC->n-(n*descC->nb)) : descC->nb;
    int tempkn = (k==(descA->nt-1)) ? (descA->n-(k*descA->nb)) : descA->nb;
    parsec_complex64_t zalpha = (parsec_complex64_t)alpha;
    int ldam = BLKLDD( descA, m );
    int ldan = BLKLDD( descA, n );
    parsec_complex64_t zbeta = (k==0) ? ((parsec_complex64_t)beta) : ((double)1.);
    int ldcm = BLKLDD( descC, m );

    printlog("CORE_zgemm(%d, %d, %d)\n"
             "\t(trans, PlasmaConjTrans, tempmm, tempnn, tempkn, zalpha, A(%d,%d)[%p], ldam, A(%d,%d)[%p], ldan, zbeta, C(%d,%d)[%p], ldcm)\n",
             n, m, k, m, k, A, n, k, B, m, n, C);
#if !defined(PARSEC_DRY_RUN)
    CORE_zgemm(trans, PlasmaConjTrans, tempmm,
               tempnn, tempkn, zalpha,
               A /* descA(m,k) */, ldam, B /* descA(n,k) */,
               ldan, zbeta, C /* descC(m,n) */,
               ldcm );
#endif /* !defined(PARSEC_DRY_RUN) */
}
END

zgemm_in_data_A1(n, k) [profile = off]
  /* Execution Space */
  n = 0..(descC->mt-2)
  k = 0..(descA->nt-1)

  /* Locality */
  : descA(n,k)

  READ  B    <- descA(n,k)
             -> B zgemm(n, (n+1)..(descC->mt-1), k)

BODY
{
    /* nothing */
}
END

zgemm_in_data_A0(m, k) [profile = off]
  /* Execution Space */
  m = 1..(descC->mt-1) /* tight bound is (n+1)..(descC->mt-1) */
  k = 0..(descA->nt-1)

  /* Locality */
  : descA(m,k)

  READ  A    <- descA(m,k)
             -> A zgemm(0..(descC->mt-2), m, k)

BODY
{
    /* nothing */
}
END
