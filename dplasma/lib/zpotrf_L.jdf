extern "C" %{
/*
 * Copyright (c) 2010-2018 The University of Tennessee and The University
 *                         of Tennessee Research Foundation. All rights
 *                         reserved.
 * Copyright (c) 2013      Inria. All rights reserved.
 * $COPYRIGHT
 *
 * @precisions normal z -> s d c
 *
 */
#include "dplasma/lib/dplasmajdf.h"
#include "parsec/data_dist/matrix/matrix.h"
#include "dplasma/lib/flops.h"
#include "dplasma/lib/floputils.h"

#if defined(PARSEC_HAVE_RECURSIVE)
#include "parsec/data_dist/matrix/subtile.h"
#include "parsec/recursive.h"
#endif

#if defined(PARSEC_HAVE_CUDA)
#include <cublas.h>
#endif  /* defined(PARSEC_HAVE_CUDA) */

/*
 * Priorities used in this jdf:
 *      - potrf_zpotrf(k)    : (MT-k)**3
 *      - potrf_zherk(k,m)   : (MT-m)**3 + 3 * (m - k)
 *      - potrf_ztrsm(m,k)   : (MT-m)**3 + 3 * (m - k) * (2 * MT - k - m - 1)
 *      - potrf_zgemm(m,n,k) : (MT-m)**3 + 3 * (m - n) * (2 * MT - m - n - 1) + 6 * (m - k)
 *
 * So max priority is:
 *      (MT - PRI_CHANGE)**3 + 3 * MT * (2 * MT - PRI_CHANGE - 1) + 6 * MT  < (MT**3 + 6 MT**2 + 3 MT)
 *
 * WARNING: If mt is greater than 1200, we might get integer overflow.
 */

%}

/* Globals
 */
uplo       [type = PLASMA_enum]
descA      [type = "parsec_tiled_matrix_dc_t*"]
INFO       [type = "int*"]

PRI_CHANGE [type = "int" hidden = on default = 0 ]
PRI_MAX    [type = "int" hidden = on default = "(descA->mt * ( 3 + descA->mt * ( 2 + descA->mt )))" ]
smallnb    [type = "int" hidden = on default = "descA->mb" ]

/**************************************************
 *               potrf_zpotrf                     *
 **************************************************/
potrf_zpotrf(k) [high_priority = on flops = inline_c %{ return FLOPS_ZPOTRF( CLEAN_MB(descA, k) ); %}]

// Execution space
k = 0 .. descA->mt-1

// Parallel partitioning
:descA(k, k)

// Parameters
RW T <- (k == 0) ? descA(k, k) : T potrf_zherk(k-1, k)
     -> T potrf_ztrsm(k+1..descA->mt-1, k)
     -> descA(k, k)

; (k >= (descA->mt - PRI_CHANGE)) ? (descA->mt - k) * (descA->mt - k) * (descA->mt - k) : PRI_MAX

BODY [type=RECURSIVE]
{
    int tempkm = k == descA->mt-1 ? descA->m - k*descA->mb : descA->mb;
    int iinfo = 0;

    if (tempkm > smallnb)
    {
        subtile_desc_t *small_descT;
        parsec_taskpool_t *parsec_zpotrf;

        small_descT = subtile_desc_create( descA, k, k,
                                           smallnb, smallnb, 0, 0, tempkm, tempkm );
        small_descT->mat = T;

        parsec_zpotrf = dplasma_zpotrf_New(uplo, (parsec_tiled_matrix_dc_t *)small_descT, &iinfo );

        parsec_recursivecall(es, (parsec_task_t*)this_task,
                             parsec_zpotrf, dplasma_zpotrf_Destruct,
                             1, small_descT);

        return PARSEC_HOOK_RETURN_ASYNC;
    }
    else
        /* Go for the sequential CPU version */
        return PARSEC_HOOK_RETURN_NEXT;
}
END

BODY
{
    int tempkm = k == descA->mt-1 ? descA->m - k*descA->mb : descA->mb;
    int iinfo = 0;
    int ldak = BLKLDD( descA, k );

#if !defined(PARSEC_DRY_RUN)
    CORE_zpotrf( uplo, tempkm, T, ldak, &iinfo );
    if ( iinfo != 0 && *INFO == 0 )
            *INFO = k*descA->mb+iinfo; /* Should return here */
#endif /* !defined(PARSEC_DRY_RUN) */

    printlog("CORE_zpotrf( %d )\n\t( %s, %d, A(%d,%d)[%p], %d) return info = %d\n",
             k,
             plasma_const(uplo), tempkm, k, k, T, descA->mb, iinfo );
}
END


/**************************************************
 *               potrf_ztrsm                      *
 **************************************************/
potrf_ztrsm(m, k) [high_priority = on flops = inline_c %{ return FLOPS_ZTRSM(PlasmaRight, CLEAN_MB(descA, m), descA->nb); %}]

// Execution space
m = 1 .. descA->mt-1
k = 0 .. m-1

// Parallel partitioning
: descA(m, k)

// Parameters
READ  T <- T potrf_zpotrf(k)
RW    C <- (k == 0) ? descA(m, k) : C potrf_zgemm(m, k, k-1)
        -> A potrf_zherk(k, m)
        -> A potrf_zgemm(m, k+1..m-1, k)
        -> B potrf_zgemm(m+1..descA->mt-1, m, k)
        -> descA(m, k)

; (m >= (descA->mt - PRI_CHANGE)) ? (descA->mt - m) * (descA->mt - m) * (descA->mt - m) + 3 * ((2 * descA->mt) - k - m - 1) * (m - k) : PRI_MAX

BODY [type=RECURSIVE]
{
    int tempmm = m == descA->mt-1 ? descA->m - m * descA->mb : descA->mb;

    if ( (tempmm > smallnb) || (descA->nb > smallnb) )
    {
        subtile_desc_t *small_descT;
        subtile_desc_t *small_descC;
        parsec_taskpool_t* parsec_ztrsm;


        small_descT = subtile_desc_create( descA, k, k,
                                           smallnb, smallnb, 0, 0, descA->nb, descA->nb );
        small_descT->mat = T;

        small_descC = subtile_desc_create( descA, m, k,
                                           smallnb, smallnb, 0, 0, tempmm, descA->nb );
        small_descC->mat = C;

        parsec_ztrsm = dplasma_ztrsm_New(PlasmaRight, PlasmaLower,
                                        PlasmaConjTrans, PlasmaNonUnit,
                                        (parsec_complex64_t)1.0,
                                        (parsec_tiled_matrix_dc_t *)small_descT,
                                        (parsec_tiled_matrix_dc_t *)small_descC );

        parsec_recursivecall(es, (parsec_task_t*)this_task,
                             parsec_ztrsm, dplasma_ztrsm_Destruct,
                             2, small_descT, small_descC );

        return PARSEC_HOOK_RETURN_ASYNC;
    }
    else
        /* Go for the sequential CPU version */
        return PARSEC_HOOK_RETURN_NEXT;
}
END

BODY
{
    int tempmm = m == descA->mt-1 ? descA->m - m * descA->mb : descA->mb;
    int ldak = BLKLDD( descA, k );
    int ldam = BLKLDD( descA, m );


#if !defined(PARSEC_DRY_RUN)
    CORE_ztrsm(PlasmaRight, PlasmaLower, PlasmaConjTrans, PlasmaNonUnit,
               tempmm, descA->nb,
               (parsec_complex64_t)1.0, T /*A(k, k)*/, ldak,
                                       C /*A(m, k)*/, ldam);
#endif  /* !defined(PARSEC_DRY_RUN) */

    printlog("CORE_ztrsm( %d, %d )\n\t( %s, %s, %s, %s, %d, %d, %f, A(%d,%d)[%p], %d,  A(%d,%d)[%p], %d)\n",
             m, k,
             plasma_const( PlasmaRight ), plasma_const( PlasmaLower ),
             plasma_const( PlasmaConjTrans ), plasma_const( PlasmaNonUnit ),
             tempmm, descA->nb,
             1.0, k, k, T, ldak,
                  m, k, C, ldam);
}
END


/**************************************************
 *               potrf_zherk                      *
 **************************************************/
potrf_zherk(k, m) [high_priority = on flops = inline_c %{ return FLOPS_ZHERK(CLEAN_MB(descA, m), descA->mb); %}]

// Execution space
k = 0   .. descA->mt-2
m = k+1 .. descA->mt-1

// Parallel partitioning
: descA(m, m)

//Parameters
READ  A <- C potrf_ztrsm(m, k)
RW    T <- (k == 0)   ? descA(m, m) : T potrf_zherk(k-1, m)
        -> (m == k+1) ? T potrf_zpotrf(m)  : T potrf_zherk(k+1, m)

; (m >= (descA->mt - PRI_CHANGE)) ? (descA->mt - m) * (descA->mt - m) * (descA->mt - m) + 3 * (m - k) : PRI_MAX

BODY [type=RECURSIVE]
{
    int tempmm = m == descA->mt-1 ? descA->m - m*descA->mb : descA->mb;

    if ( (tempmm > smallnb) || (descA->nb > smallnb) )
    {
        subtile_desc_t *small_descT;
        subtile_desc_t *small_descA;
        parsec_taskpool_t* parsec_zherk;

        small_descT = subtile_desc_create( descA, m, m,
                                           smallnb, smallnb, 0, 0, tempmm, tempmm );
        small_descT->mat = T;

        small_descA = subtile_desc_create( descA, m, k,
                                           smallnb, smallnb, 0, 0, tempmm, descA->nb );
        small_descA->mat = A;

        parsec_zherk = dplasma_zherk_New( PlasmaLower, PlasmaNoTrans,
                                         (double)-1.0, (parsec_tiled_matrix_dc_t*) small_descA,
                                         (double)1.0,  (parsec_tiled_matrix_dc_t*) small_descT);

        parsec_recursivecall(es, (parsec_task_t*)this_task,
                             parsec_zherk, dplasma_zherk_Destruct,
                             2, small_descA, small_descT);
        return PARSEC_HOOK_RETURN_ASYNC;
    }
    else
        /* Go for the sequential CPU version */
        return PARSEC_HOOK_RETURN_NEXT;
}
END

BODY
{
    int tempmm = m == descA->mt-1 ? descA->m - m*descA->mb : descA->mb;
    int ldam = BLKLDD( descA, m );

#if !defined(PARSEC_DRY_RUN)
    CORE_zherk(PlasmaLower, PlasmaNoTrans,
               tempmm, descA->mb,
               (double)-1.0, A /*A(m, k)*/, ldam,
               (double) 1.0, T /*A(m, m)*/, ldam);
#endif  /* !defined(PARSEC_DRY_RUN) */
    printlog(
             "CORE_zherk( %d, %d )\n\t( %s, %s, %d, %d, %f, A(%d,%d)[%p], %d, %f, A(%d,%d)[%p], %d)\n",
             k, m,
             plasma_const( PlasmaLower ), plasma_const( PlasmaNoTrans ),
             tempmm, descA->mb,
             -1.0, m, k, A, ldam,
              1.0, m, m, T, ldam);
}
END

/**************************************************
 *               potrf_zgemm                      *
 **************************************************/
// Name
potrf_zgemm(m, n, k) [flops = inline_c %{ return FLOPS_ZGEMM(CLEAN_MB(descA, m), descA->mb, descA->mb); %}]

// Execution space
k = 0   .. descA->mt-3
m = k+2 .. descA->mt-1
n = k+1 .. m-1

// Parallel partitioning
: descA(m, n)

// Parameters
READ  A <- C potrf_ztrsm(m, k)
READ  B <- C potrf_ztrsm(n, k)
RW    C <- (k == 0)   ? descA(m, n)  : C potrf_zgemm(m, n, k-1)
        -> (n == k+1) ? C potrf_ztrsm(m, n) : C potrf_zgemm(m, n, k+1)

; (m >= (descA->mt - PRI_CHANGE)) ? (descA->mt - m) * (descA->mt - m) * (descA->mt - m) + 3 * ((2 * descA->mt) - m - n - 3) * (m - n) + 6 * (m - k) : PRI_MAX

BODY [type=CUDA
      dyld=cublasZgemm dyldtype=cublas_zgemm_t
      weight=(n+1-k)]
{
#if defined(PRECISION_z) || defined(PRECISION_c)
    cuDoubleComplex zone  = make_cuDoubleComplex( 1., 0.);
    cuDoubleComplex mzone = make_cuDoubleComplex(-1., 0.);
#else
    double zone  =  1.;
    double mzone = -1.;
#endif

    int tempmm = m == descA->mt-1 ? descA->m - m * descA->mb : descA->mb;
    int ldam = BLKLDD( descA, m );
    int ldan = BLKLDD( descA, n );

    cublasStatus_t status;
    assert( ldan <= descA->mb );
    assert( ldam <= descA->mb );

    cublasSetKernelStream( parsec_body.stream );
    parsec_body.dyld_fn( 'N', lapack_const(PlasmaConjTrans),
             tempmm, descA->mb, descA->mb,
             mzone, (cuDoubleComplex*)A, ldam,
                    (cuDoubleComplex*)B, ldan,
             zone,  (cuDoubleComplex*)C, ldam );
    status = cublasGetError();
    PARSEC_CUDA_CHECK_ERROR( "cublasZgemm ", status,
                            {return -1;} );
}
END

BODY [type=RECURSIVE]
{
    int tempmm = m == descA->mt-1 ? descA->m - m * descA->mb : descA->mb;

    if ( (tempmm > smallnb) || (descA->nb > smallnb) )
    {
        subtile_desc_t *small_descA;
        subtile_desc_t *small_descB;
        subtile_desc_t *small_descC;
        parsec_taskpool_t *parsec_zgemm;

        small_descA = subtile_desc_create( descA, m, k,
                                           smallnb, smallnb, 0, 0, tempmm, descA->nb );
        small_descA->mat = A;

        small_descB = subtile_desc_create( descA, n, k,
                                           smallnb, smallnb, 0, 0, descA->mb, descA->nb );
        small_descB->mat = B;

        small_descC = subtile_desc_create( descA, m, n,
                                           smallnb, smallnb, 0, 0, tempmm, descA->nb );
        small_descC->mat = C;

        parsec_zgemm = dplasma_zgemm_New(PlasmaNoTrans, PlasmaConjTrans,
                                        (parsec_complex64_t)-1.0,
                                        (parsec_tiled_matrix_dc_t *)small_descA,
                                        (parsec_tiled_matrix_dc_t *)small_descB,
                                        (parsec_complex64_t) 1.0,
                                        (parsec_tiled_matrix_dc_t *)small_descC);

        parsec_recursivecall(es, (parsec_task_t*)this_task,
                             parsec_zgemm, dplasma_zgemm_Destruct,
                             3, small_descA, small_descB, small_descC );

        return PARSEC_HOOK_RETURN_ASYNC;
    }
    else
        /* Go to CPU sequential kernel */
        return PARSEC_HOOK_RETURN_NEXT;
}
END

BODY
{
    int tempmm = m == descA->mt-1 ? descA->m - m * descA->mb : descA->mb;
    int ldam = BLKLDD( descA, m );
    int ldan = BLKLDD( descA, n );

#if !defined(PARSEC_DRY_RUN)
    CORE_zgemm(PlasmaNoTrans, PlasmaConjTrans,
               tempmm, descA->mb, descA->mb,
               (parsec_complex64_t)-1.0, A /*A(m, k)*/, ldam,
                                        B /*A(n, k)*/, ldan,
               (parsec_complex64_t) 1.0, C /*A(m, n)*/, ldam);
#endif  /* !defined(PARSEC_DRY_RUN) */

    printlog("CORE_zgemm( %d, %d, %d )\n\t( %s, %s, %d, %d, %d, %f, A(%d,%d)[%p], %d, A(%d,%d)[%p], %d, %f, A(%d,%d)[%p], %d)\n",
             m, n, k,
             plasma_const( PlasmaNoTrans ),  plasma_const( PlasmaConjTrans ),
             tempmm, descA->mb, descA->mb,
             -1.0, m, k, A, ldam,
                   n, k, B, ldan,
              1.0, m, n, C, ldam);
}
END
