extern "C" %{
/*
 * Copyright (c) 2010-2013 The University of Tennessee and The University
 *                         of Tennessee Research Foundation. All rights
 *                         reserved.
 * Copyright (c) 2013      Inria. All rights reserved.
 * $COPYRIGHT
 *
 *
 * @precisions normal z -> s d c
 *
 * 4 versions: LN, LC, RN, RC
 *     - When N <-> C, only arrows on A are swap.
 *     - When L <-> R, n becomes m, and respectively m becomes n
 *
 */
#include "dplasma/lib/dplasmajdf.h"
#include "parsec/data_dist/matrix/matrix.h"

%}

side      [type = "PLASMA_enum"]
trans     [type = "PLASMA_enum"]
descA    [type = "parsec_tiled_matrix_dc_t*"]
descB    [type = "parsec_tiled_matrix_dc_t*"]
descTS   [type = "parsec_tiled_matrix_dc_t*" aligned=descA]
descTT   [type = "parsec_tiled_matrix_dc_t*" aligned=descA]
qrtree    [type = "dplasma_qrtree_t"]

ib      [type = "int" hidden = on default = "descTS->mb" ]
KT      [type = "int" hidden = on default = "descA->mt-1" ]
KT2     [type = "int" hidden = on default = "dplasma_imin( KT, descA->nt-2 )" ]
p_work  [type = "parsec_memory_pool_t *" size = "(sizeof(PLASMA_Complex64_t)*ib*(descTS->nb))"]

zunmlq(k, i, m)
  /* Execution space */
  k = 0 .. KT
  i = 0 .. %{ return qrtree.getnbgeqrf( &qrtree, k ) - 1; %}
  m = 0 .. descB->mt-1

  p     = %{ return qrtree.getm(    &qrtree, k, i); %}
  nextp = %{ return qrtree.nextpiv( &qrtree, k, p, descA->nt); %}

  /* Locality */
  : descB(m, p)

  READ  A    <- A zunmlq_in(k, i)   [type = UPPER_TILE]
  READ  T    <- T zunmlq_in(k, i)   [type = LITTLE_T]
  RW    C    -> ( k == 0 ) ? descB(m, p)
             -> ( k >  0 ) ? A2 zttmlq(k-1, m, p)
             <- ( k == descA->nt-1 ) ? descB(m, p)
             <- ((k <  descA->nt-1) & (nextp != descA->nt) ) ? A1 zttmlq(k, m, nextp)
             <- ((k <  descA->nt-1) & (nextp == descA->nt) ) ? A2 zttmlq(k, m, p    )

BODY
{
    int tempmm = (m == (descB->mt-1)) ? (descB->m - m * descB->mb) : descB->mb;
    int temppn = (p == (descB->nt-1)) ? (descB->n - p * descB->nb) : descB->nb;
    int tempkm = (k == (descA->mt-1)) ? (descA->m - k * descA->mb) : descA->mb;
    int tempmin = dplasma_imin( tempkm, temppn );
    int ldak    = BLKLDD( descA, k );
    int ldbm    = BLKLDD( descB, m );

    void *W = parsec_private_memory_pop( p_work );

    printlog("CORE_zunmlq(%d, %d, %d) [%d, %d]\n"
             "\t(side=%s, trans=%s, M=%d, N=%d, K=%d, ib=%d,\n"
             "\t A(%d,%d)[%p], lda=%d, T(%d,%d)[%p], ldt=%d, B(%d,%d)[%p], ldb=%d, W=%p, LDW=%d)\n",
             k, i, m, p, nextp, plasma_const( side ), plasma_const( trans ), tempmm, temppn, tempmin, ib,
             k, p, A, ldak, k, p, T, descTS->mb, m, p, C, ldbm, W, descTS->nb );

#if !defined(PARSEC_DRY_RUN)
    CORE_zunmlq(
        side, trans,
        tempmm, temppn, tempmin, ib,
        A /* A(k, p) */, ldak,
        T /* T(k, p) */, descTS->mb,
        C /* B(m, p) */, ldbm,
        W, descTS->nb );
#endif /* !defined(PARSEC_DRY_RUN) */

    parsec_private_memory_push( p_work, W );
}
END

zunmlq_in(k,i)  [profile = off]
  k = 0 .. KT
  i = 0 .. %{ return qrtree.getnbgeqrf( &qrtree, k ) - 1; %}
  p = %{ return qrtree.getm( &qrtree, k, i); %}

  : descA(k, p)

  RW A <- descA(k, p)                       [type = UPPER_TILE]
       -> A zunmlq(k, i, 0 .. descB->mt-1)  [type = UPPER_TILE]

  RW T <- descTS(k, p)                      [type = LITTLE_T]
       -> T zunmlq(k, i, 0 .. descB->mt-1)  [type = LITTLE_T]

BODY
{
    /* nothing */
}
END

zttmlq(k, m, n)
  /* Execution Space */
  k = 0   .. KT2
  m = 0   .. descB->mt-1
  n = k+1 .. descB->nt-1

  p =     %{ return qrtree.currpiv( &qrtree, k, n);    %}
  nextp = %{ return qrtree.nextpiv( &qrtree, k, p, n); %}
  prevp = %{ return qrtree.prevpiv( &qrtree, k, p, n); %}
  prevn = %{ return qrtree.prevpiv( &qrtree, k, n, n); %}
  type  = %{ return qrtree.gettype( &qrtree, k, n );   %}
  ip    = %{ return qrtree.geti(    &qrtree, k, p );   %}
  in    = %{ return qrtree.geti(    &qrtree, k, n );   %}

  type1 = %{ return (k == KT) ? -1 : qrtree.gettype( &qrtree, k+1, n ); %}
  in1   = %{ return (k == KT) ? -1 : qrtree.geti(    &qrtree, k+1, n ); %}

  /* Locality */
  : descB(m, n)

  RW    A1   ->  (prevp == descA->nt) ? C zunmlq( k, ip, m ) : A1 zttmlq(k, m, prevp )

             <- ((nextp == descA->nt) & ( p == k ) ) ? A  zttmlq_out_B(p, m)
             <- ((nextp == descA->nt) & ( p != k ) ) ? A2 zttmlq( k, m, p    )
             <-  (nextp != descA->nt) ?                A1 zttmlq( k, m, nextp)

  RW    A2   -> ( (type  == 0 ) && (k     == 0        ) ) ? descB(m, n)
             -> ( (type  == 0 ) && (k     != 0        ) ) ? A2 zttmlq(k-1, m, n )
             -> ( (type  != 0 ) && (prevn == descA->nt ) ) ? C  zunmlq(k, in, m    )
             -> ( (type  != 0 ) && (prevn != descA->nt ) ) ? A1 zttmlq(k, m, prevn )

             <-   (k == KT)                    ? descB( m, n )
             <- ( (k <  KT) && (type1 != 0 ) ) ? C  zunmlq( k+1, in1, m )
             <- ( (k <  KT) && (type1 == 0 ) ) ? A2 zttmlq( k+1, m, n )

  READ  V    <- (type == 0) ? A zttmlq_in(k,n)
             <- (type != 0) ? A zttmlq_in(k,n)                       [type = LOWER_TILE]

  READ  T    <- T zttmlq_in(k,n)                                     [type = LITTLE_T]

BODY
{
    int tempmm = ( m == (descB->mt-1)) ? (descB->m - m * descB->mb) : descB->mb;
    int tempnn = ( n == (descB->nt-1)) ? (descB->n - n * descB->nb) : descB->nb;
    int tempkm = ( k == (descA->mt-1)) ? (descA->m - k * descA->mb) : descA->mb;
    int ldak = BLKLDD( descA, k );
    int ldbm = BLKLDD( descB, m );
    int ldwork = descTS->nb;

    void *W = parsec_private_memory_pop( p_work );

    printlog("CORE_ztsmlq(%d, %d, %d)\n"
             "\t(side=%s, trans=%s, M1=%d, N1=%d, M2=%d, N2=%d, K=%d, ib=%d,\n"
             "\t A1(%d,%d)[%p], lda1=%d, A2(%d,%d)[%p], lda2=%d, V(%d,%d)[%p], ldv=%d, T(%d,%d)[%p], ldt=%d, W=%p, LDW=%d)\n",
             k, m, n, plasma_const( side ), plasma_const( trans ),
             tempmm, descB->nb, tempmm, tempnn, tempkm, ib,
             m, p, A1, ldbm, m, n, A2, ldbm, k, n, V, ldak, k, n, T, descTS->mb, W, ldwork );

#if !defined(PARSEC_DRY_RUN)
    if ( type == DPLASMA_QR_KILLED_BY_TS ) {
        CORE_ztsmlq(
            side, trans,
            tempmm, descB->nb, tempmm, tempnn, tempkm, ib,
            A1 /* B(m, p) */, ldbm,
            A2 /* B(m, n) */, ldbm,
            V  /* A(k, n) */, ldak,
            T  /* T(k, n) */, descTT->mb,
            W, ldwork );
    } else {
        CORE_zttmlq(
            side, trans,
            tempmm, descB->nb, tempmm, tempnn, tempkm, ib,
            A1 /* B(m, p) */, ldbm,
            A2 /* B(m, n) */, ldbm,
            V  /* A(k, n) */, ldak,
            T  /* T(k, n) */, descTT->mb,
            W, ldwork );
    }
#endif /* !defined(PARSEC_DRY_RUN) */

    parsec_private_memory_push( p_work, W );
}
END

zttmlq_in(k, n)  [profile = off]
  k = 0   .. KT2
  n = k+1 .. descA->nt-1
  type = %{ return qrtree.gettype( &qrtree, k, n );   %}

  : descA(k, n)

  RW A <- descA(k, n)
       -> (type == 0) ? V zttmlq(k, 0..descB->mt-1, n)
       -> (type != 0) ? V zttmlq(k, 0..descB->mt-1, n) [type = LOWER_TILE]

  RW T <- descTT(k, n)                                [type = LITTLE_T]
       -> T zttmlq(k, 0..descB->mt-1, n)               [type = LITTLE_T]

BODY
{
    /* nothing */
}
END

zttmlq_out_B(k, m) [profile = off]
  k = 0 .. KT2
  m = 0 .. descB->mt-1
  prevp = %{ return qrtree.prevpiv( &qrtree, k, k, k ); %}

  : descB(m, k)

  RW A -> A1 zttmlq( k, m, prevp )
       <- descB(m, k)

BODY
{
    /* nothing */
}
END
