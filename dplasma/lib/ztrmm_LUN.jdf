extern "C" %{
/*
 * Copyright (c) 2010-2018 The University of Tennessee and The University
 *                         of Tennessee Research Foundation. All rights
 *                         reserved.
 * Copyright (c) 2013      Inria. All rights reserved.
 * $COPYRIGHT
 *
 * @precisions normal z -> s d c
 *
 */
#include "dplasma/lib/dplasmajdf.h"
#include "parsec/data_dist/matrix/matrix.h"
#include "dplasma/lib/flops.h"
#include "dplasma/lib/floputils.h"

%}

side      [type = "PLASMA_enum"]
uplo      [type = "PLASMA_enum"]
trans     [type = "PLASMA_enum"]
diag      [type = "PLASMA_enum"]
alpha     [type = "parsec_complex64_t"]
descA     [type = "const parsec_tiled_matrix_dc_t*"]
descB     [type = "parsec_tiled_matrix_dc_t*"]

read_A(m, k) [profile = off]
  /* Execution Space */
  m = 0 .. (descB->mt-1)
  k = m .. (descA->mt-1)

  /* Locality */
  : descA(m,k)

  READ  A    <- descA(m,k)
             -> (m == k) ? A ztrmm(m, 0..(descB->nt-1))
             -> (m != k) ? A zgemm(m, 0..(descB->nt-1), k)

BODY
{
    /* nothing */
}
END

read_B(n, k) [profile = off]
  /* Execution Space */
  n = 0..(descB->nt-1)
  k = 1..(descB->mt-1)

  /* Locality */
  : descB(k,n)

  READ  B    <- descB(k,n)
             -> B zgemm(0..(k-1), n, k)

BODY
{
    /* nothing */
}
END

ztrmm(m, n) [ flops = inline_c %{ return FLOPS_ZTRMM(side, CLEAN_MB(descB, m), CLEAN_NB(descB, n)); %} ]
  /* Execution Space */
  m = 0..(descB->mt-1)
  n = 0..(descB->nt-1)

  /* Locality */
  : descB(m,n)

  CTL   ctl0 <- ctl0 zgemm(0..(m-1), n, m)
  READ  A    <- A read_A(m, m)
  RW    B    <- descB(m,n)
             -> (m == (descB->mt-1)) ? descB(m,n)
             -> (m <  (descB->mt-1)) ? C zgemm(m, n, m+1)

BODY
{
    int tempmm = ((m)==(descB->mt-1)) ? (descB->m-(m*descB->mb)) : descB->mb;
    int tempnn = ((n)==(descB->nt-1)) ? (descB->n-(n*descB->nb)) : descB->nb;
    int lda = BLKLDD( descA, m );
    int ldb = BLKLDD( descB, m );

    printlog("CORE_ztrmm(%d, %d)\n"
             "\t(side, uplo, trans, diag, tempmm, tempnn, alpha, A(%d,%d)[%p], lda, B(%d,%d)[%p], ldb)\n",
             m, n, m, m, A, m, n, B);

#if !defined(PARSEC_DRY_RUN)
    CORE_ztrmm(side, uplo, trans,
               diag, tempmm, tempnn,
               alpha, A /* descA(m,m) */, lda,
                      B /* descB(m,n) */, ldb );
#endif  /* !defined(PARSEC_DRY_RUN) */
}
END

zgemm(m, n, k) [ flops = inline_c %{ return FLOPS_ZGEMM(CLEAN_MB(descB, m), CLEAN_NB(descB, n), CLEAN_NB(descA, k)); %} ]
  /* Execution Space */
  m = 0..(descB->mt-2)
  n = 0..(descB->nt-1)
  k = (m+1)..(descB->mt-1)

  /* Locality */
  : descB(m,n)

  CTL   ctl0 -> ctl0 ztrmm(k, n)
  READ  A    <- A read_A(m, k)
  READ  B    <- B read_B(n, k)
  RW    C    <- (k >  (m+1)) ? C zgemm(m, n, k-1)
             <- (k == (m+1)) ? B ztrmm(k-1, n)
             -> (k == (descB->mt-1)) ? descB(m,n)
             -> (k <  (descB->mt-1)) ? C zgemm(m, n, k+1)

BODY
{
    int tempmm = ((m)==(descB->mt-1)) ? (descB->m-(m*descB->mb)) : descB->mb;
    int tempnn = ((n)==(descB->nt-1)) ? (descB->n-(n*descB->nb)) : descB->nb;
    int tempkn = ((k)==(descA->nt-1)) ? (descA->n-(k*descA->nb)) : descA->nb;
    int lda = BLKLDD( descA, m );
    int ldbk = BLKLDD( descB, k );
    int ldb = BLKLDD( descB, m );

    printlog("CORE_zgemm(%d, %d, %d)\n"
             "\t(trans, PlasmaNoTrans, tempmm, tempnn, tempkn, alpha, A(%d,%d)[%p], lda, B(%d,%d)[%p], ldbk, 1.000000, B(%d,%d)[%p], ldb)\n",
             m, n, k, m, k, A, k, n, B, m, n, C);

#if !defined(PARSEC_DRY_RUN)
    CORE_zgemm(trans, PlasmaNoTrans, tempmm, tempnn, tempkn,
               alpha, A /* descA(m,k) */, lda,
                      B /* descB(k,n) */, ldbk,
               1.0,   C /* descB(m,n) */, ldb );
#endif  /* !defined(PARSEC_DRY_RUN) */
}
END

