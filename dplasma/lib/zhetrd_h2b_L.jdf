extern "C" %{
/*
 * Copyright (c) 2010-2016 The University of Tennessee and The University
 *                         of Tennessee Research Foundation. All rights
 *                         reserved.
 * Copyright (c) 2013      Inria. All rights reserved.
 * $COPYRIGHT
 *
 * @precisions normal z -> s d c
 *
 */
#include "dplasma/lib/dplasmajdf.h"
#include "parsec/data_dist/matrix/matrix.h"
#include "parsec/private_mempool.h"

%}

ib     [type = "int"]
descA  [type = "parsec_tiled_matrix_dc_t*"]
descT  [type = "parsec_tiled_matrix_dc_t*" aligned=descA]

pool_3 [type = "parsec_memory_pool_t *" size = "(sizeof(parsec_complex64_t)*descT->nb*4 *descT->nb)"]
pool_2 [type = "parsec_memory_pool_t *" size = "(sizeof(parsec_complex64_t)*descT->nb*2 *descT->nb)"]
pool_1 [type = "parsec_memory_pool_t *" size = "(sizeof(parsec_complex64_t)*descT->nb*ib)"]
pool_0 [type = "parsec_memory_pool_t *" size = "(sizeof(parsec_complex64_t)*descT->nb)"]


bcast_zgeqrt(k)
  k = 0..(descA->nt)-1-1
  : descA(k+1,k)
  READ A <- A zgeqrt(k)
         -> (descA->mt>=(k+3)) ? F zunmqr(k, (k+2)..(descA->mt-1))
  READ B <- B zgeqrt(k) [type=LITTLE_T]
         -> (descA->mt>=(k+3)) ? G zunmqr(k, (k+2)..(descA->mt-1)) [type = LITTLE_T]

; (descA->nt-k)*(descA->nt-k)*(descA->nt-k)
BODY
 /* */
END

zgeqrt_to_zherfb(k)
  k = 0..(descA->nt)-1-1
  : descA(k+1,k)
  READ A <- A zgeqrt(k)
         -> C zherfb(k)
  READ B <- B zgeqrt(k) [type=LITTLE_T]
         -> D zherfb(k) [type=LITTLE_T]

; (descA->nt-k)*(descA->nt-k)*(descA->nt-k)
BODY
 /* */
END

zgeqrt(k)
  /* Execution space */
  k = 0..(descA->nt)-1-1

  : descA(k+1,k)

  /* A == A(k+1,k) */
  /* B == T(k+1,k) */
  /* C == A(k+1,k) */
  /* D == T(k+1,k) */
  /* F == A(k+1,k) */
  /* G == T(k+1,k) */
  /* J == A(k+1,k) */
  /* M == A(i,k+1) */
  /* V == A(m1,k+1) */

  RW    A <- ((2+k)==descA->mt) & (k>=1) ? V ztsmqr_corner(k+1-2, k+1)
          <- (0==k) ? descA(k+1,k)
          <- (k>=1) & ((1+k)>=descA->mt) ? descA(k+1,k)
          <- (k>=1) & (descA->mt>=(k+3)) ? M ztsmqr_hetra1(k+1-2, descA->mt-1, k+1)
          -> A zgeqrt_to_zherfb(k)
          -> ((k+2)>=descA->mt) ? descA(k+1,k)
          -> A bcast_zgeqrt(k)
          -> (descA->mt>=(k+3)) ? J ztsqrt(k, k+2)
  RW    B <- descT(k+1,k)               [type = LITTLE_T]
          -> descT(k+1,k)               [type = LITTLE_T]
          -> B zgeqrt_to_zherfb(k)   [type = LITTLE_T]
          -> B bcast_zgeqrt(k)       [type = LITTLE_T]

  /*
  The following is a superset of the necessary anti-dependencies:

  */

; (descA->nt-k)*(descA->nt-k)*(descA->nt-k)

BODY

  int tempkn = ((k+1)==((descA->nt)-1)) ? ((descA->n)-((k+1)*(descA->nb))) : (descA->nb);
  int ldak = BLKLDD( descA, k+1 );

  void *p_elem_A = parsec_private_memory_pop( pool_0 );
  void *p_elem_B = parsec_private_memory_pop( pool_1 );

  CORE_zgeqrt(tempkn, descA->nb, ib,
        A /* A(k+1,k) */, ldak, B /* T(k+1,k) */,
        descT->mb, p_elem_A, p_elem_B );

  parsec_private_memory_push( pool_0, p_elem_A );
  parsec_private_memory_push( pool_1, p_elem_B );

  printlog("CORE_zgeqrt(%d)\n\t(tempkn, descA->nb, ib, A(%d,%d)[%p], ldak, T(%d,%d)[%p], descT->mb, p_elem_A, p_elem_B)\n",
  k, k+1, k, A, k+1, k, B);

END


zherfb(k)
  /* Execution space */
  k = 0..(descA->nt)-1-1

  : descA(k+1,k+1)

  /* A == A(k+1,k) */
  /* B == T(k+1,k) */
  /* C == A(k+1,k) */
  /* D == T(k+1,k) */
  /* E == A(k+1,k+1) */
  /* U == A(k+1,k+1) */
  /* W == A(m1,m1) */

  READ  C <- A zgeqrt_to_zherfb(k)
  READ  D <- B zgeqrt_to_zherfb(k)   [type = LITTLE_T]
  RW    E <- (0==k) ? descA(k+1,k+1)
          <- (k>=1) & ((k+1)>=descA->mt) ? descA(k+1,k+1)
          <- (k>=1) & (descA->mt>=(k+2)) ? W ztsmqr_corner(k+1-2, k+1)
          -> ((2+k)>=descA->mt) ? descA(k+1,k+1)
          -> (descA->mt>=(k+3)) ? U ztsmqr_corner(k, k+2)

  /*
  The following is a superset of the necessary anti-dependencies:

  */
; (descA->nt-k)*(descA->nt-k)*(descA->nt-k)

BODY

  int tempkn = ((k+1)==((descA->nt)-1)) ? ((descA->n)-((k+1)*(descA->nb))) : (descA->nb);
  int ldak = BLKLDD( descA, k+1 );

  void *p_elem_A = parsec_private_memory_pop( pool_2 );

  CORE_zherfb(PlasmaLower, tempkn, tempkn,
        ib, descT->nb, C /* A(k+1,k) */,
        ldak, D /* T(k+1,k) */, descT->mb,
        E /* A(k+1,k+1) */, ldak, p_elem_A,
        descT->nb );

  parsec_private_memory_push( pool_2, p_elem_A );

  printlog("CORE_zherfb(%d)\n\t(PlasmaLower, tempkn, tempkn, ib, descT->nb, A(%d,%d)[%p], ldak, T(%d,%d)[%p], descT->mb, A(%d,%d)[%p], ldak, p_elem_A, descT->nb)\n",
  k, k+1, k, C, k+1, k, D, k+1, k+1, E);

END


zunmqr(k,m)
  /* Execution space */
  k = 0..(descA->nt)-1-1
  m = k+2..descA->mt-1

  : descA(m,k+1)

  /* A == A(k+1,k) */
  /* B == T(k+1,k) */
  /* F == A(k+1,k) */
  /* G == T(k+1,k) */
  /* H == A(m,k+1) */
  /* N == A(m1,i) */
  /* Q == A(j,k+1) */
  /* V == A(m1,k+1) */

  READ  F <- A bcast_zgeqrt(k)
  READ  G <- B bcast_zgeqrt(k)  [type = LITTLE_T]
  RW    H <- (0==k) ? descA(m,k+1)
          <- (k>=1) ? N ztsmqr_hetra1(k+1-2, m, k+1)
          -> (m>=(k+3)) ? Q ztsmqr(k, k+2, m)
          -> ((k+2)==m) & (descA->nt>=(k+2)) ? V ztsmqr_corner(m-2, m)

  /*
  The following is a superset of the necessary anti-dependencies:

  */

; (descA->nt - k)*(descA->mt - m)*(descA->mt - m)

BODY

  int tempmm = ((m)==((descA->mt)-1)) ? ((descA->m)-(m*(descA->mb))) : (descA->mb);
  int tempkn = ((k+1)==((descA->nt)-1)) ? ((descA->n)-((k+1)*(descA->nb))) : (descA->nb);
  int ldak = BLKLDD( descA, k+1 );
  int ldam = BLKLDD( descA, m );

  void *p_elem_A = parsec_private_memory_pop( pool_1 );

  CORE_zunmqr(PlasmaRight, PlasmaNoTrans, tempmm,
        descA->nb, tempkn, ib,
        F /* A(k+1,k) */, ldak, G /* T(k+1,k) */,
        descT->mb, H /* A(m,k+1) */, ldam,
        p_elem_A, descT->nb );

  parsec_private_memory_push( pool_1, p_elem_A );

  printlog("CORE_zunmqr(%d, %d)\n\t(PlasmaRight, PlasmaNoTrans, tempmm, descA->nb, tempkn, ib, A(%d,%d)[%p], ldak, T(%d,%d)[%p], descT->mb, A(%d,%d)[%p], ldam, p_elem_A, descT->nb)\n",
  k, m, k+1, k, F, k+1, k, G, m, k+1, H);

END

ztsqrt_out_A0(k,m1) [profile = off]
  k = 0..(descA->nt)-3
  m1 = descA->mt-1

:descA(k+1,k)

RW J <- J ztsqrt(k,m1)
     -> descA(k+1,k)

BODY
 /* Nothing */
 printlog("ztsqrt_out_A0(%d, %d) A(%d, %d)[%p]\n",
          k, m1, k+1, k, J);
END

bcast_ztsqrt(k,m1)
  k = 0..(descA->nt)-1-1
  m1 = k+2..descA->mt-1
  : descA(m1,k)
  READ K <- K ztsqrt(k,m1)
         -> (m1>=(3+k)) ? O ztsmqr_hetra1(k, m1, (k+2)..(m1-1))
         -> (descA->mt>=(2+m1)) ? S ztsmqr(k, m1, (m1+1)..(descA->mt-1))
  READ L <- L ztsqrt(k,m1) [type=LITTLE_T]
         -> (descA->mt>=(m1+2)) ? T ztsmqr(k, m1, (m1+1)..(descA->mt-1))   [type = LITTLE_T]
         -> (m1>=(k+3)) ? P ztsmqr_hetra1(k, m1, (k+2)..(m1-1))    [type = LITTLE_T]

; (descA->nt - k)*(descA->mt - m1)*(descA->mt - m1)
BODY
 /* */
END

ztsqrt(k,m1)
  /* Execution space */
  k = 0..(descA->nt)-1-1
  m1 = k+2..descA->mt-1

  : descA(m1,k)

  /* A == A(k+1,k) */
  /* J == A(k+1,k) */
  /* K == A(m1,k) */
  /* L == T(m1,k) */
  /* M == A(i,k+1) */
  /* O == A(m1,k) */
  /* P == T(m1,k) */
  /* S == A(m1,k) */
  /* T == T(m1,k) */
  /* V == A(m1,k+1) */
  /* X == A(m1,k) */
  /* Y == T(m1,k) */

  RW    J <- (m1==(2+k)) ? A zgeqrt(m1-2)
          <- (m1>=(3+k)) ? J ztsqrt(k, m1-1)
          -> (descA->mt==(m1+1)) ? J ztsqrt_out_A0(k,m1)
          -> (descA->mt>=(m1+2)) ? J ztsqrt(k, m1+1)
  RW    K <- ((m1+1)==descA->mt) & (k>=1) ? V ztsmqr_corner(k-1, descA->mt-1)
          <- (0==k) ? descA(m1,k)
          <- (descA->mt>=(m1+2)) & (k>=1) ? M ztsmqr_hetra1(k-1, descA->mt-1, m1)
          -> K bcast_ztsqrt(k, m1)
          -> X ztsmqr_corner(k, m1)
          -> descA(m1,k)
  RW    L <- descT(m1,k)                  [type = LITTLE_T]
          -> L bcast_ztsqrt(k, m1)     [type = LITTLE_T]
          -> Y ztsmqr_corner(k, m1)    [type = LITTLE_T]
          -> descT(m1,k)                  [type = LITTLE_T]

  /*
  The following is a superset of the necessary anti-dependencies:

  */

; (descA->nt - k)*(descA->mt - m1)*(descA->mt - m1)

BODY

  int tempmm = ((m1)==((descA->mt)-1)) ? ((descA->m)-(m1*(descA->mb))) : (descA->mb);
  int ldak = BLKLDD( descA, k+1 );
  int ldam = BLKLDD( descA, m1 );

  void *p_elem_A = parsec_private_memory_pop( pool_0 );
  void *p_elem_B = parsec_private_memory_pop( pool_1 );

  CORE_ztsqrt(tempmm, descA->nb, ib,
        J /* A(k+1,k) */, ldak, K /* A(m1,k) */,
        ldam, L /* T(m1,k) */, descT->mb,
        p_elem_A, p_elem_B );

  parsec_private_memory_push( pool_0, p_elem_A );
  parsec_private_memory_push( pool_1, p_elem_B );

  printlog("CORE_ztsqrt(%d, %d)\n\t(tempmm, descA->nb, ib, A(%d,%d)[%p], ldak, A(%d,%d)[%p], ldam, T(%d,%d)[%p], descT->mb, p_elem_A, p_elem_B)\n",
  k, m1, k+1, k, J, m1, k, K, m1, k, L);

END

ztsmqr_hetra1_out_A0(k,m1,i) [profile = off]
  k = ((descA->nt>=2) ? (descA->nt-2) : (descA->nt-1))..descA->nt-2
  m1 = (k+2)..(descA->mt-1)
  i = (k+2)..(m1-1)

  : descA(i, k+1)

  RW M <- M ztsmqr_hetra1(k,m1,i)
       -> descA(i,k+1)
BODY
/* nothing */
 printlog("ztsmqr_hetra1_out_A0(%d, %d, %d) A(%d, %d)[%p]\n",
          k, m1, i, m1, i, M);
END

ztsmqr_hetra1(k,m1,i)
  /* Execution space */
  k = 0..(descA->nt)-1-1
  m1 = k+2..descA->mt-1
  i = k+2..m1-1

  : descA(m1, i)

  /* A == A(k+1,k) */
  /* H == A(m,k+1) */
  /* K == A(m1,k) */
  /* L == T(m1,k) */
  /* M == A(i,k+1) */
  /* N == A(m1,i) */
  /* O == A(m1,k) */
  /* P == T(m1,k) */
  /* R == A(j,m1) */
  /* V == A(m1,k+1) */

  RW    M <- (m1>=(2+i)) ? M ztsmqr_hetra1(k, m1-1, i)
          <- ((1+i)==m1) ? V ztsmqr_corner(k, m1-1)
          -> (descA->mt==(m1+1)) & ((k+2)==i) & (descA->nt>=(k+3)) ? A zgeqrt(i-1)
          -> (descA->mt==(m1+1)) & (i>=(k+3)) & (descA->nt>=(k+3)) ? K ztsqrt(k+1, i)
          -> (descA->mt>=(2+m1)) ? M ztsmqr_hetra1(k, m1+1, i)
          -> (descA->nt==i) ? M ztsmqr_hetra1_out_A0(k,m1,i)
          -> (descA->nt==(k+2)) & (i>=(descA->nt+1)) ? M ztsmqr_hetra1_out_A0(k,m1,i)
  RW    N <- R ztsmqr(k, i, m1)
          -> (i>=(k+3)) & (descA->nt>=(3+k)) ? R ztsmqr(k+1, i, m1)
          -> (descA->nt==(k+2)) ? descA(m1,i)
          -> (i==(k+2)) & (descA->nt>=(i+1)) ? H zunmqr(i-1, m1)
  READ  O <- K bcast_ztsqrt(k, m1)
  READ  P <- L bcast_ztsqrt(k, m1)    [type = LITTLE_T]

  /*
  The following is a superset of the necessary anti-dependencies:

  */

BODY

  int tempmm = ((m1)==((descA->mt)-1)) ? ((descA->m)-(m1*(descA->mb))) : (descA->mb);
  int ldai = BLKLDD( descA, i );
  int ldam = BLKLDD( descA, m1 );
  int ldwork = ((PlasmaLeft)==(PlasmaLeft)) ? (ib) : (descT->nb);

  void *p_elem_A = parsec_private_memory_pop( pool_1 );

  CORE_ztsmqr_hetra1(PlasmaLeft, PlasmaConjTrans, descA->mb,
        descA->nb, tempmm, descA->nb,
        descA->nb, ib, M /* A(i,k+1) */,
        ldai, N /* A(m1,i) */, ldam,
        O /* A(m1,k) */, ldam, P /* T(m1,k) */,
        descT->mb, p_elem_A, ldwork );

  parsec_private_memory_push( pool_1, p_elem_A );

  printlog("CORE_ztsmqr_hetra1(%d, %d, %d)\n\t(PlasmaLeft, PlasmaConjTrans, descA->mb, descA->nb, tempmm, descA->nb, descA->nb, ib, A(%d,%d)[%p], ldai, A(%d,%d)[%p], ldam, A(%d,%d)[%p], ldam, T(%d,%d)[%p], descT->mb, p_elem_A, ldwork)\n",
  k, m1, i, i, k+1, M, m1, i, N, m1, k, O, m1, k, P);

END

ztsmqr(k,m1,j)
  /* Execution space */
  k = 0..(descA->nt)-1-1
  m1 = k+2..descA->mt-1
  j = m1+1..descA->mt-1

  : descA(j,m1)

  /* H == A(m,k+1) */
  /* K == A(m1,k) */
  /* L == T(m1,k) */
  /* N == A(m1,i) */
  /* Q == A(j,k+1) */
  /* R == A(j,m1) */
  /* S == A(m1,k) */
  /* T == T(m1,k) */
  /* V == A(m1,k+1) */

  RW    Q <- (m1>=(3+k)) ? Q ztsmqr(k, m1-1, j)
          <- ((2+k)==m1) ? H zunmqr(m1-2, j)
          -> (j>=(2+m1)) ? Q ztsmqr(k, m1+1, j)
          -> ((1+m1)==j) ? V ztsmqr_corner(k, j)
  RW    R <- (k>=1) ? N ztsmqr_hetra1(k-1, j, m1)
          <- (0==k) ? descA(j,m1)
          -> N ztsmqr_hetra1(k, j, m1)
  READ  S <- K bcast_ztsqrt(k, m1)
  READ  T <- L bcast_ztsqrt(k, m1)    [type = LITTLE_T]

  /*
  The following is a superset of the necessary anti-dependencies:

  */

; (descA->nt - k)*(descA->mt - j)*(descA->mt - m1)

BODY

  int tempjj = ((j)==((descA->mt)-1)) ? ((descA->m)-(j*(descA->mb))) : (descA->mb);
  int tempmm = ((m1)==((descA->mt)-1)) ? ((descA->m)-(m1*(descA->mb))) : (descA->mb);
  int ldaj = BLKLDD( descA, j );
  int ldam = BLKLDD( descA, m1 );
  int ldwork = ((PlasmaRight)==(PlasmaLeft)) ? (ib) : (descT->nb);

  void *p_elem_A = parsec_private_memory_pop( pool_1 );

  CORE_ztsmqr(PlasmaRight, PlasmaNoTrans, tempjj,
        descA->nb, tempjj, tempmm,
        descA->nb, ib, Q /* A(j,k+1) */,
        ldaj, R /* A(j,m1) */, ldaj,
        S /* A(m1,k) */, ldam, T /* T(m1,k) */,
        descT->mb, p_elem_A, ldwork );

  parsec_private_memory_push( pool_1, p_elem_A );

  printlog("CORE_ztsmqr(%d, %d, %d)\n\t(PlasmaRight, PlasmaNoTrans, tempjj, descA->nb, tempjj, tempmm, descA->nb, ib, A(%d,%d)[%p], ldaj, A(%d,%d)[%p], ldaj, A(%d,%d)[%p], ldam, T(%d,%d)[%p], descT->mb, p_elem_A, ldwork)\n",
  k, m1, j, j, k+1, Q, j, m1, R, m1, k, S, m1, k, T);

END

ztsmqr_corner_out_A0(k,m1) [profile = off]
  k = ((descA->nt>=2) ? 0 : (descA->mt-2))..(descA->mt-3)
  m1 = (descA->mt-1)

  : descA(k+1,k+1)
  RW U <- U ztsmqr_corner(k,m1)
       -> descA(k+1,k+1)
BODY
/* nothing */
 printlog("ztsmqr_corner_out_A0(%d, %d) A(%d, %d)[%p]\n",
          k, m1, k+1, k+1, U);
END

ztsmqr_corner(k,m1)
  /* Execution space */
  k = 0..(descA->nt)-1-1
  m1 = k+2..descA->mt-1

 /*
  * Hand Tunning: decision of the data affinity,
  * and simplification of phony tasks is based on the
  * following observation:
  *
  * Because MT == descA->nt, cases where m1==descA->nt & 1+m1==MT are never true
  * Based on that, we compute how many times each of the possible phony
  * tasks will be used for A and for T, depending on the access:
  *              A                     T
  * (k+1,k+1)    descA->nt-2              0
  * (m1,k+1)     0(2)                  0
  * (m1,m1)      2*(MT-3)+ 0(mcA->nt..MT-1) 0
  * So, it's better to have a locality with (m1,m1), as soon as MT > 4
  *
  */

  : descA(m1,m1)

  /* A == A(k+1,k) */
  /* E == A(k+1,k+1) */
  /* H == A(m,k+1) */
  /* K == A(m1,k) */
  /* L == T(m1,k) */
  /* M == A(i,k+1) */
  /* Q == A(j,k+1) */
  /* U == A(k+1,k+1) */
  /* V == A(m1,k+1) */
  /* W == A(m1,m1) */
  /* X == A(m1,k) */
  /* Y == T(m1,k) */

  RW    U <- ((k+2)==m1) ? E zherfb(m1-2)
          <- (m1>=(3+k)) ? U ztsmqr_corner(k, m1-1)
          -> (descA->mt==(m1+1)) ? U ztsmqr_corner_out_A0(k,m1)
          -> (descA->mt>=(m1+2)) ? U ztsmqr_corner(k, m1+1)
  RW    V <- ((k+2)==m1) ? H zunmqr(m1-2, m1)
          <- (m1>=(k+3)) ? Q ztsmqr(k, m1-1, m1)
/*
 *            Not possible: because MT == descA->nt && descA->nt+1 == MT
 *        -> (descA->nt==m1) & (descA->nt==(k+2)) & ((descA->nt+1)==descA->mt) ? descA(m1,k+1)
 *            Not possible: because MT >= descA->nt + 2 && MT == descA->nt
 *        -> (descA->nt==(2+k)) & (descA->mt==(m1+1)) & (descA->mt>=(descA->nt+2)) ? descA(m1,k+1)
 */
          -> (descA->mt==(1+m1)) & (descA->mt==(k+3)) & (descA->nt>=descA->mt) ? A zgeqrt(m1-1)
          -> ((m1+1)==descA->mt) & (m1>=(3+k)) & (descA->nt>=(k+3)) ? K ztsqrt(k+1, m1)
          -> (descA->mt>=(m1+2)) ? M ztsmqr_hetra1(k, m1+1, m1)
  RW    W <- (0==k) ? descA(m1,m1)
          <- (k>=1) ? W ztsmqr_corner(k-1, m1)
          -> (m1>=(k+3)) & (descA->nt>=(k+3)) ? W ztsmqr_corner(k+1, m1)
          -> (descA->nt==(k+2)) ? descA(m1,m1)
          -> ((k+2)==m1) & (descA->nt>=(k+3)) ? E zherfb(m1-1)
  READ  X <- K ztsqrt(k, m1)
  READ  Y <- L ztsqrt(k, m1) [type = LITTLE_T]

  /*
  The following is a superset of the necessary anti-dependencies:

  */

BODY

  int tempmm = ((m1)==((descA->mt)-1)) ? ((descA->m)-(m1*(descA->mb))) : (descA->mb);
  int ldak = BLKLDD( descA, k+1 );
  int ldam = BLKLDD( descA, m1 );
  int ldwork = descT->nb;

  void *p_elem_A = parsec_private_memory_pop( pool_3 );

  CORE_ztsmqr_corner(descA->nb, descA->nb, tempmm,
        descA->nb, tempmm, tempmm,
        descA->nb, ib, descT->nb,
        U /* A(k+1,k+1) */, ldak, V /* A(m1,k+1) */,
        ldam, W /* A(m1,m1) */, ldam,
        X /* A(m1,k) */, ldam, Y /* T(m1,k) */,
        descT->mb, p_elem_A, ldwork );

  parsec_private_memory_push( pool_3, p_elem_A );

  printlog("CORE_ztsmqr_corner(%d, %d)\n\t(descA->nb, descA->nb, tempmm, descA->nb, tempmm, tempmm, descA->nb, ib, descT->nb, A(%d,%d)[%p], ldak, A(%d,%d)[%p], ldam, A(%d,%d)[%p], ldam, A(%d,%d)[%p], ldam, T(%d,%d)[%p], descT->mb, p_elem_A, ldwork)\n",
  k, m1, k+1, k+1, U, m1, k+1, V, m1, m1, W, m1, k, X, m1, k, Y);

END
