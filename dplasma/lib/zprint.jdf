extern "C" %{
/*
 * Copyright (c) 2010-2013 The University of Tennessee and The University
 *                         of Tennessee Research Foundation.  All rights
 *                         reserved.
 * Copyright (c) 2013      Inria. All rights reserved.
 *
 * @precisions normal z -> s d c
 *
 */
#include "dplasma/lib/dplasmajdf.h"
#include "parsec/data_dist/matrix/matrix.h"

static inline void
dplasma_zprint_tile( int m, int n,
                     const parsec_tiled_matrix_dc_t* descA,
                     parsec_complex64_t *M )
{
    int tempmm = ( m == descA->mt-1 ) ? descA->m - m*descA->mb : descA->mb;
    int tempnn = ( n == descA->nt-1 ) ? descA->n - n*descA->nb : descA->nb;
    int ldam = BLKLDD( descA, m );

    int ii, jj;

    fflush(stdout);
    for(ii=0; ii<tempmm; ii++) {
        if ( ii == 0 )
            fprintf(stdout, "(%2d, %2d) :", m, n);
        else
            fprintf(stdout, "          ");
        for(jj=0; jj<tempnn; jj++) {
#if defined(PRECISION_z) || defined(PRECISION_c)
            fprintf(stdout, " (% e, % e)",
                    creal( M[jj*ldam + ii] ),
                    cimag( M[jj*ldam + ii] ));
#else
            fprintf(stdout, " % e", M[jj*ldam + ii]);
#endif
        }
        fprintf(stdout, "\n");
    }
    fflush(stdout);
    usleep(1000);
}

%}

/*
 * Globals
 */
uplo   [type = PLASMA_enum]
descA  [type = "const parsec_tiled_matrix_dc_t*"]

plasma_upper [type = "PLASMA_enum"         hidden=on default=PlasmaUpper ]
plasma_lower [type = "PLASMA_enum"         hidden=on default=PlasmaLower ]

imone   [type = "int" hidden=on default="-1" ]
sizef   [type = "int" hidden=on default="( descA->mt * descA->nt )" ]
sizel   [type = "int" hidden=on default="( descA->nt * descA->mt - (descA->nt * (descA->nt-1))/2 )" ]
sizeu   [type = "int" hidden=on default="( descA->mt * descA->nt - (descA->mt * (descA->mt-1))/2 )" ]


/*
 * Print Full matrix
 */
PRINT_F(k) [profile = off]
  // Execution space
  k = 0..(((uplo != plasma_upper) && (uplo != plasma_lower)) ? sizef - 1 : imone)
  m = %{ return k % descA->mt; %}
  n = %{ return k / descA->mt; %}

  // Parallel partitioning
  : descA(m, n)

  // Parameters
READ A   <- descA(m, n)
CTL  ctl <- (k > 0)       ? ctl PRINT_F(k-1)
         -> (k < sizef-1) ? ctl PRINT_F(k+1)
BODY
{
#if !defined(PARSEC_DRY_RUN)
    dplasma_zprint_tile( m, n, descA, (parsec_complex64_t *)A );
#endif /* !defined(PARSEC_DRY_RUN) */
}
END


/*
 * Print Lower triangular
 */
PRINT_L(k) [profile = off]
  // Execution space
  k = 0..((uplo == plasma_lower) ? sizel-1 : imone)
  m = %{ int new_m = k; int new_n = 0; while ( new_m > descA->mt-1 ) { new_m -= (descA->mt - new_n - 1); new_n++; }; return new_m; %}
  n = %{ int new_m = k; int new_n = 0; while ( new_m > descA->mt-1 ) { new_m -= (descA->mt - new_n - 1); new_n++; }; return new_n; %}

  // Parallel partitioning
  : descA(m, n)

  // Parameters
READ  A   <- descA(m, n)
CTL   ctl <- (k > 0)       ? ctl PRINT_L(k-1)
          -> (k < sizel-1) ? ctl PRINT_L(k+1)
BODY
{
#if !defined(PARSEC_DRY_RUN)
    dplasma_zprint_tile( m, n, descA, (parsec_complex64_t *)A );
#endif /* !defined(PARSEC_DRY_RUN) */
}
END

/*
 * Print Upper triangular
 */
PRINT_U(k) [profile = off]
  // Execution space
  k = 0..((uplo == plasma_upper) ? sizeu-1 : imone)
  m = %{ int new_m = k; int new_n = 0; while ( new_m > new_n ) { new_n++; new_m -= new_n; }; return new_m; %}
  n = %{ int new_m = k; int new_n = 0; while ( new_m > new_n ) { new_n++; new_m -= new_n; }; return new_n; %}

  // Parallel partitioning
  : descA(m, n)

  // Parameters
READ  A   <- descA(m, n)
CTL   ctl <- (k > 0)       ? ctl PRINT_U(k-1)
          -> (k < sizeu-1) ? ctl PRINT_U(k+1)
BODY
{
#if !defined(PARSEC_DRY_RUN)
    dplasma_zprint_tile( m, n, descA, (parsec_complex64_t *)A );
#endif /* !defined(PARSEC_DRY_RUN) */
}
END
