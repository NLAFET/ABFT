extern "C" %{
/*
 * Copyright (c) 2010-2018 The University of Tennessee and The University
 *                         of Tennessee Research Foundation. All rights
 *                         reserved.
 *
 * @precisions normal z -> s d c
 * $COPYRIGHT
 *
 */
#include "dplasma/lib/dplasmajdf.h"
#include "dplasma/lib/dplasmaaux.h"
#include "parsec/data_dist/matrix/matrix.h"
#include "parsec/data_dist/matrix/two_dim_rectangle_cyclic.h"
#include "dplasma/lib/flops.h"
#include "dplasma/lib/floputils.h"
#include <math.h>

#if defined(PARSEC_HAVE_CUDA)
#include <cublas.h>
#endif  /* defined(PARSEC_HAVE_CUDA) */
%}

/*
 * Globals
 */
transA [type = int]
transB [type = int]

alpha  [type = parsec_complex64_t]
beta   [type = parsec_complex64_t]

descA  [type = "const parsec_tiled_matrix_dc_t*"]
descB  [type = "const parsec_tiled_matrix_dc_t*"]
descC  [type = "parsec_tiled_matrix_dc_t*"]
Cdist  [type = "parsec_data_collection_t *"]

P      [type = "int" hidden=on default="((two_dim_block_cyclic_t*)descC)->grid.rows"]
Q      [type = "int" hidden=on default="((two_dim_block_cyclic_t*)descC)->grid.cols"]

/* Look ahead on both dimensions */
lookP  [type = "int" hidden=on default="dplasma_aux_getGEMMLookahead(descC)"]
lookQ  [type = "int" hidden=on default="dplasma_aux_getGEMMLookahead(descC)"]

/**************************************************
 *                       READ_A                   *
 **************************************************/
READ_A(k, m)  [profile = off]

k = 0 .. descA->mt-1
m = 0 .. descA->nt-1

: descA(k, m)

READ A <- descA(k, m)
       -> A RING_A(k, m, k%Q)
BODY
{
    printlog("rank %u <- A(%d,%d)\n", ((parsec_data_collection_t*)descA)->myrank, k, m);
}
END

RING_A(k, m, q)  [profile = off]

k = 0 .. descA->mt-1
m = 0 .. descA->nt-1
q = 0 .. Q-1
prevq = (q-1+Q)%Q
nextq = (q+1)%Q

: Cdist(m, q)

READ A <- (k%Q == q) ? A READ_A(k, m) : A RING_A(k, m, prevq)
       -> A GEMM(m, q .. descC->nt-1 .. Q, k)
       -> (nextq != (k%Q)) ? A RING_A(k, m, nextq)

CTL ctla <- (k >= lookQ) ? ctla GEMM(m, q .. descC->nt-1 .. Q, k-lookQ)

BODY
{
    printlog("rank %u <- A(%d,%d)\n", ((parsec_data_collection_t*)descA)->myrank, k, m);
}
END

/**************************************************
 *                       READ_B                   *
 **************************************************/
READ_B(k, n) [profile = off]

k = 0 .. descB->mt-1
n = 0 .. descB->nt-1

: descB(k, n)

READ B <- descB(k, n)
       -> B RING_B(k, n, k%P)
BODY
{
     printlog("rank %u <- B(%d,%d)\n", ((parsec_data_collection_t*)descB)->myrank, k, n);
}
END

RING_B(k, n, p)  [profile = off]

k = 0 .. descB->mt-1
n = 0 .. descB->nt-1
p = 0 .. P-1
prevp = (p-1+P)%P
nextp = (p+1)%P

: Cdist(p, n)

READ B <- (k%P == p) ? B READ_B(k, n) : B RING_B(k, n, prevp)
       -> B GEMM(p .. descC->mt-1 .. P, n, k)
       -> (nextp != (k%P)) ? B RING_B(k, n, nextp)

CTL ctlb <- (k >= lookP) ? ctlb GEMM(p .. descC->mt-1 .. P, n, k-lookP)

BODY
{
     printlog("rank %u <- B(%d,%d)\n", ((parsec_data_collection_t*)descB)->myrank, k, n);
}
END

/**************************************************
 *                       GEMM                     *
 **************************************************/
GEMM(m, n, k) [flops = inline_c%{ return FLOPS_ZGEMM(CLEAN_MB(descC, m), CLEAN_NB(descC, n), CLEAN_MB(descA, k)); %}]

// Execution space
m = 0 .. descC->mt-1
n = 0 .. descC->nt-1
k = 0 .. descA->mt-1

// Parallel partitioning
: descC(m, n)

// Parameters
READ A <- A RING_A(k, m, n%Q)
READ B <- B RING_B(k, n, m%P)
RW   C <- (k == 0)             ? descC(m, n) : C GEMM( m, n, k-1 )
       -> (k == (descA->mt-1)) ? descC(m, n) : C GEMM( m, n, k+1 )

CTL ctla -> (k < (descA->mt-lookQ)) ? ctla RING_A(k+lookQ, m, n%Q)
CTL ctlb -> (k < (descA->mt-lookP)) ? ctlb RING_B(k+lookP, n, m%P)

BODY [type=CUDA
      dyld=cublasZgemm dyldtype=cublas_zgemm_t
      weight=(descA->mt-k)]
{
#if defined(PRECISION_z) || defined(PRECISION_c)
    cuDoubleComplex lalpha = make_cuDoubleComplex(creal(alpha), cimag(alpha));
    cuDoubleComplex lbeta  = (k == 0) ? make_cuDoubleComplex(creal(beta), cimag(beta))
                                      : make_cuDoubleComplex(1.0, 0.0);
#else
    double lalpha = alpha;
    double lbeta  = (k == 0) ? beta : 1.0;
#endif
    int tempmm = m == descC->mt-1 ? descC->m - m * descC->mb : descC->mb;
    int tempnn = n == descC->nt-1 ? descC->n - n * descC->nb : descC->nb;
    int tempkk = k == descA->mt-1 ? descA->m - k * descA->mb : descA->mb;
    int ldak = BLKLDD(descA, k);
    int ldbk = BLKLDD(descB, k);
    int ldcm = BLKLDD(descC, m);

    cublasStatus_t status;
    cublasSetKernelStream( parsec_body.stream );
    parsec_body.dyld_fn( lapack_const(transA), lapack_const(transB),
             tempmm, tempnn, tempkk,
             lalpha, (cuDoubleComplex*)A, ldak,
                     (cuDoubleComplex*)B, ldbk,
             lbeta,  (cuDoubleComplex*)C, ldcm );
    status = cublasGetError();
    PARSEC_CUDA_CHECK_ERROR( "cublasZgemm ", status,
                            {return -1;} );
}
END

BODY
{
    parsec_complex64_t lbeta = (k == 0) ? beta : (parsec_complex64_t)1.0;
    int tempmm = m == descC->mt-1 ? descC->m - m * descC->mb : descC->mb;
    int tempnn = n == descC->nt-1 ? descC->n - n * descC->nb : descC->nb;
    int tempkk = k == descA->mt-1 ? descA->m - k * descA->mb : descA->mb;
    int ldak = BLKLDD(descA, k);
    int ldbk = BLKLDD(descB, k);
    int ldcm = BLKLDD(descC, m);

#if !defined(PARSEC_DRY_RUN)
    CORE_zgemm(transA, transB,
               tempmm, tempnn, tempkk,
               alpha, A /*A(k, m)*/, ldak,
                      B /*B(k, n)*/, ldbk,
               lbeta, C /*C(m, n)*/, ldcm);
#endif  /* !defined(PARSEC_DRY_RUN) */

    printlog("gemm( %d, %d, %d )\n"
             "    ( %s, %s, %d, %d, %d, %f, A(%d,%d), %d, B(%d,%d), %d, %f, C(%d,%d), %d)\n",
             m, n, k,
             plasma_const( transA ), plasma_const( transB ),
             tempmm, tempnn, tempkk,
             creal(alpha), k, m, ldak,
                           k, n, ldbk,
             creal(lbeta), m, n, ldcm);
}
END
