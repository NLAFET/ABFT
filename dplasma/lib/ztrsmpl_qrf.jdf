extern "C" %{
/*
 * Copyright (c) 2010-2016 The University of Tennessee and The University
 *                         of Tennessee Research Foundation. All rights
 *                         reserved.
 * Copyright (c) 2013      Inria. All rights reserved.
 * $COPYRIGHT
 *
 * @precisions normal z -> s d c
 *
 */
#include <pthread.h>
#include "dplasma/lib/dplasmajdf.h"
#include "parsec/data_dist/matrix/matrix.h"
#include "parsec/data_dist/matrix/two_dim_rectangle_cyclic.h"

%}

descA   [type = "parsec_tiled_matrix_dc_t*"]
IPIV    [type = "parsec_data_collection_t*"       aligned=descA]
TS      [type = "parsec_tiled_matrix_dc_t*" aligned=descA]
TT      [type = "parsec_tiled_matrix_dc_t*" aligned=descA]
descB   [type = "parsec_tiled_matrix_dc_t*" aligned=descA]
lu_tab  [type = "int*"]
qrtree  [type = "dplasma_qrtree_t"]
ib      [type = "int"]
p_work  [type = "parsec_memory_pool_t *" size = "(sizeof(PLASMA_Complex64_t)*ib*(TS->nb))"]
p_tau   [type = "parsec_memory_pool_t *" size = "(sizeof(PLASMA_Complex64_t)   *(TS->nb))"]

param_p [type = int default="((two_dim_block_cyclic_t*)descA)->grid.rows" hidden=on ]
param_q [type = int default="((two_dim_block_cyclic_t*)descA)->grid.cols" hidden=on ]

/*===========================================================================================

                                       LU PART

===========================================================================================*/

/********************************************************************************************
 *
 *                                   GETRF kernel
 *
 * There are dplasma_qr_getnbgeqrf( pivfct, k, descA->mt ) getrf applyed at step
 * k on the block of rows indexed from m to m + s * param_p with a step of param_p. (1<=s<=param_a)
 * nextm is the first row that will be killed by the row m at step k.
 * nextm = descA->mt if the row m is never used as a killer.
 *
 ********************************************************************************************/

/********************************************************************************************
 *
 *                               SWAP + TRSM
 *
 ********************************************************************************************/

swptrsm_u(k, n)
  /* Execution space */
  k = 0 .. descB->mt-1
  n = 0 .. descB->nt-1

  /* Locality */
  : descB(k, n)

  READ  A    <- A  swptrsm_u_in(k)                                        [type = LOWER_TILE]
  READ  IP   <- IP swptrsm_u_in(k)                                        [type = PIVOT]
  RW    C    <- Bshm selector(k, k, n)
             -> descB(k, n)
             -> ( k < (descB->mt-1) ) ? V zgemm(k, (k+1)..(descB->mt-1), n)

  CTL   ctl  <- ( k > 0 ) ? ctl tile2panel(k-1, n)

  /* Priority */
  ; descB->nt - n - 1

BODY
{
    int s  = (descA->mt-k+param_p-1) / param_p;
    int ks = k + (s-1)*param_p;
    int tempkm = (k == (descB->mt-1)) ? (descB->m - k * descB->mb) : descB->mb;
    int tempnn = (n == (descB->nt-1)) ? (descB->n - n * descB->nb) : descB->nb;
    int tempm  = (s-1) * descB->mb +
        (( ks == descB->mt-1 ) ? descB->m - ks * descB->mb : descB->mb);
    int ldak = BLKLDD( descA, k);
    int ldbk = BLKLDD( descB, k);

    printlog("swptrsm_u(k=%d, n=%d)", k, n);

#if !defined(PARSEC_DRY_RUN)

        PLASMA_desc pdescB = plasma_desc_init( PlasmaComplexDouble,
                                               descB->mb, descB->nb, descB->mb * descB->nb,
                                               s*descB->mb, descB->nb, 0, 0,
                                               tempm, tempnn );
        pdescB.mat = (void*)C;

        if (CORE_zlaswp_ontile( pdescB, 1, tempkm, IP, 1 ) < 0) {
            fprintf(stderr, "descB-> MB=%d, NB=%d, ldm=%d, ldn=%d, m=%d, n=%d )\n"
                    "tempkm=%d\n",
                    descB->mb, descB->nb, s*descB->mb, descB->nb, tempm, tempnn,
                    tempkm );
        }

        CORE_ztrsm(
            PlasmaLeft, PlasmaLower, PlasmaNoTrans, PlasmaUnit,
            tempkm, tempnn,
            1., A /*A(k, k)*/, ldak,
                C /*B(k, n)*/, ldbk);
#endif /* !defined(PARSEC_DRY_RUN) */
}
END

swptrsm_u_in(k)   [profile = off]
  k = 0 .. descB->mt-1

  : descA(k, k)

  RW A  <- descA(k,k)
        -> A swptrsm_u(k, 0..descB->nt-1)  [type = LOWER_TILE]

  RW IP <- IPIV(k,k)                       [type = PIVOT]
        -> IP swptrsm_u(k, 0..descB->nt-1)    [type = PIVOT]

  CTL ctl <- ctl inputs(k)

BODY
{
    /* nothing */
    printlog("swptrsm_u_in(k=%d)", k);
}
END

/********************************************************************************************
 *
 *                                 GEMM kernel
 *
 ********************************************************************************************/

zgemm(k, m, n)
  /* Execution space */
  k = 0   .. descB->mt-2
  m = k+1 .. descB->mt-1
  n = 0   .. descB->nt-1

  diagdom0 = %{ return ((m-k  )%param_p); %}
  diagdom1 = %{ return ((m-k-1)%param_p); %}

  : descB(m, n)

  READ H   <- A zgemm_in(k, m)
  READ V   <- C swptrsm_u(k, n)

  RW   C   <- (diagdom0 == 0) ? Bshm selector(k, m, n) : A selector(k, m, n)
           -> A selector(k+1, m, n)

  CTL  ctl -> (diagdom1 == 0) ? ctl tile2panel(k, n)

; descB->nt - n - 1

BODY
{
    int tempmm = (m==descB->mt-1) ? (descB->m - m * descB->mb) : descB->mb;
    int tempnn = (n==descB->nt-1) ? (descB->n - n * descB->nb) : descB->nb;
    int tempkn = (k==descA->nt-1) ? (descA->n - k * descA->nb) : descA->nb;
    int ldam = BLKLDD( descA, m );
    int ldbk = BLKLDD( descB, k );
    int ldbm = BLKLDD( descB, m );

    printlog("zgemm( k=%d, m=%d, n=%d)\n", k, m, n);

#if !defined(PARSEC_DRY_RUN)
        CORE_zgemm(PlasmaNoTrans, PlasmaNoTrans,
                   tempmm, tempnn, tempkn,
                   -1., H /*(m, k)*/, ldam,
                        V /*(k, n)*/, ldbk,
                   1.,  C /*(m, n)*/, ldbm );
#endif /* !defined(PARSEC_DRY_RUN) */
}
END

zgemm_in(k, m)   [profile = off]
  k = 0   .. descB->mt-2
  m = k+1 .. descA->mt-1

 : descA(m, k)

  RW A <- descA(m, k)
       -> H zgemm(k, m, 0..descB->nt-1)

  CTL ctl <- ctl inputs(k)

BODY
{
    /* nothing */
}
END



/*==========================================================================================

                                   QR PART

===========================================================================================*/

/*
 * UNMQR (see GEQRT)
 */
zunmqr(k, i, n)

  /* Execution space */
  k = 0 .. descB->mt-1
  i = 0 .. %{ return qrtree.getnbgeqrf( &qrtree, k ) - 1; %}
  n = 0 .. descB->nt-1

  m     = %{ return qrtree.getm(    &qrtree, k, i); %}
  nextm = %{ return qrtree.nextpiv( &qrtree, k, m, descA->mt); %}

  : descB(m, n)

  READ  A <- A zunmqr_in(k,i)                                        [type = LOWER_TILE]
  READ  T <- T zunmqr_in(k,i)                                        [type = LITTLE_T]
  RW    C <- A selector(k, m, n)
          -> ( k == descA->mt-1 ) ? descB(m, n)
          -> ((k <  descA->mt-1) & (nextm != descA->mt) ) ? A1 zttmqr(k, nextm, n)
          -> ((k <  descA->mt-1) & (nextm == descA->mt) ) ? A2 zttmqr(k, m,     n)

  ; descB->nt - n - 1

BODY
{
    printlog("CORE_zunmqr(%d, %d, %d)\n"
             "\t(PlasmaLeft, PlasmaConjTrans, tempmm, tempnn, min(tempmm, tempnn), ib, \n"
             "\t A(%d,%d)[%p], ldam, T(%d,%d)[%p], TS->mb, A(%d,%d)[%p], ldam, p_elem_A, TS->nb)",
             k, m, n, m, k, A, m, k, T, m, n, C);

#if !defined(PARSEC_DRY_RUN)
        void *p_elem_B = parsec_private_memory_pop( p_work );

        int tempAmm = ( m == descA->mt-1 ) ? descA->m - m * descA->mb : descA->mb;
        int tempAkn = ( k == descA->nt-1 ) ? descA->n - k * descA->nb : descA->nb;
        int tempmin = dplasma_imin( tempAmm, tempAkn );
        int tempmm  = (m == (descB->mt-1)) ? (descB->m - m * descB->mb) : descB->mb;
        int tempnn  = (n == (descB->nt-1)) ? (descB->n - n * descB->nb) : descB->nb;
        int ldam    = BLKLDD( descA, m );
        int ldbm    = BLKLDD( descB, m );

        CORE_zunmqr(
            PlasmaLeft, PlasmaConjTrans,
            tempmm, tempnn, tempmin, ib,
            A /* A(m, k) */, ldam,
            T /* T(m, k) */, TS->mb,
            C /* B(m, n) */, ldbm,
            p_elem_B, TS->nb );

        parsec_private_memory_push( p_work, p_elem_B );
#endif /* !defined(PARSEC_DRY_RUN) */
}
END


zunmqr_in(k,i)  [profile = off]
  k = 0 .. descB->mt-1
  i = 0 .. %{ return qrtree.getnbgeqrf( &qrtree, k ) - 1; %}
  m = %{ return qrtree.getm( &qrtree, k, i); %}

  : descA(m, k)

  RW A <- descA(m,k)                        [type = LOWER_TILE]
       -> A zunmqr(k, i, 0..descB->nt-1)    [type = LOWER_TILE]

  RW T <- TS(m,k)                       [type = LITTLE_T]
       -> T zunmqr(k, i, 0..descB->nt-1)    [type = LITTLE_T]

  CTL ctl <- ctl inputs(k)

BODY
{
    /* nothing */
}
END


/***********************************************************************************************
 * TTMQR kernel (see TTQRT)
 *
 * type1 defines the operations to perfom at next step k+1 on the row m
 *   if type1 == 0, it will be a TS so the tile goes to a TTQRT/TTMQR operation
 *   if type1 != 0, it will be a TT so the tile goes to a GEQRT/UNMQR operation
 * im1 is the index of the killer m at the next step k+1 if its type is !0, descA->mt otherwise
 *
 **********************************************************************************************/

zttmqr(k, m, n)
  /* Execution space */
  k = 0   .. descB->mt-2
  m = k+1 .. descB->mt-1
  n = 0   .. descB->nt-1

  p =     %{ return qrtree.currpiv( &qrtree, k,   m);    %}
  nextp = %{ return qrtree.nextpiv( &qrtree, k,   p, m); %}
  prevp = %{ return qrtree.prevpiv( &qrtree, k,   p, m); %}
  prevm = %{ return qrtree.prevpiv( &qrtree, k,   m, m); %}
  type  = %{ return qrtree.gettype( &qrtree, k,   m );   %}
  type1 = %{ return qrtree.gettype( &qrtree, k+1, m );   %}
  ip    = %{ return qrtree.geti(    &qrtree, k,   p );   %}
  im    = %{ return qrtree.geti(    &qrtree, k,   m );   %}
  im1   = %{ return qrtree.geti(    &qrtree, k+1, m );   %}

  diagdom = %{ return ((m-k-1)%param_p == 0) ? 0 : 1; %}

  : descB(m, n)

  RW   A1 <-  (prevp == descA->mt) ? C zunmqr( k, ip, n ) : A1 zttmqr(k, prevp, n )

          ->  (nextp != descA->mt) ?                A1 zttmqr( k, nextp, n)
          -> ((nextp == descA->mt) & ( p == k ) ) ? A  zttmqr_out_A1(p, n)
          -> ((nextp == descA->mt) & ( p != k ) ) ? A2 zttmqr( k, p, n )

  RW   A2 <-  (type == 0 )                           ? A selector(k, m, n )
          <- ((type != 0 ) && (prevm == descA->mt ) ) ? C  zunmqr(k, im, n)
          <- ((type != 0 ) && (prevm != descA->mt ) ) ? A1 zttmqr(k, prevm, n )

          -> A selector(k+1, m, n)


  READ V  <- (type == 0) ? A zttmqr_in(k,m)
          <- (type != 0) ? A zttmqr_in(k,m)                                          [type = UPPER_TILE]

  READ T  <- T zttmqr_in(k,m)                                                        [type = LITTLE_T]

  CTL ctl ->  (k < (descB->mt-1)) && (diagdom == 0) ? ctl tile2panel(k, n)

  ; descB->nt - n - 1

BODY
{
    int tempkn = ( k == (descA->nt-1)) ? (descA->n - k * descA->nb) : descA->nb;
    int tempmm = ( m == (descB->mt-1)) ? (descB->m - m * descB->mb) : descB->mb;
    int tempnn = ( n == (descB->nt-1)) ? (descB->n - n * descB->nb) : descB->nb;
    int ldbp = BLKLDD( descB, p );
    int ldam = BLKLDD( descA, m );
    int ldbm = BLKLDD( descB, m );
    int ldwork = ib;

#if !defined(PARSEC_DRY_RUN)
        void *p_elem_B = parsec_private_memory_pop( p_work );

        if ( type == DPLASMA_QR_KILLED_BY_TS ) {
            CORE_ztsmqr(
                PlasmaLeft, PlasmaConjTrans,
                descB->mb, tempnn, tempmm, tempnn, tempkn, ib,
                A1 /* B(p, n) */, ldbp,
                A2 /* B(m, n) */, ldbm,
                V  /* A(m, k) */, ldam,
                T  /* T(m, k) */, TT->mb,
                p_elem_B, ldwork );
        } else {
            CORE_zttmqr(
                PlasmaLeft, PlasmaConjTrans,
                descB->mb, tempnn, tempmm, tempnn, tempkn, ib,
                A1 /* B(p, n) */, ldbp,
                A2 /* B(m, n) */, ldbm,
                V  /* A(m, k) */, ldam,
                T  /* T(m, k) */, TT->mb,
                p_elem_B, ldwork );
        }
        parsec_private_memory_push( p_work, p_elem_B );

#endif /* !defined(PARSEC_DRY_RUN) */

    printlog("CORE_zttmqr(%d, %d, %d)\n"
             "\t(PlasmaLeft, PlasmaConjTrans, descA->mb, tempnn, tempmm, tempnn, descA->nb, ib, \n"
             "\t A(%d,%d)[%p], A.mb, A(%d,%d)[%p], ldam, A(%d,%d)[%p], ldam, T(%d,%d)[%p], TT->mb, p_elem_A, ldwork)",
             k, m, n, p, n, A1, m, n, A2, m, k, V, m, k, T);
}
END

zttmqr_in(k,m)  [profile = off]
  k = 0   .. descA->mt-2
  m = k+1 .. descA->mt-1
  type = %{ return qrtree.gettype( &qrtree, k, m );   %}

  : descA(m, k)

  RW A <- descA(m,k)
       -> (type == 0) ? V zttmqr(k, m, 0..descB->nt-1)
       -> (type != 0) ? V zttmqr(k, m, 0..descB->nt-1) [type = UPPER_TILE]

  RW T <- TT(m,k)                        [type = LITTLE_T]
       -> T zttmqr(k, m, 0..descB->nt-1)     [type = LITTLE_T]

  CTL ctl <- ctl inputs(k)

BODY
{
    /* nothing */
}
END

zttmqr_out_A1(k, n) [profile = off]
  k = 0 .. descA->mt-2
  n = 0 .. descB->nt-1
  prevp = %{ return qrtree.prevpiv( &qrtree, k, k, k ); %}

  : descB(k, n)

  RW A <- A1 zttmqr( k, prevp, n )
       -> descB(k, n)

BODY
/* nothing */
END

/*==========================================================================================

                                   CHOICE PART

===========================================================================================*/

/************************************************************************************
 *                      Tile 2 panel (Forward)                                      *
 *         Insure that step k on panel n is done before to start step k+1           *
 ************************************************************************************/

tile2panel(k, n) [ profile = off ]
  k = 0 .. descB->mt-2
  n = 0 .. descB->nt-1

  did_lu = %{ return lu_tab[k];   %}
  do_lu  = %{ return lu_tab[k+1]; %}

  : descB(k+1, n)

  CTL  ctl  <- (did_lu == 1) ? ctl  zgemm(k, k+1..descB->mt-1..param_p, n)
                             : ctl zttmqr(k, k+1..descB->mt-1..param_p, n)
            /* Protect step k+1 */
            -> (do_lu == 1) ? ctl swptrsm_u(k+1, n)

; descB->nt - n - 1

BODY
{
    printlog("tile2panel( k=%d, n=%d )\n", k, n );
}
END

selector(k,m,n)
  /* Execution space */
  k = 0 .. descB->mt-1
  m = k .. descB->mt-1
  n = 0 .. descB->nt-1

  i      = %{ return qrtree.geti(    &qrtree, k, m );   %}
  type   = %{ return qrtree.gettype( &qrtree, k, m );   %}
  did_lu = %{ return (k == 0) ? -1 : lu_tab[k-1]; %}
  do_lu  = %{ return lu_tab[k]; %}
  diagdom= %{ return ((m-k)%param_p == 0); %}

  : descB(m,n)

  RW    A   <-   (k == 0) ? descB(m,n)   /* TODO: Mathieu maybe NULL ? */
            <- ( (k != 0) && (did_lu == 1) ) ? C zgemm(k-1,m,n)
            <- ( (k != 0) && (did_lu != 1) ) ? A2 zttmqr(k-1,m,n)
            -> ( (do_lu == 1) && (k != m) && !diagdom ) ? C zgemm(k,m,n)
            -> ( (do_lu != 1) && (type != 0) ) ? C zunmqr(k,i,n)
            -> ( (do_lu != 1) && (type == 0) ) ? A2 zttmqr(k,m,n)

  RW   Bshm <- descB(m, n)
            -> ( (do_lu == 1) && (k == m) && diagdom) ? C swptrsm_u(k,n)
            -> ( (do_lu == 1) && (k != m) && diagdom) ? C zgemm(k,m,n)

  ; descA->nt - k - 1
BODY
{
    /* Nothing */
    printlog("selector(%d, %d, %d) => lu_tab[%d] = %d\n",
             k, m, n, k, do_lu);

    /* The tile is part of the diagonal node and trailing submatrix */
    if ( (do_lu == 1) && (diagdom) ) {
        /* We update the shm version for swptrsm_u */
        if (A != Bshm) {
            int tempmm = (m==(descB->mt-1)) ? (descB->m - m * descB->mb) : descB->mb;
            int tempnn = (n==(descB->nt-1)) ? (descB->n - n * descB->nb) : descB->nb;
            int ldbm = BLKLDD( descB, m );

            CORE_zlacpy(PlasmaUpperLower, tempmm, tempnn,
                        A,    ldbm,
                        Bshm, ldbm);
        }
    }

}
END


inputs(k)
  /* Execution space */
  k = 0 .. descB->mt-1

  do_lu = %{ return lu_tab[k]; %}
  nbqr = %{ return qrtree.getnbgeqrf( &qrtree, k ) - 1; %}

  : descA(k, k)

  CTL  ctl -> (do_lu == 1) ? ctl swptrsm_u_in( k )
           -> (do_lu == 1) && (k < descB->mt-1) ? ctl zgemm_in( k, k+1..descA->mt-1 )
           -> (do_lu != 1) ? ctl zunmqr_in(k, 0..nbqr )
           -> (do_lu != 1) && (k < descB->mt-1) ? ctl zttmqr_in(k, k+1..descA->mt-1 )

BODY
{
    /* Nothing */
}
END

cleantasks(p, q)
  p = 0 .. %{ return dplasma_imin(param_p, descA->mt)-1; %}
  q = 0 .. %{ return dplasma_imin(param_q, dplasma_imax(descA->nt, descB->nt))-1; %}

  : descA(p, q)

  CTL ctl <- 0 ? ctl cleantasks(p, q) /* Unused: it's here to avoid compilation problems */

BODY
{
    int k, m, n, i;
    int nb_tasks = 0;

    for(k=0; k<descB->mt; k++){
        if (lu_tab[k] == 1) {
            /*
             * QR
             */
            int nb_qr = qrtree.getnbgeqrf( &qrtree, k );

            for(i=0; i<nb_qr; i++) {
                int m = qrtree.getm( &qrtree, k, i);
                if (zunmqr_in_pred(k, i, m))
                    nb_tasks++;

                for(n=0; n<descB->nt; n++) {
                    if (zunmqr_pred(k, i, n, m, -1))
                        nb_tasks++;
                }
            }


            for(m=k+1; m<descB->mt; m++) {
                if (zttmqr_in_pred(k, m, -1))
                    nb_tasks++;

                for(n=0; n<descB->nt; n++) {
                    if (zttmqr_pred(k, m, n, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1))
                        nb_tasks++;
                }
            }

            for(n=0; n<descB->nt; n++) {
                if ((zttmqr_out_A1_pred(k, n, -1)) && (k != descB->mt-1))
                    nb_tasks++;
            }

        } else {
            /*
             * LU
             */
            if (swptrsm_u_in_pred(k))
                nb_tasks++;

            for(n=0; n<descB->nt; n++) {
                if (swptrsm_u_pred(k, n))
                    nb_tasks++;
            }

            for(m=k+1; m<descB->mt; m++) {
                if (zgemm_in_pred(k, m))
                    nb_tasks++;

                for(n=0; n<descB->nt; n++) {
                    if (zgemm_pred(k, m, n, -1, -1))
                        nb_tasks++;
                }
            }
        }
    }
    (void)parsec_atomic_fetch_sub_int32( &this_task->taskpool->nb_tasks, nb_tasks );

}
END
