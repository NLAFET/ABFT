extern "C" %{
/*
 * Copyright (c) 2010-2013 The University of Tennessee and The University
 *                         of Tennessee Research Foundation. All rights
 *                         reserved.
 * Copyright (c) 2013      Inria. All rights reserved.
 * $COPYRIGHT
 *
 *
 * @precisions normal z -> s d c
 *
 * 4 versions: LN, LC, RN, RC
 *     - When N <-> C, only arrows on A are swap.
 *     - When L <-> R, n becomes m, and respectively m becomes n
 */
#include "dplasma/lib/dplasmajdf.h"
#include "parsec/data_dist/matrix/matrix.h"

%}

side      [type = "PLASMA_enum"]
trans     [type = "PLASMA_enum"]
descA     [type = "parsec_tiled_matrix_dc_t*"]
descB     [type = "parsec_tiled_matrix_dc_t*"]
descTS    [type = "parsec_tiled_matrix_dc_t*" aligned=descA]
descTT    [type = "parsec_tiled_matrix_dc_t*" aligned=descA]
qrtree    [type = "dplasma_qrtree_t"]

ib      [type = "int" hidden = on default = "descTS->mb" ]
KT      [type = "int" hidden = on default = "descA->nt-1" ]
KT2     [type = "int" hidden = on default = "dplasma_imin( KT, descA->mt-2 )" ]
p_work  [type = "parsec_memory_pool_t *" size = "(sizeof(PLASMA_Complex64_t)*ib*(descTS->nb))"]

zunmqr(k, i, n)
  /* Execution space */
  k = 0 .. KT
  i = 0 .. %{ return qrtree.getnbgeqrf( &qrtree, k ) - 1; %}
  n = 0 .. descB->nt-1

  p     = %{ return qrtree.getm(    &qrtree, k, i); %}
  nextp = %{ return qrtree.nextpiv( &qrtree, k, p, descA->mt); %}

  /* Locality */
  : descB(p, n)

  READ  A    <- A zunmqr_in(k, i)   [type = LOWER_TILE]
  READ  T    <- T zunmqr_in(k, i)   [type = LITTLE_T]
  RW    C    -> ( k == 0 ) ? descB(p, n)
             -> ( k >  0 ) ? A2 zttmqr(k-1, p, n)
             <- ( k == descA->mt-1 ) ? descB(p, n)
             <- ((k <  descA->mt-1) & (nextp != descA->mt) ) ? A1 zttmqr(k, nextp, n)
             <- ((k <  descA->mt-1) & (nextp == descA->mt) ) ? A2 zttmqr(k, p,     n)

BODY
{
    int temppm  = (p == (descB->mt-1)) ? (descB->m - p * descB->mb) : descB->mb;
    int tempnn  = (n == (descB->nt-1)) ? (descB->n - n * descB->nb) : descB->nb;
    int tempAkn = (k == (descA->nt-1)) ? (descA->n - k * descA->nb) : descA->nb;
    int tempmin = dplasma_imin( temppm, tempAkn );
    int ldap    = BLKLDD( descA, p );
    int ldbp    = BLKLDD( descB, p );

    void *W = parsec_private_memory_pop( p_work );

    printlog("CORE_zunmqr(%d, %d, %d) [%d, %d]\n"
             "\t(side=%s, trans=%s, M=%d, N=%d, K=%d, ib=%d,\n"
             "\t A(%d,%d)[%p], lda=%d, T(%d,%d)[%p], ldt=%d, B(%d,%d)[%p], ldb=%d, W=%p, LDW=%d)\n",
             k, i, n, p, nextp, plasma_const( side ), plasma_const( trans ), temppm, tempnn, tempmin, ib,
             p, k, A, ldap, p, k, T, descTS->mb, p, n, C, ldbp, W, descTS->nb );

#if !defined(PARSEC_DRY_RUN)
    CORE_zunmqr(
        side, trans,
        temppm, tempnn, tempmin, ib,
        A /* A(p, k) */, ldap,
        T /* T(p, k) */, descTS->mb,
        C /* B(p, n) */, ldbp,
        W, descTS->nb );
#endif /* !defined(PARSEC_DRY_RUN) */

    parsec_private_memory_push( p_work, W );
}
END

zunmqr_in(k,i)  [profile = off]
  k = 0 .. KT
  i = 0 .. %{ return qrtree.getnbgeqrf( &qrtree, k ) - 1; %}
  p = %{ return qrtree.getm( &qrtree, k, i); %}

  : descA(p, k)

  RW A <- descA(p, k)                      [type = LOWER_TILE]
       -> A zunmqr(k, i, 0 .. descB->nt-1)  [type = LOWER_TILE]

  RW T <- descTS(p, k)                     [type = LITTLE_T]
       -> T zunmqr(k, i, 0 .. descB->nt-1)  [type = LITTLE_T]

BODY
{
    /* nothing */
}
END

zttmqr(k, m, n)
  /* Execution Space */
  k = 0   .. KT2
  m = k+1 .. descB->mt-1
  n = 0   .. descB->nt-1

  p =     %{ return qrtree.currpiv( &qrtree, k, m);    %}
  nextp = %{ return qrtree.nextpiv( &qrtree, k, p, m); %}
  prevp = %{ return qrtree.prevpiv( &qrtree, k, p, m); %}
  prevm = %{ return qrtree.prevpiv( &qrtree, k, m, m); %}
  type  = %{ return qrtree.gettype( &qrtree, k, m );   %}
  ip    = %{ return qrtree.geti(    &qrtree, k, p );   %}
  im    = %{ return qrtree.geti(    &qrtree, k, m );   %}

  type1 = %{ return (k == KT) ? -1 : qrtree.gettype( &qrtree, k+1, m );   %}
  im1   = %{ return (k == KT) ? -1 : qrtree.geti(    &qrtree, k+1, m );   %}

  /* Locality */
  : descB(m, n)

  RW    A1   ->  (prevp == descA->mt) ? C zunmqr( k, ip, n ) : A1 zttmqr(k, prevp, n )

             <- ((nextp == descA->mt) & ( p == k ) ) ? A  zttmqr_out_B(p, n)
             <- ((nextp == descA->mt) & ( p != k ) ) ? A2 zttmqr( k, p,     n)
             <-  (nextp != descA->mt) ?                A1 zttmqr( k, nextp, n)

  RW    A2   -> ( (type  == 0 ) && (k     == 0        ) ) ? descB(m, n)
             -> ( (type  == 0 ) && (k     != 0        ) ) ? A2 zttmqr(k-1, m, n )
             -> ( (type  != 0 ) && (prevm == descA->mt ) ) ? C  zunmqr(k, im,    n )
             -> ( (type  != 0 ) && (prevm != descA->mt ) ) ? A1 zttmqr(k, prevm, n )

             <-   (k == KT)                    ? descB( m, n )
             <- ( (k <  KT) && (type1 != 0 ) ) ? C  zunmqr( k+1, im1, n )
             <- ( (k <  KT) && (type1 == 0 ) ) ? A2 zttmqr( k+1, m,   n )

  READ  V    <- (type == 0) ? A zttmqr_in(k,m)
             <- (type != 0) ? A zttmqr_in(k,m)                       [type = UPPER_TILE]

  READ  T    <- T zttmqr_in(k,m)                                     [type = LITTLE_T]

BODY
{
    int tempmm = ( m == (descB->mt-1)) ? (descB->m - m * descB->mb) : descB->mb;
    int tempnn = ( n == (descB->nt-1)) ? (descB->n - n * descB->nb) : descB->nb;
    int tempkn = ( k == (descA->nt-1)) ? (descA->n - k * descA->nb) : descA->nb;
    int ldam = BLKLDD( descA, m );
    int ldbp = BLKLDD( descB, p );
    int ldbm = BLKLDD( descB, m );
    int ldwork = ib;

    void *W = parsec_private_memory_pop( p_work );

    printlog("CORE_ztsmqr(%d, %d, %d)\n"
             "\t(side=%s, trans=%s, M1=%d, N1=%d, M2=%d, N2=%d, K=%d, ib=%d,\n"
             "\t A1(%d,%d)[%p], lda1=%d, A2(%d,%d)[%p], lda2=%d, V(%d,%d)[%p], ldv=%d, T(%d,%d)[%p], ldt=%d, W=%p, LDW=%d)\n",
             k, m, n, plasma_const( side ), plasma_const( trans ),
             descB->mb, tempnn, tempmm, tempnn, tempkn, ib,
             p, n, A1, ldbp, m, n, A2, ldbm, m, k, V, ldam, m, k, T, descTS->mb, W, ldwork );

#if !defined(PARSEC_DRY_RUN)
    if ( type == DPLASMA_QR_KILLED_BY_TS ) {
        CORE_ztsmqr(
            side, trans,
            descB->mb, tempnn, tempmm, tempnn, tempkn, ib,
            A1 /* B(p, n) */, ldbp,
            A2 /* B(m, n) */, ldbm,
            V  /* A(m, k) */, ldam,
            T  /* T(m, k) */, descTT->mb,
            W, ldwork );
    } else {
        CORE_zttmqr(
            side, trans,
            descB->mb, tempnn, tempmm, tempnn, tempkn, ib,
            A1 /* B(p, n) */, ldbp,
            A2 /* B(m, n) */, ldbm,
            V  /* A(m, k) */, ldam,
            T  /* T(m, k) */, descTT->mb,
            W, ldwork );
    }
#endif /* !defined(PARSEC_DRY_RUN) */

    parsec_private_memory_push( p_work, W );
}
END

zttmqr_in(k, m)  [profile = off]
  k = 0   .. %{ return dplasma_imin((descA->mt-2),KT); %}
  m = k+1 .. descA->mt-1
  type = %{ return qrtree.gettype( &qrtree, k, m );   %}

  : descA(m, k)

  RW A <- descA(m, k)
       -> (type == 0) ? V zttmqr(k, m, 0..descB->nt-1)
       -> (type != 0) ? V zttmqr(k, m, 0..descB->nt-1) [type = UPPER_TILE]

  RW T <- descTT(m, k)                      [type = LITTLE_T]
       -> T zttmqr(k, m, 0..descB->nt-1)     [type = LITTLE_T]

BODY
{
    /* nothing */
}
END

zttmqr_out_B(k, n) [profile = off]
  k = 0 .. %{ return dplasma_imin((descA->mt-2),KT); %}
  n = 0 .. descB->nt-1
  prevp = %{ return qrtree.prevpiv( &qrtree, k, k, k ); %}

  : descB(k, n)

  RW A -> A1 zttmqr( k, prevp, n )
       <- descB(k, n)

BODY
{
    /* nothing */
}
END
