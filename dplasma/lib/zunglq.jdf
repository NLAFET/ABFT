extern "C" %{
/*
 * Copyright (c) 2010-2016 The University of Tennessee and The University
 *                         of Tennessee Research Foundation. All rights
 *                         reserved.
 * Copyright (c) 2013-2016 Inria. All rights reserved.
 * $COPYRIGHT
 *
 *
 * @precisions normal z -> s d c
 *
 */
#include "dplasma/lib/dplasmajdf.h"
#include "parsec/data_dist/matrix/matrix.h"

%}

descA     [type = "parsec_tiled_matrix_dc_t*"]
descT     [type = "parsec_tiled_matrix_dc_t*"]
descQ     [type = "parsec_tiled_matrix_dc_t*"]
p_work    [type = "parsec_memory_pool_t *" size = "((sizeof(parsec_complex64_t))*ib)*descT->nb"]

ib        [type = "int" hidden = on default = "descT->mb" ]
KT        [type = "int" hidden = on default = "descA->mt-1" ]
KT2       [type = "int" hidden = on default = "dplasma_imin( KT, descQ->nt-2 )" ]

zlaset(m, n) [profile = off]
  /* Execution Space */
  m  = 0 .. descQ->mt-1
  n  = 0 .. descQ->nt-1
  k  = %{ return dplasma_imin(KT,dplasma_imin(m, n)); %}
  cc = %{ return ((descQ->nt == descA->mt) & (m == (descQ->nt-1)) & (n == (descQ->nt-1))); %}

  /* Locality */
  : descQ(m,n)

  RW    A    <- descQ(m,n)
             ->  cc ? C zunmlq(k, m)
             -> (!cc & ((n <= KT) & (m >= n))) ? A1 ztsmlq(k, descQ->nt-1, m)
             -> (!cc & ((n >  KT) | (m <  n))) ? A2 ztsmlq(k, n,          m)

BODY
{
    int tempmm = (m == (descQ->mt-1)) ? (descQ->m - m * descQ->mb) : descQ->mb;
    int tempnn = (n == (descQ->nt-1)) ? (descQ->n - n * descQ->nb) : descQ->nb;
    int ldqm = BLKLDD( descQ, m );

    printlog("CORE_zlaset(%d, %d)\n"
             "\t(PlasmaUpperLower, tempmm, tempnn, alpha, (m == n) ? (beta) : (alpha), Q(%d,%d)[%p], ldqm)\n",
             m, n, m, n, A);

#if !defined(PARSEC_DRY_RUN)
    CORE_zlaset(PlasmaUpperLower, tempmm, tempnn,
                0., (m == n) ? 1.: 0.,
                A /* descQ->m,n) */, ldqm );
#endif  /* !defined(PARSEC_DRY_RUN) */
}
END

zunmlq(k, m)
  /* Execution Space */
  k = 0 .. KT
  m = k .. descQ->mt-1

  /* Locality */
  : descQ(m, k)

  READ  A    <- A zunmlq_in_data_A0(k)   [type = UPPER_TILE]
  READ  T    <- T zunmlq_in_data_T1(k)   [type = LITTLE_T]

  RW    C    <- ( k == (descQ->nt-1)) ? A zlaset(m, k)
             <- ( k <  (descQ->nt-1)) ? A1 ztsmlq(k, k+1, m)
             -> ( k == 0 ) ? descQ(m, k)
             -> ( k >  0 ) ? A2 ztsmlq(k-1, k, m)

BODY
{
    int tempAkm  = (k == (descA->mt-1)) ? (descA->m - k * descA->mb) : descA->mb;
    int tempAkn  = (k == (descA->nt-1)) ? (descA->n - k * descA->nb) : descA->nb;
    int tempkmin = dplasma_imin( tempAkm, tempAkn );
    int tempmm   = (m == (descQ->mt-1)) ? (descQ->m - m * descQ->mb) : descQ->mb;
    int tempkn   = (k == (descQ->nt-1)) ? (descQ->n - k * descQ->nb) : descQ->nb;
    int ldak = BLKLDD( descA, k );
    int ldqm = BLKLDD( descQ, m );

#if !defined(PARSEC_DRY_RUN)
    void *p_elem_A = parsec_private_memory_pop( p_work );

    CORE_zunmlq(PlasmaRight, PlasmaNoTrans,
                tempmm, tempkn, tempkmin, ib,
                A /* descA->k, k) */, ldak,
                T /* descT->k, k) */, descT->mb,
                C /* descQ->m, k) */, ldqm,
                p_elem_A, descT->nb );

    parsec_private_memory_push( p_work, p_elem_A );
#endif  /* !defined(PARSEC_DRY_RUN) */
}
END

zunmlq_in_data_T1(k) [profile = off]
  /* Execution Space */
  k = 0 .. KT

  /* Locality */
  : descT(k,k)

  READ  T    <- descT(k,k)                       [type = LITTLE_T]
             -> T zunmlq(k, k .. descQ->mt-1)    [type = LITTLE_T]

BODY
{
    /* nothing */
}
END

zunmlq_in_data_A0(k) [profile = off]
  /* Execution Space */
  k = 0 .. KT

  /* Locality */
  : descA(k,k)

  READ  A    <- descA(k,k)                       [type = UPPER_TILE]
             -> A zunmlq(k, k .. descQ->mt-1)    [type = UPPER_TILE]

BODY
{
    /* nothing */
}
END

ztsmlq(k, n, m)
  /* Execution Space */
  k = 0     .. KT
  n = (k+1) .. (descQ->nt-1)
  m = k     .. (descQ->mt-1)

  /* Locality */
  : descQ(m,n)

  RW    A1   <- ( n == (descQ->nt-1) ) ? A  zlaset(m, k)
             <- ( n <  (descQ->nt-1) ) ? A1 ztsmlq(k, n+1, m)
             -> ( n == (k+1) ) ? C  zunmlq(k, m)
             -> ( n >  (k+1) ) ? A1 ztsmlq(k, n-1, m)

  RW    A2   <- ((k == KT) | (m == k)) ? A zlaset(m, n)
             <- ((k <  KT) & (m >  k) & (n == (k+1))) ? C  zunmlq(k+1, m)
             <- ((k <  KT) & (m >  k) & (n >  (k+1))) ? A2 ztsmlq(k+1, n, m)
             -> ( k == 0 ) ? descQ(m, n)
             -> ( k >  0 ) ? A2 ztsmlq(k-1, n, m)

  READ  V    <- V ztsmlq_in_data_A1(k, n)
  READ  T    <- T ztsmlq_in_data_T2(k, n)  [type = LITTLE_T]

BODY
{
    int tempAkm  = (k == (descA->mt-1)) ? (descA->m - k * descA->mb) : descA->mb;
    int tempAkn  = (k == (descA->nt-1)) ? (descA->n - k * descA->nb) : descA->nb;
    int tempkmin = dplasma_imin( tempAkm, tempAkn );
    int tempmm   = (m == (descQ->mt-1)) ? (descQ->m - m * descQ->mb) : descQ->mb;
    int tempnn   = (n == (descQ->nt-1)) ? (descQ->n - n * descQ->nb) : descQ->nb;
    int ldak = BLKLDD( descA, k );
    int ldqm = BLKLDD( descQ, m );

    printlog("CORE_ztsmlq(%d, %d, %d)\n"
             "\t(side, trans, descQ->mb, tempnn, tempmm, tempnn, tempkmin, ib, Q(%d,%d)[%p], ldbk, Q(%d,%d)[%p], ldbm, A(%d,%d)[%p], ldam, T(%d,%d)[%p], descT->mb, p_elem_A, ldwork)\n",
             k, m, n, k, n, A1, m, n, A2, m, k, V, m, k, T);

#if !defined(PARSEC_DRY_RUN)
    void *p_elem_A = parsec_private_memory_pop( p_work );

    CORE_ztsmlq( PlasmaRight, PlasmaNoTrans,
                 tempmm, descQ->nb, tempmm, tempnn, tempkmin, ib,
                 A1 /* descQ->m, k) */, ldqm,
                 A2 /* descQ->m, n) */, ldqm,
                 V  /* descA->k, n) */, ldak,
                 T  /* descT->k, n) */, descT->mb,
                 p_elem_A, descT->nb );

    parsec_private_memory_push( p_work, p_elem_A );
#endif  /* !defined(PARSEC_DRY_RUN) */
}
END

ztsmlq_in_data_T2(k, n) [profile = off]
  /* Execution Space */
  k = 0     .. KT2
  n = (k+1) .. (descQ->nt-1)

  /* Locality */
  : descT(k, n)

  READ  T    <- descT(k, n)                          [type = LITTLE_T]
             -> T ztsmlq(k, n, k .. (descQ->mt-1))   [type = LITTLE_T]

BODY
{
    /* nothing */
}
END

ztsmlq_in_data_A1(k, n) [profile = off]
  /* Execution Space */
  k = 0     .. KT2
  n = (k+1) .. (descQ->nt-1)

  /* Locality */
  : descA(k, n)

  READ  V    <- descA(k, n)
             -> V ztsmlq(k, n, k .. (descQ->mt-1))

BODY
{
    /* nothing */
}
END
