extern "C" %{
/*
 * Copyright (c) 2010-2018 The University of Tennessee and The University
 *                         of Tennessee Research Foundation. All rights
 *                         reserved.
 *
 * @precisions normal z -> z c
 *
 */
#include "dplasma/lib/dplasmajdf.h"
#include "parsec/data_dist/matrix/matrix.h"
#include "dplasma/lib/flops.h"
#include "dplasma/lib/floputils.h"

%}

uplo      [type = "PLASMA_enum"]
trans     [type = "PLASMA_enum"]
alpha     [type = "double"]
descA     [type = "const parsec_tiled_matrix_dc_t*"]
beta      [type = "double"]
descC     [type = "parsec_tiled_matrix_dc_t*"]


zherk(n, k) [flops = inline_c %{ return FLOPS_ZHERK(CLEAN_NB(descC, n), CLEAN_MB(descA, k)); %}]
  /* Execution Space */
  n = 0..(descC->nt-1)
  k = 0..(descA->mt-1)

  /* Locality */
  : descC(n,n)

  READ  A    <- A zherk_in_data_A0(n, k)
  RW    C    <- (0 == k) ? descC(n,n)
             <- (k >= 1) ? C zherk(n, k-1)
             -> ((descA->mt-1) >  k) ? C zherk(n, k+1)
             -> ((descA->mt-1) == k) ? descC(n,n)

BODY
{
    int tempnn = (n==(descC->nt-1)) ? (descC->n-(n*descC->nb)) : descC->nb;
    int tempkm = (k==(descA->mt-1)) ? (descA->m-(k*descA->mb)) : descA->mb;
    int ldak = BLKLDD( descA, k );
    double dbeta = (k==0) ? beta : (double)1.;
    int ldcn = BLKLDD( descC, n );

    printlog("CORE_zherk(%d, %d)\n"
             "\t(uplo, trans, tempnn, tempkm, alpha, A(%d,%d)[%p], ldak, dbeta, C(%d,%d)[%p], ldcn)\n",
             n, k, k, n, A, n, n, C);
#if !defined(PARSEC_DRY_RUN)
    CORE_zherk(uplo, trans, tempnn, tempkm,
               alpha, A /* descA(k,n) */, ldak,
               dbeta, C /* descC(n,n) */, ldcn );
#endif /* !defined(PARSEC_DRY_RUN) */
}
END

zherk_in_data_A0(n, k) [profile = off]
  /* Execution Space */
  n = 0..(descC->nt-1)
  k = 0..(descA->mt-1)

  /* Locality */
  : descA(k,n)

  READ  A    <- descA(k,n)
             -> A zherk(n, k)

BODY
{
    /* nothing */
}
END

zgemm(n, m, k) [flops = inline_c%{ return FLOPS_ZGEMM(CLEAN_NB(descC, n), CLEAN_MB(descC, m), CLEAN_MB(descA, k)); %}]
  /* Execution Space */
  n = 0     .. (descC->mt-2)
  m = (n+1) .. (descC->mt-1)
  k = 0     .. (descA->mt-1)

  /* Locality */
  : descC(n,m)

  READ  A    <- A zgemm_in_data_A0(n, k)
  READ  B    <- B zgemm_in_data_A1(m, k)
  RW    C    <- ((k>=1)) ? C zgemm(n, m, k-1)
             <- ((0==k)) ? descC(n,m)
             -> ((descA->mt==(k+1))) ? descC(n,m)
             -> ((descA->mt>=(2+k))) ? C zgemm(n, m, k+1)

BODY
{
    int tempnn = (n==(descC->nt-1)) ? (descC->n-(n*descC->nb)) : descC->nb;
    int tempmm = ((m)==(descC->mt-1)) ? (descC->m-(m*descC->mb)) : descC->mb;
    int tempkm = (k==(descA->mt-1)) ? (descA->m-(k*descA->mb)) : descA->mb;
    parsec_complex64_t zalpha = (parsec_complex64_t)alpha;
    int ldak = BLKLDD( descA, k );
    parsec_complex64_t zbeta = (k==0) ? ((parsec_complex64_t)beta) : ((parsec_complex64_t)1.);
    int ldcn = BLKLDD( descC, n );

    printlog("CORE_zgemm(%d, %d, %d)\n"
             "\t(trans, PlasmaNoTrans, tempnn, tempmm, tempkm, zalpha, A(%d,%d)[%p], ldak, A(%d,%d)[%p], ldak, zbeta, C(%d,%d)[%p], ldcn)\n",
             n, m, k, k, n, A, k, m, B, n, m, C);
#if !defined(PARSEC_DRY_RUN)
    CORE_zgemm(trans, PlasmaNoTrans, tempnn, tempmm, tempkm,
               zalpha, A /* descA(k,n) */, ldak,
                       B /* descA(k,m) */, ldak,
               zbeta,  C /* descC(n,m) */, ldcn );
#endif /* !defined(PARSEC_DRY_RUN) */
}
END

zgemm_in_data_A1(m, k) [profile = off]
  /* Execution Space */
  m = 1..(descC->mt-1) /* tight bound is (n+1)..(descC->mt-1) */
  k = 0..(descA->mt-1)

  /* Locality */
  : descA(k,m)

  READ  B    <- descA(k,m)
             -> B zgemm(0..(descC->mt-2), m, k)

BODY
{
    /* nothing */
}
END

zgemm_in_data_A0(n, k) [profile = off]
  /* Execution Space */
  n = 0..(descC->mt-2)
  k = 0..(descA->mt-1)

  /* Locality */
  : descA(k,n)

  READ  A    <- descA(k,n)
             -> A zgemm(n, (n+1)..(descC->mt-1), k)

BODY
{
    /* nothing */
}
END
