extern "C" %{
/*
 * Copyright (c) 2010-2018 The University of Tennessee and The University
 *                         of Tennessee Research Foundation. All rights
 *                         reserved.
 * Copyright (c) 2013      Inria. All rights reserved.
 * $COPYRIGHT
 *
 *
 * @precisions normal z -> s d c
 *
 */
#include "dplasma/lib/dplasmajdf.h"
#include "parsec/data_dist/matrix/matrix.h"
#include "dplasma/lib/flops.h"
#include "dplasma/lib/floputils.h"

#if defined(PARSEC_HAVE_CUDA)
#include <cublas.h>
#endif  /* defined(PARSEC_HAVE_CUDA) */

%}

descA     [type = "parsec_tiled_matrix_dc_t*"]
ib        [type = "int" hidden=on default="(32)" ]
KT        [type = "int" hidden=on default="(dplasma_imin( descA->mt, descA->nt )-1)" ]
INFO      [type = "int*" ]

zgetrf_nopiv(k) [flops = inline_c%{ return FLOPS_ZGETRF(CLEAN_MB(descA, k), CLEAN_NB(descA, k)); %}]
  /* Execution Space */
  k = 0 .. KT

  /* Locality */
  : descA(k,k)

  RW    A    <- (k == 0) ? descA(k,k)
             <- (k >  0) ? C zgemm(k-1, k, k)
             -> descA(k,k)
             -> (k < (descA->mt-1)) ? A ztrsm_l(k, (k+1)..(descA->mt-1))
             -> (k < (descA->nt-1)) ? A ztrsm_u(k, (k+1)..(descA->nt-1))

BODY
{
    int tempkm = ((k)==(descA->mt-1)) ? (descA->m-(k*descA->mb)) : descA->mb;
    int tempkn = ((k)==(descA->nt-1)) ? (descA->n-(k*descA->nb)) : descA->nb;
    int ldak = BLKLDD( descA, k );
    printlog("CORE_zgetrf_nopiv(%d)\n"
             "\t(tempkm, tempkn, ib, A(%d,%d)[%p], ldak, sequence, request, descA->mb*k)\n",
             k, k, k, A);

#if !defined(PARSEC_DRY_RUN)
    {
        int iinfo = 0;
        iinfo = CORE_zgetrf_nopiv(tempkm, tempkn, ib,
                                  A /* descA(k,k) */, ldak );

        if ( iinfo != PLASMA_SUCCESS) {
            *INFO = descA->mb * k + iinfo; /* Should return if enter here */
            fprintf(stderr, "zgetrf(%d) failed => %d\n", k, *INFO );
        }
    }
#endif  /* !defined(PARSEC_DRY_RUN) */
}
END

ztrsm_l(k, m) [flops = inline_c%{ return FLOPS_ZTRSM(PlasmaRight, CLEAN_MB(descA, m), CLEAN_NB(descA, k)); %}]
  /* Execution Space */
  k = 0     .. KT
  m = (k+1) .. (descA->mt-1)

  /* Locality */
  : descA(m, k)

  READ  A    <- A zgetrf_nopiv(k)
  RW    B    <- (k == 0) ? descA(m, k)
             <- (k >  0) ? C zgemm(k-1, m, k)
             -> (k < (descA->nt-1)) ? A zgemm(k, m, (k+1)..(descA->nt-1))
             -> descA(m,k)

BODY
{
    int tempmm = ((m)==(descA->mt-1)) ? (descA->m-(m*descA->mb)) : descA->mb;
    int tempkn = ((k)==(descA->nt-1)) ? (descA->n-(k*descA->nb)) : descA->nb;
    int ldak = BLKLDD( descA, k );
    int ldam = BLKLDD( descA, m );

    printlog("CORE_ztrsm_l(%d, %d)\n"
             "\t(PlasmaRight, PlasmaUpper, PlasmaNoTrans, PlasmaNonUnit, tempmm, tempkn, 1.000000, A(%d,%d)[%p], ldak, A(%d,%d)[%p], ldam)\n",
             k, m, k, k, A, m, k, B);

#if !defined(PARSEC_DRY_RUN)
    CORE_ztrsm(PlasmaRight, PlasmaUpper,
               PlasmaNoTrans, PlasmaNonUnit,
               tempmm, tempkn,
               1., A /* descA(k,k) */, ldak,
                   B /* descA(m,k) */, ldam );
#endif  /* !defined(PARSEC_DRY_RUN) */

}
END

ztrsm_u(k, n) [flops = inline_c%{ return FLOPS_ZTRSM(PlasmaLeft, CLEAN_MB(descA, k), CLEAN_NB(descA, n)); %}]
  /* Execution Space */
  k = 0     .. KT
  n = (k+1) .. (descA->nt-1)

  /* Locality */
  : descA(k,n)

  READ  A    <- A zgetrf_nopiv(k)
  RW    B    <- (k == 0) ? descA(k, n)
             <- (k >  0) ? C zgemm(k-1, k, n)
             -> (k < (descA->mt-1)) ? B zgemm(k, (k+1)..(descA->mt-1), n)
             -> descA(k, n)

BODY
{
    int tempkm = ((k)==(descA->mt-1)) ? (descA->m-(k*descA->mb)) : descA->mb;
    int tempnn = ((n)==(descA->nt-1)) ? (descA->n-(n*descA->nb)) : descA->nb;
    int ldak = BLKLDD( descA, k );

    printlog("CORE_ztrsm_u(%d, %d)\n"
             "\t(PlasmaLeft, PlasmaLower, PlasmaNoTrans, PlasmaUnit, tempkm, tempnn, 1.000000, A(%d,%d)[%p], ldak, A(%d,%d)[%p], ldak)\n",
             k, n, k, k, A, k, n, B);

#if !defined(PARSEC_DRY_RUN)
    CORE_ztrsm(PlasmaLeft, PlasmaLower, PlasmaNoTrans,
               PlasmaUnit, tempkm, tempnn,
               1., A /* descA(k,k) */, ldak,
                   B /* descA(k,n) */, ldak );
#endif  /* !defined(PARSEC_DRY_RUN) */
}
END

zgemm(k, m, n) [flops = inline_c%{ return FLOPS_ZGEMM(CLEAN_MB(descA, m), CLEAN_NB(descA, n), descA->mb); %}]
  /* Execution Space */
  k = 0     .. KT-1
  m = (k+1) .. (descA->mt-1)
  n = (k+1) .. (descA->nt-1)

  /* Locality */
  : descA(m,n)

  READ  A    <- B ztrsm_l(k, m)
  READ  B    <- B ztrsm_u(k, n)
  RW    C    <- (k == 0) ? descA(m, n)
             <- (k >  0) ? C zgemm(k-1, m, n)
             -> ((m == (k+1)) && (n == (k+1))) ? A zgetrf_nopiv(k+1)
             -> ((m >  (k+1)) && (n == (k+1))) ? B ztrsm_l(k+1, m)
             -> ((m == (k+1)) && (n >  (k+1))) ? B ztrsm_u(k+1, n)
             -> ((m >  (k+1)) && (n >  (k+1))) ? C zgemm(k+1, m, n)

BODY [type=CUDA
      dyld=cublasZgemm dyldtype=cublas_zgemm_t
      weight="dplasma_imin( m-k, n-k )"]
{
#if defined(PRECISION_z) || defined(PRECISION_c)
    cuDoubleComplex zone  = make_cuDoubleComplex( 1., 0.);
    cuDoubleComplex mzone = make_cuDoubleComplex(-1., 0.);
#else
    double zone  =  1.;
    double mzone = -1.;
#endif

    int tempmm = ((m)==(descA->mt-1)) ? (descA->m-(m*descA->mb)) : descA->mb;
    int tempnn = ((n)==(descA->nt-1)) ? (descA->n-(n*descA->nb)) : descA->nb;
    int ldam = BLKLDD( descA, m );
    int ldak = BLKLDD( descA, k );
    cublasStatus_t status;

    printlogcuda("CUDA_zgemm(%d, %d, %d)\n"
                 "\t(PlasmaNoTrans, PlasmaNoTrans, tempmm, tempnn, descA->mb, -1, A(%d,%d)[%p], ldam, A(%d,%d)[%p], ldak, 1.000000, A(%d,%d)[%p], ldam)\n",
                 k, n, m, m, k, A, k, n, B, m, n, C);

    cublasSetKernelStream( parsec_body.stream );
    parsec_body.dyld_fn( 'N', 'N',
             tempmm, tempnn, descA->mb,
             mzone, (cuDoubleComplex*)A, ldam,
                    (cuDoubleComplex*)B, ldak,
             zone,  (cuDoubleComplex*)C, ldam );
    status = cublasGetError();
    PARSEC_CUDA_CHECK_ERROR( "cublasZgemm ", status,
                            {return -1;} );
}
END

BODY
{
    int tempmm = ((m)==(descA->mt-1)) ? (descA->m-(m*descA->mb)) : descA->mb;
    int tempnn = ((n)==(descA->nt-1)) ? (descA->n-(n*descA->nb)) : descA->nb;
    int ldam = BLKLDD( descA, m );
    int ldak = BLKLDD( descA, k );

    printlog("CORE_zgemm(%d, %d, %d)\n"
             "\t(PlasmaNoTrans, PlasmaNoTrans, tempmm, tempnn, descA->mb, -1, A(%d,%d)[%p], ldam, A(%d,%d)[%p], ldak, 1.000000, A(%d,%d)[%p], ldam)\n",
             k, n, m, m, k, A, k, n, B, m, n, C);

#if !defined(PARSEC_DRY_RUN)
    CORE_zgemm(PlasmaNoTrans, PlasmaNoTrans,
               tempmm, tempnn, descA->mb,
               -1., A /* descA(m,k) */, ldam,
                    B /* descA(k,n) */, ldak,
                1., C /* descA(m,n) */, ldam );
#endif  /* !defined(PARSEC_DRY_RUN) */
}
END

