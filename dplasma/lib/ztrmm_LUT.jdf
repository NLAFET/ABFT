extern "C" %{
/*
 * Copyright (c) 2010-2018 The University of Tennessee and The University
 *                         of Tennessee Research Foundation. All rights
 *                         reserved.
 * Copyright (c) 2013      Inria. All rights reserved.
 * $COPYRIGHT
 *
 *
 * @precisions normal z -> s d c
 *
 */
#include "dplasma/lib/dplasmajdf.h"
#include "parsec/data_dist/matrix/matrix.h"
#include "dplasma/lib/flops.h"
#include "dplasma/lib/floputils.h"

%}

side      [type = "PLASMA_enum"]
uplo      [type = "PLASMA_enum"]
trans     [type = "PLASMA_enum"]
diag      [type = "PLASMA_enum"]
alpha     [type = "parsec_complex64_t"]
descA     [type = "const parsec_tiled_matrix_dc_t*"]
descB     [type = "parsec_tiled_matrix_dc_t*"]


read_A(m, k) [profile = off]
  /* Execution Space */
  m = 0..(descB->mt-1)
  k = 0..(descB->mt-m-1)

  /* Locality */
  : descA(k,(descB->mt-1)-m)

  READ  A    <- descA(k,(descB->mt-1)-m)
             -> (k == (descB->mt-1-m)) ? A ztrmm(m, 0..(descB->nt-1))
             -> (k != (descB->mt-1-m)) ? A zgemm(m, 0..(descB->nt-1), k)

BODY
{
    /* nothing */
}
END

read_B(n, k) [profile = off]
  /* Execution Space */
  n = 0..(descB->nt-1)
  k = 0..(descB->mt-2)

  /* Locality */
  : descB(k,n)

  READ  B    <- descB(k,n)
             -> B zgemm(0..(descB->mt-k-2), n, k)

BODY
{
    /* nothing */
}
END

ztrmm(m, n) [ flops = inline_c %{ return FLOPS_ZTRMM(side, CLEAN_MB(descB, m), CLEAN_NB(descB, n)); %} ]
  /* Execution Space */
  m = 0..(descB->mt-1)
  n = 0..(descB->nt-1)

  /* Locality */
  : descB((descB->mt-1)-m,n)

  CTL   ctl0 <- ctl0 zgemm(0..(m-1), n, descB->mt-m-1)
  READ  A    <- A read_A(m, descB->mt-1-m)
  RW    B    <- descB((descB->mt-1)-m,n)
             -> (m <  (descB->mt-1)) ? C zgemm(m, n, 0)
             -> (m == (descB->mt-1)) ? descB((descB->mt-1)-m,n)

BODY
{
    int tempmm = (((descB->mt-1)-m)==(descB->mt-1)) ? (descB->m-(((descB->mt-1)-m)*descB->mb)) : descB->mb;
    int tempnn = ((n)==(descB->nt-1)) ? (descB->n-(n*descB->nb)) : descB->nb;
    int lda = BLKLDD( descA, (descB->mt-1)-m );
    int ldb = BLKLDD( descB, (descB->mt-1)-m );

    printlog("CORE_ztrmm(%d, %d)\n"
             "\t(side, uplo, trans, diag, tempmm, tempnn, alpha, A(%d,%d)[%p], lda, B(%d,%d)[%p], ldb)\n",
             m, n, (descB->mt-1)-m, (descB->mt-1)-m, A, (descB->mt-1)-m, n, B);
#if !defined(PARSEC_DRY_RUN)
        CORE_ztrmm(side, uplo, trans,
                   diag, tempmm, tempnn,
                   alpha, A /* descA((descB->mt-1)-m,(descB->mt-1)-m) */, lda,
                   B /* descB((descB->mt-1)-m,n) */, ldb );
#endif  /* !defined(PARSEC_DRY_RUN) */
}
END

zgemm(m, n, k) [ flops = inline_c %{ return FLOPS_ZGEMM(CLEAN_MB(descB, m), CLEAN_NB(descB, n), descB->mb); %} ]
  /* Execution Space */
  m = 0..(descB->mt-2)
  n = 0..(descB->nt-1)
  k = 0..(descB->mt-m-2)

  /* Locality */
  : descB((descB->mt-1)-m,n)

  CTL   ctl0 -> ctl0 ztrmm(descB->mt-k-1, n)
  READ  A    <- A read_A(m, k)
  READ  B    <- B read_B(n, k)
  RW    C    <- (k == 0) ? B ztrmm(m, n)
             <- (k >  0) ? C zgemm(m, n, k-1)
             -> ((k+m) == (descB->mt-2)) ? descB((descB->mt-1)-m,n)
             -> ((k+m) <  (descB->mt-2)) ? C zgemm(m, n, k+1)

BODY
{
    int tempmm = (((descB->mt-1)-m)==(descB->mt-1)) ? (descB->m-(((descB->mt-1)-m)*descB->mb)) : descB->mb;
    int tempnn = ((n)==(descB->nt-1)) ? (descB->n-(n*descB->nb)) : descB->nb;
    int ldb = BLKLDD( descB, (descB->mt-1)-m );

    printlog("CORE_zgemm(%d, %d, %d)\n"
             "\t(trans, PlasmaNoTrans, tempmm, tempnn, descB->mb, alpha, A(%d,%d)[%p], lda, B(%d,%d)[%p], descB->mb, 1.000000, B(%d,%d)[%p], ldb)\n",
             m, n, k, (descB->mt-1)-m, k, A, k, n, B, (descB->mt-1)-m, n, C);

#if !defined(PARSEC_DRY_RUN)
    CORE_zgemm(trans, PlasmaNoTrans, tempmm, tempnn, descB->mb,
               alpha, A /* descA(k,(descB->mt-1)-m) */, descA->mb,
                      B /* descB(k,n) */,              descB->mb,
               1.0,   C /* descB((descB->mt-1)-m,n) */, ldb );
#endif  /* !defined(PARSEC_DRY_RUN) */
}
END
