extern "C" %{
/*
 * Copyright (c) 2010-2013 The University of Tennessee and The University
 *                         of Tennessee Research Foundation. All rights
 *                         reserved.
 * Copyright (c) 2013      Inria. All rights reserved.
 * $COPYRIGHT
 *
 * @precisions normal z -> s d c
 *
 */
#include "dplasma/lib/dplasmajdf.h"
#include "parsec/data_dist/matrix/matrix.h"
#include "parsec/private_mempool.h"

extern int CORE_zgemdm(int transA, int transB,
                int M, int N, int K,
                PLASMA_Complex64_t alpha, PLASMA_Complex64_t *A, int LDA,
                PLASMA_Complex64_t *B, int LDB,
                PLASMA_Complex64_t beta, PLASMA_Complex64_t *C, int LDC,
                PLASMA_Complex64_t *D, int incD,
                PLASMA_Complex64_t *WORK, int LWORK);

extern int CORE_zhedrk(PLASMA_enum uplo, PLASMA_enum trans,
                int N, int K, int ib,
                double alpha, PLASMA_Complex64_t *A, int LDA,
                double beta,  PLASMA_Complex64_t *C, int LDC,
                PLASMA_Complex64_t *D,    int incD,
                PLASMA_Complex64_t *WORK, int LWORK);

extern void CORE_zhetrf2_nopiv(PLASMA_enum uplo, int N, int ib,
        PLASMA_Complex64_t *A, int LDA,
        PLASMA_Complex64_t *WORK, int LWORK, int *INFO);

extern void CORE_zhetrf_nopiv(int uplo, int N, int ib,
                         PLASMA_Complex64_t *A, int LDA,
                         PLASMA_Complex64_t *WORK, int LDWORK,
                         int *INFO);

extern int CORE_ztrmdm(int uplo, int N, PLASMA_Complex64_t *A, int LDA);


%}

uplo       [type = "int"]
desc_A     [type = "parsec_tiled_matrix_dc_t*"]
data_A     [type = "parsec_data_collection_t *"]
DPLASMA_IB [type = "int"]
pool_1     [type = "parsec_memory_pool_t *" size = "(sizeof(PLASMA_Complex64_t))*lwork"]
pool_0     [type = "parsec_memory_pool_t *" size = "(sizeof(PLASMA_Complex64_t))*ldwork"]
INFO       [type = "int*"]


zhetrf2_nopiv(k)
  /* Execution space */
  k = 0..(desc_A->mt-2)

  : data_A(k,k)

  /* A == data_A(k,k) */
  /* C == data_A(k,k) */
  /* F == data_A(m1,m1) */
  /* G == data_A(k,k) */
  /* H == data_A(k,k) */
  /* O == data_A(k1,k1) */

  RW    A <- (k>=1) & (desc_A->mt>=(k+2)) ? F zhedrk(k-1, k)
          <- (0==k) & (desc_A->mt>=2) ? data_A(k,k)
          -> (desc_A->mt>=(k+2)) ? O ztrmdm(k)
          -> (desc_A->mt>=(k+2)) ? G zhedrk(k, (k+1)..(desc_A->mt-1))
          -> (desc_A->mt>=(k+3)) ? H magic(k, (k+2)..(desc_A->mt-1))
          -> (desc_A->mt>=(k+2)) ? C ztrsm(k, (k+1)..(desc_A->mt-1))

BODY

  int tempkn = ((k)==((desc_A->nt)-1)) ? ((desc_A->n)-(k*(desc_A->nb))) : (desc_A->nb);
  int ib = DPLASMA_IB;
  int ldak = desc_A->mb;
  int ldwork = (tempkn+1)*ib;

  printlog("CORE_zhetrf2_nopiv(%d)\n"
           "\t(PlasmaLower, tempkn=%d, ib=%d, A(%d,%d)[%p], ldak=%d, p_elem_A, ldwork=%d, info)\n",
           k, tempkn, ib, k, k, A, ldak, ldwork);

#if !defined(PARSEC_DRY_RUN)
    int info = 0;
    void *p_elem_A = parsec_private_memory_pop( pool_0 );
    CORE_zhetrf2_nopiv(PlasmaLower, tempkn, ib,
        A /* data_A(k,k) */, ldak, p_elem_A,
        ldwork, &info );
    if( 0 != (info) ){
        fprintf(stderr,">>>>>>>>>>>>\nzhetrf2_nopiv(%d): info=%d\n",k,info);
    }
    assert( 0 == info );


    parsec_private_memory_push( pool_0, p_elem_A );
#endif /* !defined(PARSEC_DRY_RUN) */

END


zhetrf_nopiv(k)
  /* Execution space */
  k = (desc_A->mt-1)..(desc_A->mt-1)

  : data_A(k,k)

  /* B == data_A(k,k) */
  /* F == data_A(m1,m1) */

  RW    B <- (k>=1) && (k == desc_A->mt-1) ? F zhedrk(desc_A->mt-2, desc_A->mt-1)
          <- (k==0) & (1==desc_A->mt) ? data_A(k,k)
          -> (k == desc_A->mt-1) ? data_A(k,k)

BODY

  int tempkn = ((k)==((desc_A->nt)-1)) ? ((desc_A->n)-(k*(desc_A->nb))) : (desc_A->nb);
  int ib = DPLASMA_IB;
  int ldak = desc_A->mb;
  int ldwork = (tempkn+1)*ib;

  printlog("CORE_zhetrf_nopiv(%d)\n"
           "\t(PlasmaLower, tempkn=%d, ib=%d, A(%d,%d)[%p], ldak=%d, p_elem_A, ldwork=%d, info)\n",
           k, tempkn, ib, k, k, B, ldak, ldwork);

#if !defined(PARSEC_DRY_RUN)
    int info = 0;
    void *p_elem_A = parsec_private_memory_pop( pool_0 );

    CORE_zhetrf_nopiv(PlasmaLower, tempkn, ib,
        B /* data_A(k,k) */, ldak, p_elem_A,
        ldwork, &info );
    if( 0 != info ){
        fprintf(stderr,">>>>>>>>>>>>\nzhetrf_nopiv(%d): info=%d\n",k,info);
    }
    assert( 0 == info );


    parsec_private_memory_push( pool_0, p_elem_A );
#endif /* !defined(PARSEC_DRY_RUN) */

END


ztrsm(k,m)
  /* Execution space */
  k = 0..(desc_A->mt-2)
  m = (k+1)..(desc_A->mt-1)

  : data_A(m,k)

  /* A == data_A(k,k) */
  /* C == data_A(k,k) */
  /* D == data_A(m,k) */
  /* E == data_A(m1,k) */
  /* K == data_A(m1,k) */
  /* L == data_A(n,k) */
  /* M == data_A(m1,n) */

  READ  C <- A zhetrf2_nopiv(k)
  RW    D <- (k>=1) ? M zgemdm(k-1, m, k)
          <- (0==k) ? data_A(m,k)
          -> data_A(m,k)
/*          -> (desc_A->mt>=(2+m)) ? L zgemdm(k, %{ return dplasma_imax((m+1),(k+1)); %}..(desc_A->mt-1), m) */
          -> (desc_A->mt>=(2+m)) ? L zgemdm(k, (m+1)..(desc_A->mt-1), m)
          -> (m>=(2+k)) ? K zgemdm(k, m, (k+1)..(m-1))
          -> E zhedrk(k, m)

BODY

  int tempmm = ((m)==((desc_A->mt)-1)) ? ((desc_A->m)-(m*(desc_A->mb))) : (desc_A->mb);
  int tempkn = ((k)==((desc_A->nt)-1)) ? ((desc_A->n)-(k*(desc_A->nb))) : (desc_A->nb);
  PLASMA_Complex64_t zone = (PLASMA_Complex64_t)1.000000;
  int ldak = desc_A->mb;
  int ldam = desc_A->mb;

  printlog("CORE_ztrsm(%d, %d)\n"
           "\t(PlasmaRight, PlasmaLower, PlasmaConjTrans, PlasmaNonUnit, tempmm, tempkn, zone, A(%d,%d)[%p], ldak, A(%d,%d)[%p], ldam)\n",
           k, m, k, k, C, m, k, D);

#if !defined(PARSEC_DRY_RUN)

    CORE_ztrsm(PlasmaRight, PlasmaLower, PlasmaConjTrans,
        PlasmaNonUnit, tempmm, tempkn,
        zone, C /* data_A(k,k) */, ldak,
        D /* data_A(m,k) */, ldam );
#endif /* !defined(PARSEC_DRY_RUN) */

END


zhedrk(k,m1)
  /* Execution space */
  k = 0..(desc_A->mt-2)
  m1 = (k+1)..(desc_A->mt-1)

  : data_A(m1,m1)

  /* A == data_A(k,k) */
  /* B == data_A(k,k) */
  /* D == data_A(m,k) */
  /* E == data_A(m1,k) */
  /* F == data_A(m1,m1) */
  /* G == data_A(k,k) */

  READ  E <- D ztrsm(k, m1)
  RW    F <- (k>=1) ? F zhedrk(k-1, m1)
          <- (0==k) ? data_A(m1,m1)
          -> ((k+1)==m1) & (desc_A->mt>=(k+3)) ? A zhetrf2_nopiv(m1)
          -> ((k+1)==m1) & ((k+2)==desc_A->mt) ? B zhetrf_nopiv(m1)
          -> (m1>=(k+2)) ? F zhedrk(k+1, m1)
  READ  G <- A zhetrf2_nopiv(k)
  CTL ctl -> ctl2 GOK(k, m1, k+1)

BODY

  int tempmm = ((m1)==((desc_A->mt)-1)) ? ((desc_A->m)-(m1*(desc_A->mb))) : (desc_A->mb);
  int tempkn = ((k)==((desc_A->nt)-1)) ? ((desc_A->n)-(k*(desc_A->nb))) : (desc_A->nb);
  int ib = 64;
  int ldam = desc_A->mb;
  int lwork = ((tempmm+1)*tempkn)+(ib*ib);
  int ldak = desc_A->mb;

  printlog("CORE_zhedrk(%d, %d)\n"
           "\t(PlasmaLower, PlasmaNoTrans, tempmm, tempkn, ib, -1.000000, A(%d,%d)[%p], ldam, 1.000000, A(%d,%d)[%p], ldam, A(%d,%d)[%p], ldak+1, p_elem_A, lwork)\n",
           k, m1, m1, k, E, m1, m1, F, k, k, G);

#if !defined(PARSEC_DRY_RUN)
    void *p_elem_A = parsec_private_memory_pop( pool_1 );

    CORE_zhedrk(PlasmaLower, PlasmaNoTrans, tempmm,
        tempkn, ib, -1.000000,
        E /* data_A(m1,k) */, ldam, 1.000000,
        F /* data_A(m1,m1) */, ldam, G /* data_A(k,k) */,
        ldak+1, p_elem_A, lwork );

    parsec_private_memory_push( pool_1, p_elem_A );
#endif /* !defined(PARSEC_DRY_RUN) */

END


magic(k,m1)
  /* Execution space */
  k = 0..(desc_A->mt-2)
  m1 = (k+2)..(desc_A->mt-1)

  : data_A(k,k)

  /* H == data_A(k,k) */

  RW  H <- A zhetrf2_nopiv(k)
        -> (m1>=(2+k)) ? N zgemdm(k, m1, (k+1)..(m1-1))

BODY
/* This is a pseudo-task generated to enable the "triangular" broadcast */

  printlog("magic(%d,%d)\n", k, m1);

END


zgemdm(k,m1,n)
  /* Execution space */
  k = 0..(desc_A->mt-2)
  m1 = (k+2)..(desc_A->mt-1)
  n = (k+1)..(m1-1)

  : data_A(m1,n)

  /* D == data_A(m,k) */
  /* K == data_A(m1,k) */
  /* L == data_A(n,k) */
  /* M == data_A(m1,n) */

  READ  K <- D ztrsm(k, m1)
  READ  L <- D ztrsm(k, n)
  RW    M <- (k>=1) ? M zgemdm(k-1, m1, n)
          <- (0==k) ? data_A(m1,n)
          -> ((k+1)==n) ? D ztrsm(n, m1)
          -> (n>=(k+2)) ? M zgemdm(k+1, m1, n)
  READ  N <- H magic(k, m1)
  CTL   ctl -> ctl1 GOK(k,m1,n)

BODY

  int tempmm = ((m1)==((desc_A->mt)-1)) ? ((desc_A->m)-(m1*(desc_A->mb))) : (desc_A->mb);
  int tempnn = ((n)==((desc_A->nt)-1)) ? ((desc_A->n)-(n*(desc_A->nb))) : (desc_A->nb);
  int tempkn = ((k)==((desc_A->nt)-1)) ? ((desc_A->n)-(k*(desc_A->nb))) : (desc_A->nb);
  PLASMA_Complex64_t mzone = (PLASMA_Complex64_t)-1.000000;
  int ldam = desc_A->mb;
  PLASMA_Complex64_t zone = (PLASMA_Complex64_t)1.000000;
  int lwork = ((PlasmaNoTrans)==(PlasmaNoTrans)) ? ((tempmm+1)*tempkn) : ((tempnn+1)*tempkn);
  int ldak = desc_A->mb;

  printlog("CORE_zgemdm(%d, %d, %d)\n"
           "\t(PlasmaNoTrans, PlasmaConjTrans, tempmm, tempnn, tempkn, mzone, A(%d,%d)[%p], ldam, A(%d,%d)[%p], desc_A->mb, zone, A(%d,%d)[%p], ldam, A(%d,%d)[%p], ldak+1, p_elem_A, lwork)\n",
           k, m1, n, m1, k, K, n, k, L, m1, n, M, k, k, N);

#if !defined(PARSEC_DRY_RUN)
    void *p_elem_A = parsec_private_memory_pop( pool_1 );

    CORE_zgemdm(PlasmaNoTrans, PlasmaConjTrans, tempmm,
        tempnn, tempkn, mzone,
        K /* data_A(m1,k) */, ldam, L /* data_A(n,k) */,
        desc_A->mb, zone, M /* data_A(m1,n) */,
        ldam, N, ldak+1, p_elem_A, lwork );

    parsec_private_memory_push( pool_1, p_elem_A );
#endif /* !defined(PARSEC_DRY_RUN) */

END


ztrmdm(k1)
  /* Execution space */
  k1 = 0..(desc_A->mt-2)

  : data_A(k1,k1)

  /* A == data_A(k,k) */
  /* O == data_A(k1,k1) */

  RW    O <- A zhetrf2_nopiv(k1)
          -> data_A(k1,k1)
  CTL   ctl <- ctl GOK(k1, desc_A->mt-1, desc_A->mt-2)

BODY

  int tempkn = ((k1)==((desc_A->nt)-1)) ? ((desc_A->n)-(k1*(desc_A->nb))) : (desc_A->nb);
  int ldak = desc_A->mb;

  printlog("CORE_ztrmdm(%d)\n"
           "\t(PlasmaLower, tempkn, A(%d,%d)[%p], ldak)\n",
           k1, k1, k1, O);

#if !defined(PARSEC_DRY_RUN)

    CORE_ztrmdm(PlasmaLower, tempkn, O /* data_A(k1,k1) */, ldak );
#endif /* !defined(PARSEC_DRY_RUN) */

END


/**************************************************
 *                      GOK                       *
 **************************************************/
GOK(k,m,n)  [profile = off]
  /* Execution space */
  k = 0..(desc_A->mt-2)
  m = (k+1)..(desc_A->mt-1)
  n = (k+1)..m /* this is "m" and not "m-1" on purpose */

  : data_A(m,m)

  CTL  ctl <- (n>k+1) ? ctl GOK(k, m, n-1)
           <- (n==k+1) && (m>k+1) ? ctl GOK(k, m-1, desc_A->mt-1)
           -> (n<m) ? ctl GOK(k, m, n+1)
           -> (n==m) && (m<desc_A->mt-1) ? ctl GOK(k, m+1, k+1)
           -> (n==m) && (m==desc_A->mt-1) ? ctl ztrmdm(k)

  CTL ctl1 <- (n<m) ? ctl zgemdm(k,m,n)
  CTL ctl2 <- (n==k+1) ? ctl zhedrk(k,m)

BODY
     /* Synchronization thread */
     printlog("gok( %d, %d, %d )\n", k, m, n);
END
