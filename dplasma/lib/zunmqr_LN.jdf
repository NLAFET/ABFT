extern "C" %{
/*
 * Copyright (c) 2010-2013 The University of Tennessee and The University
 *                         of Tennessee Research Foundation. All rights
 *                         reserved.
 * Copyright (c) 2013      Inria. All rights reserved.
 * $COPYRIGHT
 *
 *
 * @precisions normal z -> s d c
 *
 */
#include "dplasma/lib/dplasmajdf.h"
#include "parsec/data_dist/matrix/matrix.h"

%}

side      [type = "PLASMA_enum"]
trans     [type = "PLASMA_enum"]
descA     [type = "parsec_tiled_matrix_dc_t*"]
descB     [type = "parsec_tiled_matrix_dc_t*"]
descT     [type = "parsec_tiled_matrix_dc_t*"]
ib        [type = "int" hidden = on default = "descT->mb" ]
KT        [type = "int" hidden = on default = "dplasma_imin(descA->mt-2, descA->nt-1)" ]
pool_0    [type = "parsec_memory_pool_t *" size = "((sizeof(parsec_complex64_t))*ib)*descT->nb"]


zunmqr(k, n)
  /* Execution Space */
  k = 0 .. descA->nt-1
  n = 0 .. descB->nt-1

  /* Locality */
  : descB( k, n )

  READ  A    <- A zunmqr_in_data_A0(k)   [type = LOWER_TILE]
  READ  T    <- T zunmqr_in_data_T1(k)   [type = LITTLE_T]
  RW    C    -> ( k == 0 ) ? descB(k, n)
             -> ( k >  0 ) ? A2 ztsmqr(k-1, k, n)
             <- ( k <  (descB->mt-1)) ? A1 ztsmqr(k, k+1, n)
             <- ( k == (descB->mt-1)) ? descB(k, n)

BODY
{
    int tempkm = (k == (descB->mt-1)) ? (descB->m - k * descB->mb) : descB->mb;
    int tempnn = (n == (descB->nt-1)) ? (descB->n - n * descB->nb) : descB->nb;
    int tempkn = (k == (descA->nt-1)) ? (descA->n - k * descA->nb) : descA->nb;
    int ldak = BLKLDD( descA, k );
    int ldbk = BLKLDD( descB, k );

    void *p_elem_A = parsec_private_memory_pop( pool_0 );

    printlog("CORE_zunmqr(%d, %d)\n"
             "\t(side=%s, trans=%s, M=%d, N=%d, K=%d, ib=%d,\n"
             "\t A(%d,%d)[%p], lda=%d, T(%d,%d)[%p], ldt=%d, B(%d,%d)[%p], ldb=%d, W=%p, LDW=%d)\n",
             k, n, plasma_const( side ), plasma_const( trans ), tempkm, tempnn, tempkn, ib,
             k, k, A, ldak, k, k, T, descT->mb, k, n, C, ldbk, p_elem_A, descT->nb );

#if !defined(PARSEC_DRY_RUN)
    CORE_zunmqr(side, trans,
                tempkm, tempnn, tempkn, ib,
                A /* descA(k,k) */, ldak,
                T /* descT(k,k) */, descT->mb,
                C /* descB(k,n) */, ldbk,
                p_elem_A, descT->nb );

    parsec_private_memory_push( pool_0, p_elem_A );
#endif  /* !defined(PARSEC_DRY_RUN) */
}
END

zunmqr_in_data_T1(k) [profile = off]
  /* Execution Space */
  k = 0 .. descA->nt-1

  /* Locality */
  : descT(k, k)

  READ  T    <- descT(k,k)                      [type = LITTLE_T]
             -> T zunmqr(k, 0 .. descB->nt-1)    [type = LITTLE_T]

BODY
{
    /* nothing */
}
END

zunmqr_in_data_A0(k) [profile = off]
  /* Execution Space */
  k = 0 .. descA->nt-1

  /* Locality */
  : descA(k, k)

  READ  A    <- descA(k,k)                     [type = LOWER_TILE]
             -> A zunmqr(k, 0 .. descB->nt-1 )  [type = LOWER_TILE]

BODY
{
    /* nothing */
}
END

ztsmqr(k, m, n)
  /* Execution Space */
  k = 0     .. KT
  m = (k+1) .. (descB->mt-1)
  n = 0     .. (descB->nt-1)

  /* Locality */
  : descB(m,n)

  RW    A1   -> ( m == (k+1) ) ? C  zunmqr(k, n)
             -> ( m >  (k+1) ) ? A1 ztsmqr(k, m-1, n)
             <- ( m <  (descB->mt-1) ) ? A1 ztsmqr(k, m+1, n)
             <- ( m == (descB->mt-1) ) ? A1 ztsmqr_out_data_B0(k, n)

  RW    A2   -> ( k == 0 ) ? descB(m,n)
             -> ( k >  0 ) ? A2 ztsmqr(k-1, m, n)
             <-  (k == (descA->nt-1)) ? descB(m,n)
             <- ((k <  (descA->nt-1)) & (m == (k+1))) ? C  zunmqr(k+1, n)
             <- ((k <  (descA->nt-1)) & (m >  (k+1))) ? A2 ztsmqr(k+1, m, n)

  READ  V    <- V ztsmqr_in_data_A1(k, m)
  READ  T    <- T ztsmqr_in_data_T2(k, m)  [type = LITTLE_T]

BODY
{
    int tempnn   = (n == (descB->nt-1)) ? (descB->n - n * descB->nb) : descB->nb;
    int tempmm   = (m == (descB->mt-1)) ? (descB->m - m * descB->mb) : descB->mb;
    int tempkmin = (k == (descA->nt-1)) ? (descA->n - k * descA->nb) : descA->nb;
    int ldbk = BLKLDD( descB, k );
    int ldbm = BLKLDD( descB, m );
    int ldam = BLKLDD( descA, m );
    int ldwork = ib;

    void *p_elem_A = parsec_private_memory_pop( pool_0 );

    printlog( "CORE_ztsmqr(%d, %d, %d)\n"
              "\t(side=%s, trans=%s, M1=%d, N1=%d, M2=%d, N2=%d, K=%d, ib=%d,\n"
              "\t A1(%d,%d)[%p], lda1=%d, A2(%d,%d)[%p], lda2=%d, V(%d,%d)[%p], ldv=%d, T(%d,%d)[%p], ldt=%d, W=%p, LDW=%d)\n",
              k, m, n, plasma_const( side ), plasma_const( trans ),
              descB->mb, tempnn, tempmm, tempnn, tempkmin, ib,
              k, n, A1, ldbk, m, n, A2, ldbm, m, k, V, ldam, m, k, T, descT->mb, p_elem_A, descT->nb );

#if !defined(PARSEC_DRY_RUN)
    CORE_ztsmqr(side, trans,
                descB->mb, tempnn, tempmm, tempnn, tempkmin, ib,
                A1 /* descB(k,n) */, ldbk,
                A2 /* descB(m,n) */, ldbm,
                V  /* descA(m,k) */, ldam,
                T  /* descT(m,k) */, descT->mb,
                p_elem_A, ldwork );

    parsec_private_memory_push( pool_0, p_elem_A );
#endif  /* !defined(PARSEC_DRY_RUN) */
}
END

ztsmqr_in_data_T2(k, m) [profile = off]
  /* Execution Space */
  k = 0     .. KT
  m = (k+1) .. (descB->mt-1)

  /* Locality */
  : descT(m,k)

  READ  T    <- descT(m,k)                          [type = LITTLE_T]
             -> T ztsmqr(k, m, 0 .. (descB->nt-1))   [type = LITTLE_T]

BODY
{
    /* nothing */
}
END

ztsmqr_in_data_A1(k, m) [profile = off]
  /* Execution Space */
  k = 0     .. KT
  m = (k+1) .. (descB->mt-1)

  /* Locality */
  : descA(m,k)

  READ  V    <- descA(m,k)
             -> V ztsmqr(k, m, 0 .. (descB->nt-1))

BODY
{
    /* nothing */
}
END

ztsmqr_out_data_B0(k, n) [profile = off]
  /* Execution Space */
  k = 0 .. KT
  n = 0 .. (descB->nt-1)

  /* Locality */
  : descB(k,n)

  READ  A1   -> A1 ztsmqr(k, descB->mt-1, n)
             <- descB(k,n)

BODY
{
    /* nothing */
}
END
