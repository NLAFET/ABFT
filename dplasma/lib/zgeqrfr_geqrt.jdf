extern "C" %{
/*
 * Copyright (c) 2010-2013 The University of Tennessee and The University
 *                         of Tennessee Research Foundation. All rights
 *                         reserved.
 * Copyright (c) 2013      Inria. All rights reserved.
 * $COPYRIGHT
 *
 *
 * @precisions normal z -> s d c
 *
 */
#include "dplasma/lib/dplasmajdf.h"
#include "dplasmatypes.h"
#include "parsec/data_dist/matrix/matrix.h"

%}

descA  [type = "parsec_tiled_matrix_dc_t*"]
descT  [type = "parsec_tiled_matrix_dc_t*" aligned=descA]
p_work [type = "parsec_memory_pool_t *" size = "(sizeof(parsec_complex64_t)*descT->mb*descT->nb)"]

minMNT [type = "int" hidden=on default = "dplasma_imin(descA->nt, ((descA->m+descA->nb-1)/descA->nb))-1"]
ib     [type = "int" hidden=on default = "descT->mb" ]

zgeqrt_zgeqrt(k)
  /* Execution space */
  k = 0 .. minMNT

  : descA(0, k)

  RW    A <- (0 == k) ? descA(0, k) : C zgeqrt_zunmqr(k-1, k)
          -> (k < (descA->nt-1)) ? V zgeqrt_zunmqr(k, k+1 ..  descA->nt-1)
          -> descA(0, k)

  RW    T <- descT(0, k)                                                 [type = LITTLE_T]
          -> descT(0, k)                                                 [type = LITTLE_T]
          -> (k < (descA->nt-1)) ? T zgeqrt_zunmqr(k, k+1 ..  descA->nt-1) [type = LITTLE_T]

BODY
{
    parsec_complex64_t *lA = (parsec_complex64_t*)A;
    int tempm  = descA->m - k * descA->nb;
    int tempkn = (k == (descA->nt-1)) ? (descA->n - k * descA->nb) : descA->nb;
    int lda    = BLKLDD( descA, 0 );

    printlog("CORE_zgeqrt(%d)\n"
             "\t(tempkm, tempkn, ib, A(%d,%d)[%p], ldak, T(%d,%d)[%p], descT->mb, p_elem_A, p_elem_B)\n",
             k, k, k, A, k, k, T);

#if !defined(PARSEC_DRY_RUN)

    void *p_elem_tau  = parsec_private_memory_pop( p_work );
    void *p_elem_work = parsec_private_memory_pop( p_work );

    CORE_zgeqrt(tempm, tempkn, ib,
                lA+k*descA->nb /* descA(k,k) */, lda,
                T             /* descT(k,k) */, descT->mb,
                p_elem_tau, p_elem_work );

    parsec_private_memory_push( p_work, p_elem_tau  );
    parsec_private_memory_push( p_work, p_elem_work );

#endif  /* !defined(PARSEC_DRY_RUN) */
}
END

zgeqrt_zunmqr(k, n)
  /* Execution space */
  k = 0   .. %{ return dplasma_imin((descA->nt-2), minMNT); %}
  n = k+1 .. descA->nt-1

  : descA(0,n)

  READ  V <- A zgeqrt_zgeqrt(k)
  READ  T <- T zgeqrt_zgeqrt(k)             [type = LITTLE_T]
  RW    C <- (k == 0) ? descA(0, n) : C zgeqrt_zunmqr(k-1, n)
          -> (k == minMNT) ? descA(0, n)
          -> (k <  minMNT) && ( n == k+1 ) ? A zgeqrt_zgeqrt(k+1)
          -> (k <  minMNT) && ( n >  k+1 ) ? C zgeqrt_zunmqr(k+1, n)

BODY
{
    parsec_complex64_t *lV = (parsec_complex64_t*)V;
    parsec_complex64_t *lC = (parsec_complex64_t*)C;
    int tempm = descA->m - k * descA->nb;
    int tempnn = (n == (descA->nt-1)) ? (descA->n - n * descA->nb) : descA->nb;
    int lda = BLKLDD( descA, 0 );

    printlog("CORE_zunmqr(%d, %d)\n", k, n);

#if !defined(PARSEC_DRY_RUN)
    void *p_elem_W = parsec_private_memory_pop( p_work );

    CORE_zunmqr( PlasmaLeft, PlasmaConjTrans,
                 tempm, tempnn, descA->nb, ib,
                 lV + k * descA->nb, lda,
                 T,                 descT->mb,
                 lC + k * descA->nb, lda,
                 p_elem_W, descA->nb);

    parsec_private_memory_push( p_work, p_elem_W );
#endif  /* !defined(PARSEC_DRY_RUN) */
}
END


extern "C" %{

/**
 *******************************************************************************
 *
 * @ingroup dplasma_complex64_t
 *
 * dplasma_zgeqrfr_geqrt_New - Generates the taskpool that computes the QR factorization
 * a complex M-by-N matrix A: A = Q * R.
 *
 * The method used in this algorithm is a tile QR algorithm with a flat
 * reduction tree.  It is recommended to use the super tiling parameter (SMB) to
 * improve the performance of the factorization.
 * A high SMB parameter reduces the communication volume, but also deteriorates
 * the load balancing if too important. A small one increases the communication
 * volume, but improves load balancing.
 * A good SMB value should provide enough work to all available cores on one
 * node. It is then recommended to set it to 4 when creating the matrix
 * descriptor.
 * For tiling, MB=200, and IB=32 usually give good results.
 *
 * This variant is good for square large problems.
 * For other problems, see:
 *   - dplasma_zgeqrfr_geqrt_param_New() parameterized with trees for tall and skinny
 *     matrices
 *   - dplasma_zgeqrfr_geqrt_param_New() parameterized with systolic tree if
 *     computation load per node is very low.
 *
 * WARNING: The computations are not done by this call.
 *
 *******************************************************************************
 *
 * @param[in,out] A
 *          Descriptor of the distributed matrix A to be factorized.
 *          On entry, describes the M-by-N matrix A.
 *          On exit, the elements on and above the diagonal of the array contain
 *          the min(M,N)-by-N upper trapezoidal matrix R (R is upper triangular
 *          if (M >= N); the elements below the diagonal represent the unitary
 *          matrix Q as a product of elementary reflectors stored by tiles.
 *          It cannot be used directly as in Lapack.
 *
 * @param[out] T
 *          Descriptor of the matrix T distributed exactly as the A matrix. T.mb
 *          defines the IB parameter of tile QR algorithm. This matrix must be
 *          of size A.mt * T.mb - by - A.nt * T.nb, with T.nb == A.nb.
 *          On exit, contains auxiliary information required to compute the Q
 *          matrix, and/or solve the problem.
 *
 *******************************************************************************
 *
 * @return
 *          \retval NULL if incorrect parameters are given.
 *          \retval The parsec taskpool describing the operation that can be
 *          enqueued in the runtime with parsec_context_add_taskpool(). It, then, needs to be
 *          destroy with dplasma_zgeqrfr_geqrt_Destruct();
 *
 *******************************************************************************
 *
 * @sa dplasma_zgeqrfr_geqrt
 * @sa dplasma_zgeqrfr_geqrt_Destruct
 * @sa dplasma_cgeqrfr_New
 * @sa dplasma_dgeqrfr_New
 * @sa dplasma_sgeqrfr_New
 *
 ******************************************************************************/
parsec_taskpool_t*
dplasma_zgeqrfr_geqrt_New( parsec_tiled_matrix_dc_t *A,
                           parsec_tiled_matrix_dc_t *T,
                           void *work )
{
    parsec_zgeqrfr_geqrt_taskpool_t *geqrt;

    geqrt = parsec_zgeqrfr_geqrt_new( A,
                                     T,
                                     (parsec_memory_pool_t*)work );

    /* Default type */
    dplasma_add2arena_rectangle( geqrt->arenas[PARSEC_zgeqrfr_geqrt_DEFAULT_ARENA],
                                 A->mb*A->nb*sizeof(parsec_complex64_t),
                                 PARSEC_ARENA_ALIGNMENT_SSE,
                                 parsec_datatype_double_complex_t, A->mb, A->nb, -1 );

    /* Little T */
    dplasma_add2arena_rectangle( geqrt->arenas[PARSEC_zgeqrfr_geqrt_LITTLE_T_ARENA],
                                 T->mb*T->nb*sizeof(parsec_complex64_t),
                                 PARSEC_ARENA_ALIGNMENT_SSE,
                                 parsec_datatype_double_complex_t, T->mb, T->nb, -1);

    return (parsec_taskpool_t*)geqrt;
}

/**
 *******************************************************************************
 *
 * @ingroup dplasma_complex64_t
 *
 *  dplasma_zgeqrfr_geqrt_Destruct - Free the data structure associated to an taskpool
 *  created with dplasma_zgeqrfr_geqrt_New().
 *
 *******************************************************************************
 *
 * @param[in,out] taskpool
 *          On entry, the taskpool to destroy.
 *          On exit, the taskpool cannot be used anymore.
 *
 *******************************************************************************
 *
 * @sa dplasma_zgeqrfr_geqrt_New
 * @sa dplasma_zgeqrfr_geqrt
 *
 ******************************************************************************/
void
dplasma_zgeqrfr_geqrt_Destruct( parsec_taskpool_t *tp )
{
    parsec_zgeqrfr_geqrt_taskpool_t *parsec_zgeqrt = (parsec_zgeqrfr_geqrt_taskpool_t *)tp;

    parsec_matrix_del2arena( parsec_zgeqrt->arenas[PARSEC_zgeqrfr_geqrt_DEFAULT_ARENA ] );
    parsec_matrix_del2arena( parsec_zgeqrt->arenas[PARSEC_zgeqrfr_geqrt_LITTLE_T_ARENA] );

    tp->destructor(tp);
}

%}
