extern "C" %{
/*
 * Copyright (c) 2010-2018 The University of Tennessee and The University
 *                         of Tennessee Research Foundation. All rights
 *                         reserved.
 * Copyright (c) 2013      Inria. All rights reserved.
 * $COPYRIGHT
 *
 * @precisions normal z -> s d c
 *
 */
#include "dplasma/lib/dplasmajdf.h"
#include "parsec/data_dist/matrix/matrix.h"
#include "dplasma/lib/flops.h"
#include "dplasma/lib/floputils.h"
#include "parsec/vpmap.h"

#define nbthreads( __k ) (dplasma_imin( ((descA->mt - (__k)) + 3 )/  4, nbmaxthrd) - 1)

%}

/** Globals */
descA     [type = "parsec_tiled_matrix_dc_t*"]
dataIP    [type = "parsec_data_collection_t *"]
INFO      [type = "int*"]

nbmaxthrd [type = "int" hidden=on default="( dplasma_imax( 1, dplasma_imin( vpmap_get_nb_threads_in_vp(0) - 1, 48 ) ) )" ] /* 48 is the actual limit of the kernel */
KT        [type = "int" hidden=on default="( dplasma_imin( descA->mt, descA->nt )-1 )" ]

getrfdata [type = "CORE_zgetrf_data_t *" hidden = on default = "NULL"]

/************************************************************************************
 *                      Tiles 2 panel (Forward)                                     *
 *    step k on tile(m, n) is done when tile2panel(k-1, n) has received all ctl     *
 ************************************************************************************/
tile2panel(k, n) [profile = off]
  k = 0   .. KT-1
  n = k+1 .. descA->nt-1

  ntrd = %{ return nbthreads( k+1 ); %}

  :descA(k+1, n)

  CTL  ctl <- ctl gemm(k, k+1..descA->mt-1, n)
           -> (n == (k+1)) ? ctl getrf(k+1, 0..ntrd)
           -> (n >  (k+1)) ? ctl swptrsm(k+1, n)
           -> ctl swpback(k+1, k)

  ;descA->nt-n-1

BODY
{
    printlog("tile2panel( %d, %d )\n", k, n);
}
END

/************************************************************************************
 *                                    GETRF                                         *
 ************************************************************************************/
IPIV_in(k) [profile = off]
  k     = 0 .. KT
  nbtrd = %{ return nbthreads( k ); %}

  : dataIP(0, k)

READ IP <- dataIP(0, k)              [type = PIVOT]
        -> IPIV getrf(k, 0..nbtrd)   [type = PIVOT]

BODY
{
    /* Nothing */
}
END

IPIV_out(k) [profile = off]
  k = 0 .. KT

  : dataIP(0, k)

  READ IP <- IPIV getrf(k, 0)        [type = PIVOT]
          -> dataIP(0, k)            [type = PIVOT]

BODY
{
    /* Nothing */
}
END

/*
 * WARNING: This task is not pure and requires all data of the panel k to be stored in place locally
 */
getrf(k, t) [high_priority = on flops = inline_c%{ return t == 0 ? FLOPS_ZGETRF(descA->m - k*descA->mb, CLEAN_NB(descA, k)) : 0; %}]
  /* Execution space */
  k  = 0 .. KT
  t  = 0 .. %{ return nbthreads( k ); %}
  m1 = %{ return k + t * 4; %}
  m2 = %{ return dplasma_imin( k + (t+1) * 4 - 1, descA->mt-1); %}

  /* Locality */
  :descA(k, k)

  RW    A    <- (k == 0) ? descA(k, k) : C gemm(k-1, k, k)
             -> (t == 0) && (k < (descA->nt-1)) ? A swptrsm(k, k+1..descA->nt-1)
             -> (t == 0) ? descA(k, k)

  RW    IPIV <- IP IPIV_in(k)                                                       [type = PIVOT]
             -> ( t==0 ) ? IP IPIV_out(k)                                           [type = PIVOT]
             -> ((t==0) && (k < (descA->nt-1))) ? IPIV swptrsm(k, k+1 .. descA->nt-1) [type = PIVOT]
             -> ((t==0) && (k > 0))            ? IPIV swpback(k, 0 .. k-1)          [type = PIVOT]

  CTL   ctl  <- (k > 0) ? ctl tile2panel(k-1, k)
             -> (t == 0) && (k < descA->mt-1) ? ctl GEMM_A_in(k, k+1..descA->mt-1)

  /* Priority */
  ; descA->nt-k-1

BODY
{
    int tempk  = k * descA->mb;
    int tempm  = descA->m - tempk;
    int tempkn = k == descA->nt-1 ? descA->n-k*descA->nb : descA->nb;
    int ldak = BLKLDD(descA, k);

    printlog("CORE_zgetrf_rec(%d)\n"
             "\t(%d, %d, dataA(%d,%d)[%p], %d, dataIP(%d)[%p])",
             k, tempm, tempkn, k, k, A, ldak, k, IPIV);

#if !defined(PARSEC_DRY_RUN)
    int tempkm = k == descA->mt-1 ? tempm : descA->mb;
    int nbthrd = nbthreads( k );
    int info[3];

    /* Set local IPIV to 0 before generation
     * Better here than a global initialization for locality
     * and it's also done in parallel */
    if ( t == 0 ) {
        memset(IPIV, 0, dplasma_imin(tempkn, tempkm) * sizeof(int) );
    }

    info[1] = t;
    info[2] = nbthrd+1;

    if ( descA->storage == matrix_Tile ) {
        PLASMA_desc pdescA = plasma_desc_init( PlasmaComplexDouble,
                                               descA->mb, descA->nb, descA->mb * descA->nb,
                                               (descA->mt-k)*descA->mb, descA->nb, 0, 0,
                                               tempm, tempkn);
        pdescA.mat = A;
        CORE_zgetrf_rectil(
#if !defined(CORE_GETRF_270)
            getrfdata,
#endif
            pdescA, IPIV, info );

    } else {
        CORE_zgetrf_reclap(
#if !defined(CORE_GETRF_270)
            getrfdata,
#endif
            tempm, tempkn,
            A/*(k, k)*/, ldak, IPIV, info );
    }

    if ( (t == 0) && (info[0] != PLASMA_SUCCESS) ) {
        *INFO = tempk + info[0]; /* Should return if enter here */
        fprintf(stderr, "zgetrf(%d) failed => %d\n", k, *INFO );
    }
#endif /* !defined(PARSEC_DRY_RUN) */
}
END


/************************************************************************************
 *                              SWAP + TRSM                                         *
 ************************************************************************************/

swptrsm(k, n)   [flops = inline_c%{ return FLOPS_ZTRSM(PlasmaLeft, CLEAN_MB(descA, k), CLEAN_NB(descA, n)); %}]
  /* Execution space */
  k = 0   .. KT
  n = k+1 .. descA->nt-1

  /* Locality */
  :descA(k, n)

  READ  A    <- A    getrf(k, 0)
  READ  IPIV <- IPIV getrf(k, 0)                                [type = PIVOT]

  RW    B    <- ( 0 == k ) ? descA(k,n) : C gemm(k-1, k, n)
          /* <- descA(k..descA->mt-1, n) : C gemm(k-1, k..descA->mt-1, n) */
             -> (k < descA->mt-1) ? B gemm(k, k+1..descA->mt-1, n)
             -> descA(k, n)

  CTL   ctl  <- ( k > 0 ) ? ctl tile2panel(k-1, n)

/* Priority */
;descA->nt-n-1

BODY
{
    int tempkm = ((k)==(descA->mt-1)) ? (descA->m-(k*descA->mb)) : (descA->mb);
    int tempnn = ((n)==(descA->nt-1)) ? (descA->n-(n*descA->nb)) : (descA->nb);
    int ldak = BLKLDD(descA, k);

    printlog("CORE_zswptrsm(%d, %d)\n"
             "\t(%d, %d, dataA(%d,%d)[%p], B(%d,%d)[%p])",
             k, n, tempkm, tempnn, k, k, A, k, n, B);

#if !defined(PARSEC_DRY_RUN)
    if ( descA->storage == matrix_Tile ) {
        int tempk = k * descA->mb;
        int tempm = descA->m - tempk;
        PLASMA_desc pdescA = plasma_desc_init( PlasmaComplexDouble,
                                               descA->mb, descA->nb, descA->mb * descA->nb,
                                               (descA->mt-k)*descA->mb, descA->nb, 0, 0,
                                               tempm, tempnn);
        pdescA.mat = (void*)B;

        CORE_zlaswp_ontile(pdescA, 1, tempkm, IPIV, 1);
    } else {
        CORE_zlaswp( tempnn, B, ldak, 1, tempkm, IPIV, 1);
    }

    CORE_ztrsm(
        PlasmaLeft, PlasmaLower, PlasmaNoTrans, PlasmaUnit,
        tempkm, tempnn,
        1., A /*(k, k)*/, ldak,
            B /*(k, n)*/, ldak);
#endif /* !defined(PARSEC_DRY_RUN) */
}
END

/************************************************************************************
 *                                    GEMM                                         *
 ************************************************************************************/
GEMM_A_in(k, m)
  /* Execution space */
  k = 0   .. KT
  m = k+1 .. descA->mt-1

  /* Locality */
  :descA(m, k)

  READ  A  <- ( k == 0 ) ? descA(m, k) : C gemm(k-1, m, k)
           -> A gemm(k, m, k+1..descA->nt-1)
  CTL  ctl <- ctl getrf(k, 0)

BODY
{
    /* Nothing */
}
END


gemm(k, m, n) [flops = inline_c%{ return FLOPS_ZGEMM(CLEAN_MB(descA, m), CLEAN_NB(descA, n),descA->mb); %}]
  /* Execution space */
  k = 0   .. KT
  m = k+1 .. descA->mt-1
  n = k+1 .. descA->nt-1

  ntrd = %{ return nbthreads( k+1 ); %}

  /* Locality */
  :descA(m, n)

  READ  A  <- A GEMM_A_in(k, m)
  READ  B  <- B swptrsm(k, n)
  RW    C  <- ( k   == 0 ) ? descA(m, n) : C gemm(k-1, m, n)
           -> ( k+1 == n ) && ( k+1 == m ) ? A getrf(k+1, 0..ntrd)
           -> ( k+1 == n ) && ( k+1 <  m ) ? A GEMM_A_in(k+1, m)
           -> ( k+1 <  n ) && ( k+1 == m ) ? B swptrsm(k+1, n)
           -> ( k+1 <  n ) && ( k+1 <  m ) ? C gemm(k+1, m, n)

  CTL  ctl -> (k < KT) ? ctl tile2panel(k, n)

  /* Priority */
  ;descA->nt-n-1

BODY
{
    int tempmm = (m == (descA->mt-1)) ? descA->m - m * descA->mb : descA->mb;
    int tempnn = (n == (descA->nt-1)) ? descA->n - n * descA->nb : descA->nb;
    int ldak = BLKLDD(descA, k);
    int ldam = BLKLDD(descA, m);

    printlog("CORE_zgemm(%d, %d, %d)\n"
             "\t(%d, %d, %d, dataA(%d,%d)[%p], %d, B(%d,%d)[%p], %d, C(%d,%d)[%p], %d)",
             k, m, n, tempmm, tempnn, descA->mb, k, k, A, ldam, k, k, B, ldak, k, n, C, ldam);

#if !defined(PARSEC_DRY_RUN)
    CORE_zgemm(PlasmaNoTrans, PlasmaNoTrans,
               tempmm, tempnn, descA->mb,
               -1., A /*(m, k)*/, ldam,
                    B /*(k, n)*/, ldak,
               1.,  C /*(m, n)*/, ldam );
#endif /* !defined(PARSEC_DRY_RUN) */
}
END

/************************************************************************************
 *                              SWAP Backward                                       *
 ************************************************************************************/

swpback(k, n)
  /* Execution space */
  k = 1 .. KT
  n = 0 .. k-1

  /* Locality */
  :descA(k, n)

  RW    A    <- descA(k, n)
             -> descA(k, n)

  READ  IPIV <- IPIV getrf(k, 0)                                [type = PIVOT]

  CTL   ctl  <- (n == (k-1)) ? ctl tile2panel(n, k..descA->nt-1)

  CTL   ctl2 <- (n <  (k-1)) ? ctl2 swpback(k-1, n)
             -> (k <  KT   ) ? ctl2 swpback(k+1, n)

  /* Priority */
  ;0

BODY
{
    int tempkm = k == descA->mt-1 ? descA->m - k * descA->mb : descA->mb;
    int tempkn = k == descA->nt-1 ? descA->n - k * descA->nb : descA->nb;
    int tempmin = dplasma_imin(tempkn, tempkm);
    int ldak = BLKLDD(descA, k);

    printlog("CORE_zswpback(%d, %d)\n"
             "\t(%d, dataA(%d,%d)[%p], %d, dataIP(%d)[%p])",
             k, n, descA->nb, k, n, A, ldak, k, IPIV);

#if !defined(PARSEC_DRY_RUN)
    if ( descA->storage == matrix_Tile ) {
        int tempk  = k * descA->mb;
        int tempm  = descA->m - tempk;
        PLASMA_desc pdescA = plasma_desc_init( PlasmaComplexDouble,
                                               descA->mb, descA->nb, descA->mb * descA->nb,
                                               (descA->mt-k)*descA->mb, descA->nb, 0, 0,
                                               tempm, descA->nb);
        pdescA.mat = (void*)A;
        CORE_zlaswp_ontile(pdescA, 1, tempmin, IPIV, 1);
    } else {
        CORE_zlaswp( descA->nb, A/*(k, n)*/, ldak, 1, tempmin, IPIV, 1 );
    }
#endif /* !defined(PARSEC_DRY_RUN) */
}
END
