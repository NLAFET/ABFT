extern "C" %{
/*
 * Copyright (c) 2010-2013 The University of Tennessee and The University
 *                         of Tennessee Research Foundation. All rights
 *                         reserved.
 * Copyright (c) 2013      Inria. All rights reserved.
 * $COPYRIGHT
 *
 *
 * @precisions normal z -> s d c
 *
 */
#include "dplasma/lib/dplasmajdf.h"
#include "parsec/data_dist/matrix/matrix.h"

//#define PRIO_YVES1

#if defined(PRIO_YVES1)
#define GETPRIO_PANEL( __m, __n )      descA->mt * descA->nt - ((descA->nt - (__n) - 1) * descA->mt + (__m) + 1)
#define GETPRIO_UPDTE( __m, __n, __k ) descA->mt * descA->nt - ((descA->nt - (__n) - 1) * descA->mt + (__m) + 1)
#elif defined(PRIO_YVES2)
#define GETPRIO_PANEL( __m, __n )      descA->mt * descA->nt - ((__m) * descA->nt + descA->nt - (__n))
#define GETPRIO_UPDTE( __m, __n, __k ) descA->mt * descA->nt - ((__m) * descA->nt + descA->nt - (__n))
#elif defined(PRIO_MATHIEU1)
#define GETPRIO_PANEL( __m, __n )      (descA->mt + (__n) - (__m) - 1) * descA->nt + (__n)
#define GETPRIO_UPDTE( __m, __n, __k ) (descA->mt + (__n) - (__m) - 1) * descA->nt + (__n)
#elif defined(PRIO_MATHIEU2)
#define GETPRIO_PANEL( __m, __n )      ((dplasma_imax(descA->mt, descA->nt) - dplasma_imax( (__n) - (__m), (__m) - (__n) ) -1 ) * 12 + (__n))
#define GETPRIO_UPDTE( __m, __n, __k ) ((dplasma_imax(descA->mt, descA->nt) - dplasma_imax( (__n) - (__m), (__m) - (__n) ) -1 ) * 12 + (__n))
#elif defined(PRIO_MATYVES)
#define FORMULE( __x ) ( ( -1. + dplasma_dsqrt( 1. + 4.* (__x) * (__x)) ) * 0.5 )
#define GETPRIO_PANEL( __m, __k )      (int)( 22. * (__k) + 6. * ( FORMULE( descA->mt ) - FORMULE( (__m) - (__k) + 1. ) ) )
#define GETPRIO_UPDTE( __m, __n, __k ) (int)( (__m) < (__n) ? GETPRIO_PANEL( (__n), (__n) ) - 22. * ( (__m) - (__k) ) - 6. * ( (__n) - (__m) ) \
                                              :               GETPRIO_PANEL( (__m), (__n) ) - 22. * ( (__n) - (__k) ) )
#else
  /*#warning running without priority*/
#define GETPRIO_PANEL( __m, __n )      0
#define GETPRIO_UPDTE( __m, __n, __k ) 0
#endif

%}

descA  [type = "parsec_tiled_matrix_dc_t*"]
descTS [type = "parsec_tiled_matrix_dc_t*" aligned=descA]
descTT [type = "parsec_tiled_matrix_dc_t*" aligned=descA]
qrtree [type = "dplasma_qrtree_t"]
ib     [type = "int"]
p_work [type = "parsec_memory_pool_t *" size = "(sizeof(PLASMA_Complex64_t)*ib*(descTT->nb))"]
p_tau  [type = "parsec_memory_pool_t *" size = "(sizeof(PLASMA_Complex64_t)   *(descTT->nb))"]

minMN  [type = "int" hidden=on default="( (descA->mt < descA->nt) ? descA->mt : descA->nt )" ]

/**
 * zgeqrt()
 *
 * There are dplasma_qr_getnbgeqrf( pivfct, k, descA->mt ) geqrt applyed at step
 * k on the rows indexed by m.
 * nextm is the first row that will be killed by the row m at step k.
 * nextm = descA->mt if the row m is never used as a killer.
 *
 */
zgeqrt(k, i)
  /* Execution space */
  k = 0 .. minMN-1
  i = 0 .. %{ return qrtree.getnbgeqrf( &qrtree, k ) - 1; %}
  m      = %{ return qrtree.getm(       &qrtree, k, i); %}
  nextm  = %{ return qrtree.nextpiv(    &qrtree, k, m, descA->mt); %}

  SIMCOST 4

  /* Locality */
  : descA(m, k)

  RW    A <- ( k == 0 ) ? descA(m, k)
          <- ( k >  0 ) ? A2 zttmqr(k-1, m, k )

          -> A zgeqrt_typechange(k, i)

          -> ( k == descA->mt-1 ) ? descA(m, k)                                 [type = UPPER_TILE]
          -> ( (k < descA->mt-1) & (nextm != descA->mt) ) ?  A1 zttqrt(k, nextm) [type = UPPER_TILE]
          -> ( (k < descA->mt-1) & (nextm == descA->mt) ) ?  A2 zttqrt(k, m)     [type = UPPER_TILE]

  RW    T <- descTS(m, k)                                                      [type = LITTLE_T]
          -> descTS(m, k)                                                      [type = LITTLE_T]
          -> (k < descA->nt-1) ? T zunmqr(k, i, (k+1)..(descA->nt-1))            [type = LITTLE_T]

  ; %{ return GETPRIO_PANEL(m, k); %}

BODY
{
    int tempmm = (m==(descA->mt-1)) ? (descA->m - m * descA->mb) : descA->mb;
    int tempkn = (k==(descA->nt-1)) ? (descA->n - k * descA->nb) : descA->nb;
    int ldam   = BLKLDD( descA, m );

    printlog("CORE_zgeqrt(%d, %d)\n"
             "\t(tempmm, tempkn, ib, dataA(%d,%d)[%p], ldam, dataTS(%d,%d)[%p], TS.mb, p_elem_A, p_elem_B)\n",
             k, m, m, k, A, m, k, T);

#if !defined(PARSEC_DRY_RUN)
    void *p_elem_A = parsec_private_memory_pop( p_tau  );
    void *p_elem_B = parsec_private_memory_pop( p_work );

    CORE_zgeqrt(tempmm, tempkn, ib,
                A /* descA(m,k)  */, ldam,
                T /* descTS(m,k) */, descTT->mb,
                p_elem_A, p_elem_B );

    parsec_private_memory_push( p_tau, p_elem_A );
    parsec_private_memory_push( p_work, p_elem_B );
#endif /* !defined(PARSEC_DRY_RUN) */
}
END

/**
 * zgeqrt_typechange()
 *
 * Task to distinguish upper/lower part of the tile
 */
zgeqrt_typechange(k, i) [profile = off]
  /* Execution space */
  k = 0 .. minMN-1
  i = 0 .. %{ return qrtree.getnbgeqrf( &qrtree, k ) - 1; %}
  m =      %{ return qrtree.getm(       &qrtree, k, i); %}

  : descA(m, k)

  RW A <- A zgeqrt(k, i)
       -> ( k < (descA->nt-1) ) ? A zunmqr(k, i, (k+1)..(descA->nt-1)) [type = LOWER_TILE]
       -> descA(m, k)                                                [type = LOWER_TILE]
BODY
{
    /* Nothing */
}
END

/**
 * zunmqr()
 *
 * (see zgeqrt() for details on definition space)
 */
zunmqr(k, i, n)
  /* Execution space */
  k = 0   .. minMN-1
  i = 0   .. %{ return qrtree.getnbgeqrf( &qrtree, k ) - 1; %}
  n = k+1 .. descA->nt-1
  m     = %{ return qrtree.getm(    &qrtree, k, i); %}
  nextm = %{ return qrtree.nextpiv( &qrtree, k, m, descA->mt); %}

  SIMCOST 6

  /* Locality */
  : descA(m, n)

  READ  A <- A zgeqrt_typechange(k, i)                              [type = LOWER_TILE]
  READ  T <- T zgeqrt(k, i)                                         [type = LITTLE_T]

  RW    C <- ( 0 == k ) ? descA(m, n)
          <- ( k >  0 ) ? A2 zttmqr(k-1, m, n)
          -> ( k == (descA->mt-1)) ? descA(m, n)
          -> ((k <  (descA->mt-1)) & (nextm != descA->mt) ) ? A1 zttmqr(k, nextm, n)
          -> ((k <  (descA->mt-1)) & (nextm == descA->mt) ) ? A2 zttmqr(k, m,     n)

    ; %{ return GETPRIO_UPDTE(m, n, k); %}

BODY
{
    int tempmm = (m == (descA->mt-1)) ? (descA->m - m * descA->mb) : descA->mb;
    int tempnn = (n == (descA->nt-1)) ? (descA->n - n * descA->nb) : descA->nb;
    int ldam   = BLKLDD( descA, m );

    printlog("CORE_zunmqr(%d, %d, %d)\n"
             "\t(PlasmaLeft, PlasmaConjTrans, tempmm, tempnn, min(tempmm, tempnn), ib, \n"
             "\t dataA(%d,%d)[%p], ldam, dataTS(%d,%d)[%p], descTT->mb, dataA(%d,%d)[%p], ldam, p_elem_A, descTT->nb)\n",
             k, m, n, m, k, A, m, k, T, m, n, C);

#if !defined(PARSEC_DRY_RUN)
    void *p_elem_A = parsec_private_memory_pop( p_work );

    CORE_zunmqr(
        PlasmaLeft, PlasmaConjTrans,
        tempmm, tempnn, tempmm, ib,
        A /* descA( m, k) */, ldam,
        T /* descTS(m, k) */, descTT->mb,
        C /* descA( m, n) */, ldam,
        p_elem_A, descTT->nb );

    parsec_private_memory_push( p_work, p_elem_A );
#endif /* !defined(PARSEC_DRY_RUN) */
}
END


/**
 * zttqrt()
 *
 * The row p kills the row m.
 * nextp is the row that will be killed by p at next stage of the reduction.
 * prevp is the row that has been killed by p at the previous stage of the reduction.
 * prevm is the row that has been killed by m at the previous stage of the reduction.
 * type defines the operation to perform: TS if 0, TT otherwise
 * ip is the index of the killer p in the sorted set of killers for the step k.
 * im is the index of the killer m in the sorted set of killers for the step k.
 *
 */
zttqrt(k, m)
  /* Execution space */
  k = 0   .. minMN-1
  m = k+1 .. descA->mt-1
  p =     %{ return qrtree.currpiv( &qrtree, k, m);    %}
  nextp = %{ return qrtree.nextpiv( &qrtree, k, p, m); %}
  prevp = %{ return qrtree.prevpiv( &qrtree, k, p, m); %}
  prevm = %{ return qrtree.prevpiv( &qrtree, k, m, m); %}
  type  = %{ return qrtree.gettype( &qrtree, k, m );   %}
  ip    = %{ return qrtree.geti(    &qrtree, k, p );   %}
  im    = %{ return qrtree.geti(    &qrtree, k, m );   %}

  SIMCOST %{ return type == DPLASMA_QR_KILLED_BY_TS ? 6 : 2; %}

  : descA(m, k)

  RW   A1 <- (   prevp == descA->mt ) ? A  zgeqrt(k, ip ) : A1 zttqrt(k, prevp )     [type = UPPER_TILE]
          -> (   nextp != descA->mt ) ? A1 zttqrt(k, nextp )                         [type = UPPER_TILE]
          -> ( ( nextp == descA->mt ) & (p == k) ) ? A zttqrt_out_A1(k)              [type = UPPER_TILE]
          -> ( ( nextp == descA->mt ) & (p != k) ) ? A2 zttqrt(k, p)                 [type = UPPER_TILE]

  RW   A2 <- ( (type == 0) && (k     == 0        ) ) ? descA(m, k)                                      /* TS case */
          <- ( (type == 0) && (k     != 0        ) ) ? A2 zttmqr(k-1, m, k )                            /* TS case */
          <- ( (type != 0) && (prevm == descA->mt ) ) ? A  zgeqrt(k, im )            [type = UPPER_TILE] /* TT case */
          <- ( (type != 0) && (prevm != descA->mt ) ) ? A1 zttqrt(k, prevm )         [type = UPPER_TILE] /* TT case */

          -> (type == 0 ) ? descA(m, k)
          -> (type != 0 ) ? descA(m, k)                                             [type = UPPER_TILE]

          -> (type == 0) &&  (descA->nt-1 > k) ? V zttmqr(k, m, (k+1)..(descA->nt-1))
          -> (type != 0) &&  (descA->nt-1 > k) ? V zttmqr(k, m, (k+1)..(descA->nt-1)) [type = UPPER_TILE]

  RW   T  <- descTT(m, k)                                              [type = LITTLE_T]
          -> descTT(m, k)                                              [type = LITTLE_T]
          -> (descA->nt-1 > k)? T zttmqr(k, m, (k+1)..(descA->nt-1)) [type = LITTLE_T]

 ; %{ return type == DPLASMA_QR_KILLED_BY_TS ? GETPRIO_PANEL(p, k) : GETPRIO_PANEL(m, k); %}

BODY
{
    int tempmm = ((m)==((descA->mt)-1)) ? ((descA->m)-(m*(descA->mb))) : (descA->mb);
    int tempkn = ((k)==((descA->nt)-1)) ? ((descA->n)-(k*(descA->nb))) : (descA->nb);
    int ldap = BLKLDD( descA, p );
    int ldam = BLKLDD( descA, m );

    printlog("CORE_zttqrt(%d, %d)\n"
             "\t(tempmm, tempkn, ib, dataA(%d,%d)[%p], A.mb, dataA(%d,%d)[%p], ldam, dataTT(%d,%d)[%p], descTT->mb, p_elem_A, p_elem_B)\n",
             k, m, p, k, A1, m, k, A2, m, k, T);

#if !defined(PARSEC_DRY_RUN)
    void *p_elem_A = parsec_private_memory_pop( p_tau  );
    void *p_elem_B = parsec_private_memory_pop( p_work );

    if ( type == DPLASMA_QR_KILLED_BY_TS ) {
        CORE_ztsqrt(
            tempmm, tempkn, ib,
            A1 /* descA( p, k) */, ldap,
            A2 /* descA( m, k) */, ldam,
            T  /* descTT(m, k) */, descTT->mb,
            p_elem_A, p_elem_B );
    } else {
        CORE_zttqrt(
            tempmm, tempkn, ib,
            A1 /* descA( p, k) */, ldap,
            A2 /* descA( m, k) */, ldam,
            T  /* descTT(m, k) */, descTT->mb,
            p_elem_A, p_elem_B );
    }
    parsec_private_memory_push( p_tau , p_elem_A );
    parsec_private_memory_push( p_work, p_elem_B );
#endif /* !defined(PARSEC_DRY_RUN) */
}
END


zttqrt_out_A1(k) [profile = off]
  k = 0..( (descA->mt <= descA->nt) ? descA->mt-2 : descA->nt-1 )
  prevp = %{ return qrtree.prevpiv( &qrtree, k, k, k ); %}

  : descA(k, k)

  RW A <- A1 zttqrt( k, prevp ) [type = UPPER_TILE]
       -> descA(k, k)           [type = UPPER_TILE]
BODY
{
    /* nothing */
}
END

/**
 * zttmqr()
 *
 * See also zttqrt()
 * type1 defines the operations to perfom at next step k+1 on the row m
 *   if type1 == 0, it will be a TS so the tile goes to a TTQRT/TTMQR operation
 *   if type1 != 0, it will be a TT so the tile goes to a GEQRT/UNMQR operation
 * im1 is the index of the killer m at the next step k+1 if its type is !0, descA->mt otherwise
 *
 */
zttmqr(k, m, n)
  /* Execution space */
  k = 0   .. minMN-1
  m = k+1 .. descA->mt-1
  n = k+1 .. descA->nt-1
  p =     %{ return qrtree.currpiv( &qrtree, k,   m);    %}
  nextp = %{ return qrtree.nextpiv( &qrtree, k,   p, m); %}
  prevp = %{ return qrtree.prevpiv( &qrtree, k,   p, m); %}
  prevm = %{ return qrtree.prevpiv( &qrtree, k,   m, m); %}
  type  = %{ return qrtree.gettype( &qrtree, k,   m );   %}
  type1 = %{ return qrtree.gettype( &qrtree, k+1, m );   %}
  ip    = %{ return qrtree.geti(    &qrtree, k,   p );   %}
  im    = %{ return qrtree.geti(    &qrtree, k,   m );   %}
  im1   = %{ return qrtree.geti(    &qrtree, k+1, m );   %}

  SIMCOST %{ return type == DPLASMA_QR_KILLED_BY_TS ? 12 : 6; %}

  : descA(m, n)

  RW   A1 <- (   prevp == descA->mt ) ? C  zunmqr( k, ip, n ) : A1 zttmqr(k, prevp, n )
          -> (   nextp != descA->mt ) ? A1 zttmqr( k, nextp, n)
          -> ( ( nextp == descA->mt ) & ( p == k ) ) ? A zttmqr_out_A1(p, n)
          -> ( ( nextp == descA->mt ) & ( p != k ) ) ? A2 zttmqr( k, p, n )

  RW   A2 <- ( (type  == 0 ) && (k     == 0        ) ) ? descA(m, n)
          <- ( (type  == 0 ) && (k     != 0        ) ) ? A2 zttmqr(k-1, m, n )
          <- ( (type  != 0 ) && (prevm == descA->mt ) ) ? C  zunmqr(k, im, n)
          <- ( (type  != 0 ) && (prevm != descA->mt ) ) ? A1 zttmqr(k, prevm, n )

          -> ( (type1 != 0 ) && (n==(k+1)) ) ? A  zgeqrt( k+1, im1 )
          -> ( (type1 != 0 ) && (n>  k+1)  ) ? C  zunmqr( k+1, im1, n )
          -> ( (type1 == 0 ) && (n==(k+1)) ) ? A2 zttqrt( k+1, m )
          -> ( (type1 == 0 ) && (n> (k+1)) ) ? A2 zttmqr( k+1, m, n )

  READ  V <- (type == 0) ? A2 zttqrt(k, m)
          <- (type != 0) ? A2 zttqrt(k, m) [type = UPPER_TILE]

  READ  T <- T  zttqrt(k, m)               [type = LITTLE_T]

    ; %{ return type == DPLASMA_QR_KILLED_BY_TS ? GETPRIO_UPDTE(p, n, k) : GETPRIO_UPDTE(m, n, k); %}

BODY
{
    int tempnn = ((n)==((descA->nt)-1)) ? ((descA->n)-(n*(descA->nb))) : (descA->nb);
    int tempmm = ((m)==((descA->mt)-1)) ? ((descA->m)-(m*(descA->mb))) : (descA->mb);
    int ldap = BLKLDD( descA, p );
    int ldam = BLKLDD( descA, m );
    int ldwork = ib;

    printlog("CORE_zttmqr(%d, %d, %d)\n"
             "\t(PlasmaLeft, PlasmaConjTrans, descA->mb, tempnn, tempmm, tempnn, descA->nb, ib, \n"
             "\t dataA(%d,%d)[%p], A.mb, dataA(%d,%d)[%p], ldam, dataA(%d,%d)[%p], ldam, dataTT(%d,%d)[%p], descTT->mb, p_elem_A, ldwork)\n",
             k, m, n, p, n, A1, m, n, A2, m, k, V, m, k, T);

#if !defined(PARSEC_DRY_RUN)
    void *p_elem_A = parsec_private_memory_pop( p_work );

    if ( type == DPLASMA_QR_KILLED_BY_TS ) {
        CORE_ztsmqr(
            PlasmaLeft, PlasmaConjTrans,
            descA->mb, tempnn, tempmm, tempnn, descA->nb, ib,
            A1 /* descA( p, n) */, ldap,
            A2 /* descA( m, n) */, ldam,
            V  /* descA( m, k) */, ldam,
            T  /* descTT(m, k) */, descTT->mb,
            p_elem_A, ldwork );
    } else {
        CORE_zttmqr(
            PlasmaLeft, PlasmaConjTrans,
            descA->mb, tempnn, tempmm, tempnn, descA->nb, ib,
            A1 /* descA( p, n) */, ldap,
            A2 /* descA( m, n) */, ldam,
            V  /* descA( m, k) */, ldam,
            T  /* descTT(m, k) */, descTT->mb,
            p_elem_A, ldwork );
    }
    parsec_private_memory_push( p_work, p_elem_A );
#endif /* !defined(PARSEC_DRY_RUN) */
}
END

zttmqr_out_A1(k, n) [profile = off]
  k = 0   .. minMN-2
  n = k+1 .. descA->nt-1
  prevp = %{ return qrtree.prevpiv( &qrtree, k, k, k ); %}

  : descA(k, n)

  RW A <- A1 zttmqr( k, prevp, n )
       -> descA(k, n)
BODY
{
    /* nothing */
}
END
