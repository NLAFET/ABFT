extern "C" %{
/*
 * Copyright (c) 2010-2018 The University of Tennessee and The University
 *                         of Tennessee Research Foundation. All rights
 *                         reserved.
 * Copyright (c) 2013-2014 Inria. All rights reserved.
 * $COPYRIGHT
 *
 *
 * @precisions normal z -> s d c
 *
 */
#include "dplasmajdf.h"
#include "parsec/data_dist/matrix/matrix.h"
#include "dplasma/lib/flops.h"
#include "dplasma/lib/floputils.h"

%}

uplo      [type = "PLASMA_enum"]
descA     [type = "parsec_tiled_matrix_dc_t*"]

readA(m, n) [profile = off]
  /* Execution Space */
  m = 0 .. (descA->mt-1)
  n = 0 .. m

  /* Locality */
  : descA(m,n)

  READ  A    <- descA(m,n)
             -> (m == n)           ? A lauum_zlauum(m)                 [type = LOWER_TILE]
             -> (m == n) & (m > 0) ? A lauum_ztrmm(n, 0 .. (n-1))      [type = LOWER_TILE]
             -> (m >  n)           ? A lauum_zherk(m, n)
             -> (m >  n)           ? B lauum_ztrmm(m, n)
             -> (m >  n) & (n > 0) ? A lauum_zgemm(m, 0..(n-1), n)
             -> (m > (n+1))        ? B lauum_zgemm(m, n, (n+1)..(m-1))
BODY
{
    /* nothing */
}
END

lauum_zherk(k, n) [flops = inline_c %{ return FLOPS_ZHERK(descA->mb, CLEAN_MB(descA, k)); %}]
  /* Execution Space */
  k = 1 .. (descA->mt-1)
  n = 0 .. (k-1)

  /* Locality */
  : descA(n, n)

  CTL   ctl0 -> ctl0 lauum_ztrmm(k, n)

  READ  A    <- A readA(k, n)

  RW    C    <- (k == (n+1)) ? A lauum_zlauum(n)                       [type = LOWER_TILE]
             <- (k >  (n+1)) ? C lauum_zherk(k-1, n)                   [type = LOWER_TILE]
             -> (k <  (descA->mt-1)) ? C lauum_zherk(k+1, n)            [type = LOWER_TILE]
             -> (k == (descA->mt-1)) ? descA(n, n)                [type = LOWER_TILE]

BODY
{
    int tempkm = (k == (descA->mt-1)) ? (descA->m - k*descA->mb) : descA->mb;
    int ldak = BLKLDD( descA, k );
    int ldan = BLKLDD( descA, n );

    printlog("CORE_zherk(%d, %d)\n"
             "\t(uplo, PlasmaConjTrans, descA->mb, tempkm, 1.000000, A(%d,%d)[%p], ldak, 1.000000, A(%d,%d)[%p], ldan)\n",
             k, n, k, n, A, n, n, C);

#if !defined(PARSEC_DRY_RUN)
    CORE_zherk(uplo, PlasmaConjTrans, descA->mb, tempkm,
               1.0, A /* descA(k,n) */, ldak,
               1.0, C /* descA(n,n) */, ldan );
#endif  /* !defined(PARSEC_DRY_RUN) */

}
END

lauum_zgemm(k, n, m) [flops = inline_c%{ return FLOPS_ZGEMM(descA->mb, descA->nb, CLEAN_MB(descA, k)); %}]
  /* Execution Space */
  k = 2     .. (descA->mt-1)
  n = 0     .. (k-2)
  m = (n+1) .. (k-1)

  /* Locality */
  : descA(m, n)

  CTL   ctl1 -> ctl1 lauum_ztrmm(k, m)
  CTL   ctl2 -> ctl2 lauum_ztrmm(k, n)

  READ  A    <- A readA(k, m)
  READ  B    <- A readA(k, n)
  RW    C    <- (k == (m+1)) ? B lauum_ztrmm(m, n)
             <- (k >  (m+1)) ? C lauum_zgemm(k-1, n, m)
             -> (k == (descA->mt-1)) ? descA(m, n)
             -> (k <  (descA->mt-1)) ? C lauum_zgemm(k+1, n, m)

BODY
{
    int tempkm = (k == (descA->mt-1)) ? (descA->m - k*descA->mb) : descA->mb;
    int ldak = BLKLDD( descA, k );
    int ldam = BLKLDD( descA, m );

    printlog("CORE_zgemm(%d, %d, %d)\n"
             "\t(PlasmaConjTrans, PlasmaNoTrans, descA->mb, descA->nb, tempkm, 1.0, A(%d,%d)[%p], ldak, A(%d,%d)[%p], ldak, 1.0, A(%d,%d)[%p], ldam)\n",
             k, n, m, k, m, A, k, n, B, m, n, C);

#if !defined(PARSEC_DRY_RUN)
    CORE_zgemm(PlasmaConjTrans, PlasmaNoTrans,
               descA->mb, descA->nb, tempkm,
               1.0, A /* descA(k,m) */, ldak,
                    B /* descA(k,n) */, ldak,
               1.0, C /* descA(m,n) */, ldam );
#endif  /* !defined(PARSEC_DRY_RUN) */
}
END

lauum_ztrmm(k, n) [ flops = inline_c %{ return FLOPS_ZTRMM(PlasmaLeft, CLEAN_MB(descA, k), descA->nb); %}]
  /* Execution Space */
  k = 1 .. (descA->mt-1)
  n = 0 .. (k-1)

  /* Locality */
  : descA(k,n)

  CTL   ctl0 <- ctl0 lauum_zherk(k, n)
  CTL   ctl1 <- ctl1 lauum_zgemm(k, n, (n+1)..(k-1))
  CTL   ctl2 <- ctl2 lauum_zgemm(k, 0..(n-1), n)
  CTL   ctl3 -> ctl3 lauum_zlauum(k)

  READ  A    <- A readA(k, k)                              [type = LOWER_TILE]
  RW    B    <- A readA(k, n)
             -> (k <  (descA->mt-1)) ? C lauum_zgemm(k+1, n, k)
             -> (k == (descA->mt-1)) ? descA(k, n)

BODY
{
    int tempkm = (k == (descA->mt-1)) ? (descA->m - k*descA->mb) : descA->mb;
    int ldak = BLKLDD( descA, k );

    printlog("CORE_ztrmm(%d, %d)\n"
             "\t(PlasmaLeft, uplo, PlasmaConjTrans, PlasmaNonUnit, tempkm, descA->nb, 1.0, A(%d,%d)[%p], ldak, A(%d,%d)[%p], ldak)\n",
             k, n, k, k, A, k, n, B);

#if !defined(PARSEC_DRY_RUN)
    CORE_ztrmm(PlasmaLeft, uplo, PlasmaConjTrans, PlasmaNonUnit,
               tempkm, descA->nb,
               1.0, A /* descA(k,k) */, ldak,
                    B /* descA(k,n) */, ldak );
#endif  /* !defined(PARSEC_DRY_RUN) */
}
END

lauum_zlauum(k)
  /* Execution Space */
  k = 0..(descA->mt-1)

  /* Locality */
  : descA(k,k)

  CTL   ctl3 <- ctl3 lauum_ztrmm(k, 0..(k-1))

  RW    A    <- A readA(k,k)                           [type = LOWER_TILE]
             -> (k <  (descA->mt-1)) ? C lauum_zherk(k+1, k)  [type = LOWER_TILE]
             -> (k == (descA->mt-1)) ? descA(k, k)      [type = LOWER_TILE]

BODY
{
    int tempkm = (k == (descA->mt-1)) ? (descA->m - k*descA->mb) : descA->mb;
    int ldak = BLKLDD( descA, k );

    printlog("CORE_zlauum(%d)\n"
             "\t(uplo, tempkm, A(%d,%d)[%p], ldak)\n",
             k, k, k, A);

#if !defined(PARSEC_DRY_RUN)
    CORE_zlauum(uplo, tempkm,
                A /* descA(k,k) */, ldak );
#endif  /* !defined(PARSEC_DRY_RUN) */
}
END


