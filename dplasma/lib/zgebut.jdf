extern "C" %{
/*
 * Copyright (c) 2010-2014 The University of Tennessee and The University
 *                         of Tennessee Research Foundation. All rights
 *                         reserved.
 * Copyright (c) 2013      Inria. All rights reserved.
 * $COPYRIGHT
 *
 * @precisions normal z -> s d c
 *
 */
#include "dplasma/lib/dplasmajdf.h"
#include "parsec/data_dist/matrix/matrix.h"

#include "parsec/private_mempool.h"
#include "dplasma/lib/butterfly_map.h"

/*
#define DEBUG_BUTTERFLY
*/

#define TR_IS_BL_TRANS 0x1
#define BL_IS_BL       0x0

#define ON_DIAG 0x1
#define OFF_DIAG 0x0

/* Forward declarations */
void BFT_zQTL( int mb, int nb, int mb_tile, int i_seg, int j_seg, int lvl, int N,
          PLASMA_Complex64_t *tl, PLASMA_Complex64_t *bl,
          PLASMA_Complex64_t *tr, PLASMA_Complex64_t *br,
          PLASMA_Complex64_t *C, PLASMA_Complex64_t *Ubefore, PLASMA_Complex64_t *Uafter, int is_transpose, int is_diagonal );
void BFT_zQBL( int mb, int nb, int mb_tile, int i_seg, int j_seg, int lvl, int N,
          PLASMA_Complex64_t *tl, PLASMA_Complex64_t *bl,
          PLASMA_Complex64_t *tr, PLASMA_Complex64_t *br,
          PLASMA_Complex64_t *C, PLASMA_Complex64_t *Ubefore, PLASMA_Complex64_t *Uafter, int is_transpose, int is_diagonal);
void BFT_zQTR( int mb, int nb, int mb_tile, int i_seg, int j_seg, int lvl, int N,
          PLASMA_Complex64_t *tl, PLASMA_Complex64_t *bl,
          PLASMA_Complex64_t *tr, PLASMA_Complex64_t *br,
          PLASMA_Complex64_t *C, PLASMA_Complex64_t *Ubefore, PLASMA_Complex64_t *Uafter, int is_transpose);
void BFT_zQBR( int mb, int nb, int mb_tile, int i_seg, int j_seg, int lvl, int N,
          PLASMA_Complex64_t *tl, PLASMA_Complex64_t *bl,
          PLASMA_Complex64_t *tr, PLASMA_Complex64_t *br,
          PLASMA_Complex64_t *C, PLASMA_Complex64_t *Ubefore, PLASMA_Complex64_t *Uafter, int is_transpose, int is_diagonal );
%}

descA  [type = "parsec_seg_dc_t*"]
Ubef   [type = "PLASMA_Complex64_t *"]
Uaft   [type = "PLASMA_Complex64_t *"]
nt     [type = "int"]
mt     [type = "int"]
pool_0 [type = "parsec_memory_pool_t *" size = "(sizeof(PLASMA_Complex64_t)*descA->A_org.mb*descA->A_org.nb)"]

%option PARSEC_ARENA_STRUT = 36

/*
 *
 */
GEBUT(i,j)
  /* Execution space */
  i = 0 .. mt/2-1
  j = 0 .. nt/2-1

  : descA(i,j)

  /* Atl: A from Top Left */
  RW  Atl <- A GEBUT_Reader(i,j) [ type = %{ return segment_to_arena_index(descA, i, j); %}]
          -> A GEBUT_Writer(i,j) [ type = %{ return segment_to_arena_index(descA, i, j); %}]

  /* Abl: A from Bottom Left */
  RW  Abl <- A GEBUT_Reader(i+mt/2,j) [ type = %{ return segment_to_arena_index(descA, i, j); %}]
          -> A GEBUT_Writer(i+mt/2,j) [ type = %{ return segment_to_arena_index(descA, i, j); %}]

  /* Atr: A from Top Right */
  RW  Atr <- A GEBUT_Reader(i,j+nt/2) [ type = %{ return segment_to_arena_index(descA, i, j); %}]
          -> A GEBUT_Writer(i,j+nt/2) [ type = %{ return segment_to_arena_index(descA, i, j); %}]

  /* Abr: A from Bottom Right */
  RW  Abr <- A GEBUT_Reader(i+mt/2,j+nt/2) [ type = %{ return segment_to_arena_index(descA, i, j); %}]
          -> A GEBUT_Writer(i+mt/2,j+nt/2) [ type = %{ return segment_to_arena_index(descA, i, j); %}]

BODY

  unsigned mb_seg, nb_seg, mb_tile, nb_tile, N, jj;
  uintptr_t i_seg, j_seg, off_in_tile;
  int type, sz, type_exists, i_tile, j_tile;
  void *p_elem_tl, *p_elem_bl, *p_elem_tr, *p_elem_br;

  printlog("GEBUT(%d, %d)\n"
           "\t(PlasmaLower, tempkn, A(%d,%d)[%p], ldak)\n",
           i, j, i, j, Atl);

  type = segment_to_type_index(&descA->seg_info, i, j);
  type_exists = type_index_to_sizes(&descA->seg_info, type, &mb_seg, &nb_seg);
  assert( type_exists ); (void)type_exists;
  mb_tile = descA->A_org->mb;
  nb_tile = descA->A_org->nb;

  segment_to_tile(descA, i, j, &i_tile, &j_tile, &off_in_tile);
  i_seg = i_tile*mb_tile + off_in_tile%mb_tile;
  j_seg = j_tile*nb_tile + off_in_tile/mb_tile;

  N = descA->A_org->lm;

  p_elem_tl = parsec_private_memory_pop( pool_0 );
  p_elem_bl = parsec_private_memory_pop( pool_0 );
  p_elem_tr = parsec_private_memory_pop( pool_0 );
  p_elem_br = parsec_private_memory_pop( pool_0 );

#if defined(DEBUG_BUTTERFLY)
  printf("-- GEBUT\n");
#endif

  BFT_zQTL( mb_seg, nb_seg, mb_tile, i_seg, j_seg, descA->level, N, Atl, Abl, Atr, Abr, p_elem_tl, Ubef, Uaft, BL_IS_BL, OFF_DIAG);
  BFT_zQBL( mb_seg, nb_seg, mb_tile, i_seg, j_seg, descA->level, N, Atl, Abl, Atr, Abr, p_elem_bl, Ubef, Uaft, BL_IS_BL, OFF_DIAG);
  BFT_zQTR( mb_seg, nb_seg, mb_tile, i_seg, j_seg, descA->level, N, Atl, Abl, Atr, Abr, p_elem_tr, Ubef, Uaft, BL_IS_BL);
  BFT_zQBR( mb_seg, nb_seg, mb_tile, i_seg, j_seg, descA->level, N, Atl, Abl, Atr, Abr, p_elem_br, Ubef, Uaft, BL_IS_BL, OFF_DIAG);

  for(jj=0; jj<nb_seg; jj++){
      uintptr_t off = (mb_tile*jj) * sizeof(PLASMA_Complex64_t);
      sz = mb_seg * sizeof(PLASMA_Complex64_t);
      memcpy((void *)((uintptr_t)Atl+off), (void *)((uintptr_t)p_elem_tl+off), sz);
      memcpy((void *)((uintptr_t)Abl+off), (void *)((uintptr_t)p_elem_bl+off), sz);
      memcpy((void *)((uintptr_t)Atr+off), (void *)((uintptr_t)p_elem_tr+off), sz);
      memcpy((void *)((uintptr_t)Abr+off), (void *)((uintptr_t)p_elem_br+off), sz);
#if defined(DEBUG_BUTTERFLY)
      printf ("--> GEBUT(%d,%d): Atl+off: %p+%lu, sz:%d\n",i,j, Atl, off, sz);
      printf ("--> GEBUT(%d,%d): Abl+off: %p+%lu, sz:%d\n",i,j, Abl, off, sz);
      printf ("--> GEBUT(%d,%d): Atr+off: %p+%lu, sz:%d\n",i,j, Atr, off, sz);
      printf ("--> GEBUT(%d,%d): Abr+off: %p+%lu, sz:%d\n",i,j, Abr, off, sz);
#endif
  }

  parsec_private_memory_push( pool_0, p_elem_tl );
  parsec_private_memory_push( pool_0, p_elem_bl );
  parsec_private_memory_push( pool_0, p_elem_tr );
  parsec_private_memory_push( pool_0, p_elem_br );

END


/*
 *
 */
GEBUT_Reader(i,j)
  /* Execution space */
  i = 0 .. mt-1
  j = 0 .. nt-1

  : descA(i,j)

READ A <- descA(i, j)                                              [ type = %{ return segment_to_arena_index(descA, i, j); %}]
       -> ( (i<mt/2)  && (j<nt/2)  ) ? Atl GEBUT(i,j)           [ type = %{ return segment_to_arena_index(descA, i, j); %}]
       -> ( (i<mt/2)  && (j>=nt/2) ) ? Atr GEBUT(i,j-nt/2)      [ type = %{ return segment_to_arena_index(descA, i, j); %}]
       -> ( (i>=mt/2) && (j<nt/2)  ) ? Abl GEBUT(i-mt/2,j)      [ type = %{ return segment_to_arena_index(descA, i, j); %}]
       -> ( (i>=mt/2) && (j>=nt/2) ) ? Abr GEBUT(i-mt/2,j-nt/2) [ type = %{ return segment_to_arena_index(descA, i, j); %}]

BODY
#if defined(DEBUG_BUTTERFLY)
  unsigned mb_tile, nb_tile, mb_seg, nb_seg, type;
  unsigned ii,jj;
  int i_tile, j_tile;
  uintptr_t off_in_tile;
#endif

  printlog("GEBUT_Reader(%d, %d)\n"
           "\t(PlasmaLower, tempkn, A(%d,%d)[%p], ldak)\n",
           i, j, i, j, A);

#if defined(DEBUG_BUTTERFLY)
  printf ("GEBUT_Reader(%d,%d)\n",i,j);

  mb_tile = descA->A_org->mb;
  nb_tile = descA->A_org->nb;

  segment_to_tile(descA, i, j, &i_tile, &j_tile, &off_in_tile);
  int i_seg = i_tile*mb_tile + off_in_tile%mb_tile;
  int j_seg = j_tile*nb_tile + off_in_tile/mb_tile;

  type = segment_to_type_index(&descA->seg_info, i, j);
  (void)type_index_to_sizes(&descA->seg_info, type, &mb_seg, &nb_seg);

  for(ii=0; ii<mb_seg; ii++){
      printf ("  R ");
      for(jj=0; jj<nb_seg; jj++){
          //printf ("A(%d,%d):%lf ",i*mb_seg+ii,j*nb_seg+jj, *(double *)((jj*mb_tile+ii)*sizeof(double)+A) );
          printf ("A(%d,%d):%lf ",i_seg+ii,j_seg+jj, *(double *)((jj*mb_tile+ii)*sizeof(double)+A) );
      }
      printf ("\n");
  }
#endif


END


/*
 *
 */
GEBUT_Writer(i,j)
  /* Execution space */
  i = 0 .. mt-1
  j = 0 .. nt-1

  : descA(i,j)

READ A <- ( (i<mt/2)  && (j<nt/2)  ) ? Atl GEBUT(i,j)           [ type = %{ return segment_to_arena_index(descA, i, j); %}]
       <- ( (i<mt/2)  && (j>=nt/2) ) ? Atr GEBUT(i,j-nt/2)      [ type = %{ return segment_to_arena_index(descA, i, j); %}]
       <- ( (i>=mt/2) && (j<nt/2)  ) ? Abl GEBUT(i-mt/2,j)      [ type = %{ return segment_to_arena_index(descA, i, j); %}]
       <- ( (i>=mt/2) && (j>=nt/2) ) ? Abr GEBUT(i-mt/2,j-nt/2) [ type = %{ return segment_to_arena_index(descA, i, j); %}]
       -> descA(i, j)                                              [ type = %{ return segment_to_arena_index(descA, i, j); %}]

BODY
#if defined(DEBUG_BUTTERFLY)
  unsigned mb_tile, nb_tile, mb_seg, nb_seg, type;
  unsigned ii,jj;
#endif

  printlog("GEBUT_Writer(%d, %d)\n"
           "\t(PlasmaLower, tempkn, A(%d,%d)[%p], ldak)\n",
           i, j, i, j, A);

#if defined(DEBUG_BUTTERFLY)
  printf ("GEBUT_Writer(%d,%d)\n",i,j);

  mb_tile = descA->A_org->mb;
  nb_tile = descA->A_org->nb;

  type = segment_to_type_index(&descA->seg_info, i, j);
  (void)type_index_to_sizes(&descA->seg_info, type, &mb_seg, &nb_seg);

  for(ii=0; ii<mb_seg; ii++){
      printf ("  W ");
      for(jj=0; jj<nb_seg; jj++){
          printf ("A(%d,%d):%lf ",i*mb_seg+ii,j*nb_seg+jj, *(double *)((jj*mb_tile+ii)*sizeof(double)+A) );
      }
      printf ("\n");
  }
#endif


END
