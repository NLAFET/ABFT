extern "C" %{
/*
 * Copyright (c) 2010-2013 The University of Tennessee and The University
 *                         of Tennessee Research Foundation. All rights
 *                         reserved.
 * Copyright (c) 2013      Inria. All rights reserved.
 * $COPYRIGHT
 *
 *
 * @precisions normal z -> s d c
 *
 */
#include "dplasma/lib/dplasmajdf.h"
#include "dplasmatypes.h"
#include "parsec/data_dist/matrix/matrix.h"

%}

descA1 [type = "parsec_tiled_matrix_dc_t*"]
descA2 [type = "parsec_tiled_matrix_dc_t*" aligned=descA1]
descT  [type = "parsec_tiled_matrix_dc_t*" aligned=descA1]
p_work [type = "parsec_memory_pool_t *"]
p_tau  [type = "parsec_memory_pool_t *"]


ib     [type = "int" hidden=on default = "descT->mb" ]

ztsqrt_ztsqrt(k)
  /* Execution space */
  k = 0 .. descA2->nt-1

  : descA2(0, k)

  RW   A1 <- (0 == k) ? descA1(0, k) : A1 ztsqrt_ztsmqr(k-1, k)
          -> descA1(0, k)

  RW   A2 <- (0 == k) ? descA2(0, k) : A2 ztsqrt_ztsmqr(k-1, k)
          -> (k < (descA2->nt-1)) ? V ztsqrt_ztsmqr(k, k+1 ..  descA2->nt-1)
          -> descA2(0, k)

  RW    T <- descT(0, k)                                                   [type = LITTLE_T]
          -> (k < (descA2->nt-1)) ? T ztsqrt_ztsmqr(k, k+1 ..  descA2->nt-1) [type = LITTLE_T]
          -> descT(0, k)                                                   [type = LITTLE_T]

BODY
{
    parsec_complex64_t *lA1 = ((parsec_complex64_t*)A1) + k * descA1->nb;
    int tempkn = (k == (descA2->nt-1)) ? (descA2->n - k * descA2->nb) : descA2->nb;
    int lda1 = BLKLDD( descA1, 0 );
    int lda2 = BLKLDD( descA2, 0 );

    printlog("CORE_ztsqrt(%d, %d)\n"
             "\t(tempmm, tempkn, ib, A(%d,%d)[%p], ldak, A(%d,%d)[%p], ldam, T(%d,%d)[%p], descT->mb, p_elem_A, p_elem_B)\n",
             k, k, k, k, T, k, k, A1, k, k, A2);

#if !defined(PARSEC_DRY_RUN)
    void *p_elem_tau  = parsec_private_memory_pop( p_tau );
    void *p_elem_work = parsec_private_memory_pop( p_work );

    CORE_ztsqrt( descA2->m, tempkn, ib,
                 lA1, lda1,
                 A2,  lda2,
                 T,   descT->mb,
                 p_elem_tau, p_elem_work );

    parsec_private_memory_push( p_tau,  p_elem_tau  );
    parsec_private_memory_push( p_work, p_elem_work );
#endif  /* !defined(PARSEC_DRY_RUN) */
}
END

ztsqrt_ztsmqr(k, n)
  /* Execution space */
  k = 0   .. descA2->nt-2
  n = k+1 .. descA2->nt-1

  : descA2(0,n)

  RW   A1 <- ( k == 0 ) ? descA1(0, n)   : A1 ztsqrt_ztsmqr(k-1, n)

          -> (n == (k+1)) ? A1 ztsqrt_ztsqrt(k+1)
          -> (n >  (k+1)) ? A1 ztsqrt_ztsmqr(k+1, n)

  RW   A2 <- ( k == 0 ) ? descA2(0, n) : A2 ztsqrt_ztsmqr(k-1, n)

          -> (n == (k+1)) ? A2 ztsqrt_ztsqrt(k+1)
          -> (n >  (k+1)) ? A2 ztsqrt_ztsmqr(k+1, n)

  READ  V <- A2 ztsqrt_ztsqrt(k)
  READ  T <- T  ztsqrt_ztsqrt(k)             [type = LITTLE_T]

BODY
{
    parsec_complex64_t *lA1 = ((parsec_complex64_t*)A1) + k * descA1->nb;
    int tempnn = (n == (descA2->nt-1)) ? (descA2->n - n * descA2->nb) : descA2->nb;
    int lda1 = BLKLDD( descA1, 0 );
    int lda2 = BLKLDD( descA2, 0 );

    printlog("CORE_ztsmqr(%d, %d, %d)\n"
             "\t(PlasmaLeft, PlasmaConjTrans, descA->mb, tempnn, tempmm, tempnn, descA->nb, ib, A(%d,%d)[%p], ldak, A(%d,%d)[%p], ldam, A(%d,%d)[%p], ldam, T(%d,%d)[%p], descT->mb, p_elem_A, ldwork)\n",
             k, k, n, k, n, A1, k, n, A2, k, k, V, k, k, T);

#if !defined(PARSEC_DRY_RUN)
    void *p_elem_W = parsec_private_memory_pop( p_work );

    CORE_ztsmqr(PlasmaLeft, PlasmaConjTrans,
                descA1->nb, tempnn, descA2->m, tempnn, descA1->nb, ib,
                lA1 /* descA1(n) */, lda1,
                A2  /* descA2(n) */, lda2,
                V   /* descA2(k) */, lda2,
                T   /* descT(k)  */, descT->mb,
                p_elem_W, descT->mb );

    parsec_private_memory_push( p_work, p_elem_W );
#endif  /* !defined(PARSEC_DRY_RUN) */
}
END

extern "C" %{

/**
 ********************************************************************************
 *
 * @ingroup dplasma_complex64_t
 *
 * dplasma_zgeqrf_New - Generates the taskpool that computes the QR factorization
 * a complex M-by-N matrix A: A = Q * R.
 *
 * The method used in this algorithm is a tile QR algorithm with a flat
 * reduction tree.  It is recommended to use the super tiling parameter (SMB) to
 * improve the performance of the factorization.
 * A high SMB parameter reduces the communication volume, but also deteriorates
 * the load balancing if too important. A small one increases the communication
 * volume, but improves load balancing.
 * A good SMB value should provide enough work to all available cores on one
 * node. It is then recommended to set it to 4 when creating the matrix
 * descriptor.
 * For tiling, MB=200, and IB=32 usually give good results.
 *
 * This variant is good for square large problems.
 * For other problems, see:
 *   - dplasma_zgeqrf_param_New() parameterized with trees for tall and skinny
 *     matrices
 *   - dplasma_zgeqrf_param_New() parameterized with systolic tree if
 *     computation load per node is very low.
 *
 * WARNING: The computations are not done by this call.
 *
 *******************************************************************************
 *
 * @param[in,out] A
 *          Descriptor of the distributed matrix A to be factorized.
 *          On entry, describes the M-by-N matrix A.
 *          On exit, the elements on and above the diagonal of the array contain
 *          the min(M,N)-by-N upper trapezoidal matrix R (R is upper triangular
 *          if (M >= N); the elements below the diagonal represent the unitary
 *          matrix Q as a product of elementary reflectors stored by tiles.
 *          It cannot be used directly as in Lapack.
 *
 * @param[out] T
 *          Descriptor of the matrix T distributed exactly as the A matrix. T.mb
 *          defines the IB parameter of tile QR algorithm. This matrix must be
 *          of size A.mt * T.mb - by - A.nt * T.nb, with T.nb == A.nb.
 *          On exit, contains auxiliary information required to compute the Q
 *          matrix, and/or solve the problem.
 *
 *******************************************************************************
 *
 * @return
 *          \retval NULL if incorrect parameters are given.
 *          \retval The parsec taskpool describing the operation that can be
 *          enqueued in the runtime with parsec_context_add_taskpool(). It, then, needs to be
 *          destroy with dplasma_zgeqrf_Destruct();
 *
 *******************************************************************************
 *
 * @sa dplasma_zgeqrf
 * @sa dplasma_zgeqrf_Destruct
 * @sa dplasma_cgeqrf_New
 * @sa dplasma_dgeqrf_New
 * @sa dplasma_sgeqrf_New
 *
 ******************************************************************************/
parsec_taskpool_t*
dplasma_zgeqrfr_tsqrt_New( parsec_tiled_matrix_dc_t *A1,
                           parsec_tiled_matrix_dc_t *A2,
                           parsec_tiled_matrix_dc_t *T,
                           void *work,
                           void *tau )
{
    parsec_zgeqrfr_tsqrt_taskpool_t *tsqrt;

    tsqrt = parsec_zgeqrfr_tsqrt_new( A1,
                                     A2,
                                     T,
                                     (parsec_memory_pool_t*) work,
                                     (parsec_memory_pool_t*) tau );

    /* Default type */
    dplasma_add2arena_rectangle( tsqrt->arenas[PARSEC_zgeqrfr_tsqrt_DEFAULT_ARENA],
                                 A1->mb*A1->nb*sizeof(parsec_complex64_t),
                                 PARSEC_ARENA_ALIGNMENT_SSE,
                                 parsec_datatype_double_complex_t, A1->mb, A1->nb, -1 );

    /* Little T */
    dplasma_add2arena_rectangle( tsqrt->arenas[PARSEC_zgeqrfr_tsqrt_LITTLE_T_ARENA],
                                 T->mb*T->nb*sizeof(parsec_complex64_t),
                                 PARSEC_ARENA_ALIGNMENT_SSE,
                                 parsec_datatype_double_complex_t, T->mb, T->nb, -1);

    return (parsec_taskpool_t*)tsqrt;
}

/**
 *******************************************************************************
 *
 * @ingroup dplasma_complex64_t
 *
 *  dplasma_zgeqrfr_tsqrt_Destruct - Free the data structure associated to an taskpool
 *  created with dplasma_zgeqrfr_tsqrt_New().
 *
 *******************************************************************************
 *
 * @param[in,out] taskpool
 *          On entry, the taskpool to destroy.
 *          On exit, the taskpool cannot be used anymore.
 *
 *******************************************************************************
 *
 * @sa dplasma_zgeqrfr_tsqrt_New
 *
 ******************************************************************************/
void
dplasma_zgeqrfr_tsqrt_Destruct( parsec_taskpool_t *tp )
{
    parsec_zgeqrfr_tsqrt_taskpool_t *parsec_zgeqrfr_tsqrt = (parsec_zgeqrfr_tsqrt_taskpool_t *)tp;

    parsec_matrix_del2arena( parsec_zgeqrfr_tsqrt->arenas[PARSEC_zgeqrfr_tsqrt_DEFAULT_ARENA ] );
    parsec_matrix_del2arena( parsec_zgeqrfr_tsqrt->arenas[PARSEC_zgeqrfr_tsqrt_LITTLE_T_ARENA] );

    tp->destructor(tp);
}

%}
