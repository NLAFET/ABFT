extern "C" %{
/*
 *  Copyright (c) 2010-2013
 *
 *  The University of Tennessee and The University
 *  of Tennessee Research Foundation.  All rights
 *  reserved.
 *
 * @precisions normal z -> s d c
 *
 */
#include "dplasma/lib/dplasmajdf.h"
#include "parsec/data_dist/matrix/matrix.h"

%}

/*
 * Globals
 */
trans [type = int]
alpha [type = parsec_complex64_t]
descX [type = "const parsec_tiled_matrix_dc_t*"]
descY [type = "const parsec_tiled_matrix_dc_t*"]
descA [type = "parsec_tiled_matrix_dc_t*"]

/**************************************************
 *                       READ_X                   *
 **************************************************/
READ_X(m)  [profile = off]

m = 0 .. descX->mt-1

: descX(m)

READ X <- descX(m)                  [type = VECTOR]
       -> X GER(m, 0..descA->nt-1)   [type = VECTOR]
BODY
{
    printlog("X(%d)\n", m );
}
END

/**************************************************
 *                       READ_Y                   *
 **************************************************/
READ_Y(m)  [profile = off]

m = 0 .. descY->mt-1

: descY(m)

READ Y <- descY(m)                  [type = VECTOR]
       -> Y GER(0..descA->mt-1, m)   [type = VECTOR]
BODY
{
    printlog("read Y(%d)\n", m );
}
END

/**************************************************
 *                       GEMM                     *
 **************************************************/
GER(m, n)

// Execution space
m = 0 .. descA->mt-1
n = 0 .. descA->nt-1

// Parallel partitioning
: descA(m, n)

// Parameters
READ X <- X READ_X(m)  [type = VECTOR]
READ Y <- Y READ_Y(n)  [type = VECTOR]
RW   A <- descA(m, n)
       -> descA(m, n)
BODY
{
    int tempmm = (m == descA->mt-1) ? descA->m - m * descA->mb : descA->mb;
    int tempnn = (n == descA->nt-1) ? descA->n - n * descA->nb : descA->nb;
    int ldam = BLKLDD(descA, m);

#if !defined(PARSEC_DRY_RUN)
    if ( trans == PlasmaConjTrans ){
        cblas_zgerc( CblasColMajor, tempmm, tempnn, CBLAS_SADDR(alpha),
                     X, 1, Y, 1, A, ldam );
    } else if (trans == PlasmaTrans ) {
        cblas_zgeru( CblasColMajor, tempmm, tempnn, CBLAS_SADDR(alpha),
                     X, 1, Y, 1, A, ldam );
    } else {
        fprintf(stderr, "zger.jdf: Error with trans parameter\n");
    }
#endif

    printlog("gerc( %d, %d )\n"
             "    ( %d, %d, %e, %p, %d, %p, %d, %p, %d)\n",
             m, n, tempmm, tempnn, creal(alpha), X, 1, Y, 1, A, ldam );
}
END
