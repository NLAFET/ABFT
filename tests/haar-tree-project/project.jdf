extern "C" %{
#include "tree_dist.h"
#include <math.h>
#include "parsec/sys/atomic.h"

#define L 10.0

static double key_to_x(int n, int l)
{
  double scale = (2.0*L)*pow(2.0, -n);
  return -L + scale * (0.5 + l);
}

static double func(double x) {
  return exp(-x*x);
}

 static int my_simple_hash_equal(parsec_key_t a, parsec_key_t b, void *taskpool)
{
    (void)taskpool;
    return a == b;
}

static char *my_simple_hash_print(char *buffer, size_t bs, parsec_key_t k, void *taskpool)
{
    (void)taskpool;
    snprintf(buffer, bs, "%16"PRIu64, (uint64_t)k);
    return buffer;
}

static uint64_t my_simple_hash_hash(parsec_key_t key, int nb_bits, void *taskpool)
{
    (void)taskpool;
    uint64_t k = (uint64_t)(uintptr_t)key;
    uint32_t i;
    for(i = nb_bits; i < sizeof(uint64_t)*8; i+=nb_bits)
        k = k ^ (k >> i);
    return k & (~0ULL >> (sizeof(uint64_t)*8-nb_bits));
}
 
static parsec_key_fn_t my_simple_hash_fns = {
    .key_equal = my_simple_hash_equal,
    .key_print = my_simple_hash_print,
    .key_hash  = my_simple_hash_hash
};

struct __parsec_project_internal_taskpool_s;
struct __parsec_project_END_PROPAGATE_assignment_s;
struct __parsec_project_PROJECT_assignment_s;
struct __parsec_project_CREATE_NODE_assignment_s;
struct __parsec_project_PROJECT_task_s;

static parsec_key_t end_propagate_make_key(const parsec_taskpool_t* __tp, const assignment_t *_as);
static parsec_key_t project_make_key(const parsec_taskpool_t* __tp, const assignment_t *_as);

static uint32_t undetermined_nb_tasks(struct __parsec_project_internal_taskpool_s *__tp);

static void               *my_alloc_deps(struct __parsec_project_internal_taskpool_s *__tp);
static void                my_free_deps(struct __parsec_project_internal_taskpool_s *__tp, void *deps);
static parsec_dependency_t *my_find_deps(const parsec_taskpool_t *tp,
                                         parsec_execution_stream_t *es,
                                         const parsec_task_t* restrict task);

static int my_project_startup(parsec_execution_stream_t * es,
                              struct __parsec_project_PROJECT_task_s * this_task);
%}

%option nb_local_tasks_fn = undetermined_nb_tasks

// These are global variables that are instanciated in the main.c
treeA               [type = "tree_dist_t *"]
// The only type known to parsec is parsec_data_collection_t
NP                  [type = "int"]
fakeDesc            [type = "parsec_data_collection_t *"]
thresh              [type = "double"]
verbose             [type = "int"]

BCAST_END_PROPAGATE(rank)
  rank = 0 .. (NP-1)

:fakeDesc(rank, rank)

CTL RL <- RL END_PROPAGATE(0, 0)

BODY
{
    __parsec_tp->super.super.nb_tasks = 0; /** We are now DONE ! **/
    if(verbose)
        fprintf(stderr, "Rank %d in BCAST_END_PROPAGATE\n", rank);
}
END

// END_PROPAGATE is used to stop the creation of the nodes.
// The algorithm is the following :
// 1- The parent of leaf nodes is expecting control messages from the task PROJECT
// 2- Once it receives these messages, it sends a control message to its parent task
// 3- The parent of parent node receives the controls from END_PROPAGATE
// 4- Once the root node receives both its children controls, the tree
//    is built and all the remaining tasks are killed

END_PROPAGATE (n, l) [hash_struct = my_simple_hash_fns
                      make_key_fn = end_propagate_make_key
                      find_deps_fn  = my_find_deps
                      alloc_deps_fn = my_alloc_deps
                      free_deps_fn  = my_free_deps ]
n = 0 .. 31
l = 0 .. 1<<n

:treeA(n, l)

 // The controls (CTL) are used as counters. Each END_PROPAGATE task
 // has to receive exactly two controls. But, the parent of leaf nodes
 // should receive the CTL from the PROJECT tasks and all the other
 // parent nodes receive them from END_PROPAGATE. Thus, it is not
 // possible to write a condition which explicitely says from which
 // task the control was received (in other words, we cannot know if
 // the child nodes are leaves or node without more information).
 // Fortunately, we know exactly how many controls a task is waiting (2)
 // and the runtime does not check the id of the task sending the controls,
 // instead, it just counts the number of controls.

CTL LEFT  <- 1 ? RL END_PROPAGATE(n+1, 2*l) : RL PROJECT(n+1, 2*l)
 // The line above says that the left control is received from
 // the left control of the task end_propagate(lid) if true.
 // For the runtime, this just means that a control has to be received

CTL RIGHT <- 1 ? RL END_PROPAGATE(n+1, 2*l+1) : RL PROJECT(n+1, 2*l+1)

//Once both controls are received, this task sends the control
// to its parent on the right or on the left control of its parent
// depending on its n and its l
CTL RL    -> (((l%2) == 0) & (n>0)) ? LEFT END_PROPAGATE(n-1, l/2)
          -> (((l%2) == 1) & (n>0)) ? RIGHT END_PROPAGATE(n-1, l/2)
          -> (n==0) ? RL BCAST_END_PROPAGATE(0 .. (NP-1))

BODY
{
  /* The root node has to delete all remaining tasks*/
    if( verbose ) {
        int rank = (((parsec_data_collection_t*)treeA)->rank_of((parsec_data_collection_t*)treeA, n, l));
        fprintf(stderr, "CALLING END_PROPAGATE(%d, %d) on rank %d\n", n, l, rank);
    }
}
END

PROJECT (n, l) [hash_struct = my_simple_hash_fns
                make_key_fn = project_make_key
                find_deps_fn  = my_find_deps
                alloc_deps_fn = my_alloc_deps
                free_deps_fn  = my_free_deps
                startup_fn = my_project_startup ]
  n = 0 .. 31
  l = 0 .. (1<<n)
  larger_than_thresh = 1 // this is used to check if the error is > thresh

:treeA(n, l)

CTL RL <- (n!=0) ? RL PROJECT(n-1, l/2)
       -> larger_than_thresh ? RL PROJECT(n+1, (l*2) .. ((l*2)+1))
       -> ((!larger_than_thresh) & ((l%2) == 0)) ? LEFT END_PROPAGATE(n-1, l/2)
       -> ((!larger_than_thresh) & ((l%2) == 1)) ? RIGHT END_PROPAGATE(n-1, l/2)

WRITE NODE <- NEW [ type=DEFAULT ]

BODY
{
    double err;
    double sl, sr;
    double d;

    if( verbose ) {
        int rank = (((parsec_data_collection_t*)treeA)->rank_of((parsec_data_collection_t*)treeA, n, l));
        fprintf(stderr, "CALLING PROJECT(%d, %d) on rank %d\n", n, l, rank);
    }

    sl = func(key_to_x(n+1, 2*l));
    sr = func(key_to_x(n+1, 2*l+1));

    d = 0.5 * (sl - sr);

    err = fabs(d) * pow(2.0, -0.5 * n);

    if ((n >= 3) && (err <= thresh)) {
        this_task->locals.larger_than_thresh.value = 0;
    } else {
        node_t *node = (node_t*)NODE;

        double sl, sr;

        if( verbose ) {
            int rank = (((parsec_data_collection_t*)treeA)->rank_of((parsec_data_collection_t*)treeA, n, l));
            fprintf(stderr, "CALLING CREATE_NODE(%d, %d) on rank %d\n", n, l, rank);
        }

        sl = func(key_to_x(n+1, 2*l));
        sr = func(key_to_x(n+1, 2*l+1));

        node->s = 0.5 * (sl + sr);
        node->d = 0.5 * (sl - sr);
        // To tell parsec to keep the reference of these two data, so it shouldn't delete them
        OBJ_RETAIN(_f_NODE);
        tree_dist_insert_data(treeA, _f_NODE->original, n, l);
    }

}
END


extern "C" %{
static uint64_t my_simple_tree_hash(int n, int l)
{
    return (((uint64_t)n) << 32) | ((uint64_t)l);
}

static parsec_key_t end_propagate_make_key(const parsec_taskpool_t* __tp, const assignment_t *_as)
{
    (void)__tp;
    const struct __parsec_project_END_PROPAGATE_assignment_s * assignments = (const struct __parsec_project_END_PROPAGATE_assignment_s *)_as;
    return (parsec_key_t)my_simple_tree_hash(assignments->n.value, assignments->l.value);
}

static parsec_key_t project_make_key(const parsec_taskpool_t* __tp, const assignment_t *_as)
{
    (void)__tp;
    const struct __parsec_project_PROJECT_assignment_s * assignments = (const struct __parsec_project_PROJECT_assignment_s *)_as;
    return (parsec_key_t)my_simple_tree_hash(assignments->n.value, assignments->l.value);
}

static uint32_t undetermined_nb_tasks(struct __parsec_project_internal_taskpool_s *__tp)
{
    (void)__tp;
    return PARSEC_UNDETERMINED_NB_TASKS;
}

typedef struct {
    int n;
    int l;
    parsec_dependency_t dep;
} simple_hash_entry_t;

typedef struct {
    int size;
    int used;
    simple_hash_entry_t **buckets;
} simple_hash_t;

static void *my_alloc_deps(struct __parsec_project_internal_taskpool_s *__tp)
{
    simple_hash_t *sh;
    (void)__tp;
    sh = (simple_hash_t*)malloc(sizeof(simple_hash_t));
    sh->size = 6000;
    sh->used = 0;
    sh->buckets = (simple_hash_entry_t**)calloc(sh->size, sizeof(simple_hash_entry_t *));
    return (void*)sh;
}

static void my_free_deps(struct __parsec_project_internal_taskpool_s *__tp, void *deps)
{
    simple_hash_t *sh;
    int i;
    (void)__tp;
    sh = (simple_hash_t*)deps;
    for(i = 0; i < sh->size; i++)
        if( sh->buckets[i] !=  NULL )
            free(sh->buckets[i]);
    free(sh->buckets);
    free(sh);
}

static parsec_dependency_t *my_find_deps(const parsec_taskpool_t *tp,
                                         parsec_execution_stream_t *es,
                                         const parsec_task_t* restrict task)
{
    simple_hash_t *sh;
    simple_hash_entry_t *ne = NULL;
    int p, i;
    int n, l;

    (void)es;

    n = task->locals[0].value;
    l = task->locals[1].value;

    sh = (simple_hash_t*)tp->dependencies_array[ task->task_class->task_class_id ];
    p = my_simple_tree_hash(n, l) % sh->size;
    for(i = p; i != p-1; i = ((i+1) % sh->size)) {
        if( NULL == sh->buckets[i] ) {
            /** Empty spot: I'm not in the hash, I try to take it */
            if( NULL == ne ) {
                ne = (simple_hash_entry_t*)malloc(sizeof(simple_hash_entry_t));
                ne->n = n;
                ne->l = l;
                ne->dep = (parsec_dependency_t)0;
            }
            if( parsec_atomic_cas_ptr(&sh->buckets[i], NULL, ne) )
                return &ne->dep;
        }
        if( (sh->buckets[i]->n == n) && (sh->buckets[i]->l == l) ) {
            if(ne) free(ne);
            return &sh->buckets[i]->dep;
        }
    }
    fprintf(stderr, "Simple hash overflow: %d elements already inserted in the hash table\n", sh->size);
    exit(1); /** Catastrophic failure */
}

static int my_project_startup(parsec_execution_stream_t * es, __parsec_project_PROJECT_task_t * this_task)
{
  __parsec_project_PROJECT_task_t *new_task;
  __parsec_project_internal_taskpool_t *__tp = (__parsec_project_internal_taskpool_t *) this_task->taskpool;
  int vpid = 0;
  parsec_context_t *context = __tp->super.super.context;

  if ( ((parsec_data_collection_t *)__tp->super._g_treeA)->myrank != 0)
      return PARSEC_HOOK_RETURN_DONE;
  if (NULL != ((parsec_data_collection_t *) __tp->super._g_treeA)->vpid_of) {
      vpid = ((parsec_data_collection_t *) __tp->super._g_treeA)->vpid_of((parsec_data_collection_t *) __tp->super._g_treeA, 0, 0);
      assert(context->nb_vp >= vpid);
  }
  new_task = (__parsec_project_PROJECT_task_t *) parsec_thread_mempool_allocate(context->virtual_processes[0]->execution_streams[0]->context_mempool);
  new_task->status = PARSEC_TASK_STATUS_NONE;
  new_task->taskpool = this_task->taskpool;
  new_task->task_class = __tp->super.super.task_classes_array[project_PROJECT.task_class_id];
  new_task->chore_id = 0;

  new_task->locals.n.value = 0;
  new_task->locals.l.value = 0;
  new_task->locals.larger_than_thresh.value = 1;
  new_task->data._f_RL.data_repo = NULL;
  new_task->data._f_RL.data_in = NULL;
  new_task->data._f_RL.data_out = NULL;

  new_task->priority = 1;

  PARSEC_LIST_ITEM_SINGLETON(new_task);
  __parsec_schedule(es, (parsec_task_t *)new_task, 0);

  (void)vpid;
  return PARSEC_HOOK_RETURN_DONE;
}

%}
