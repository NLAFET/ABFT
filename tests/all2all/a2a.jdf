extern "C" %{
/*
 * Copyright (c) 2013-2016 The University of Tennessee and The University
 *                         of Tennessee Research Foundation.  All rights
 *                         reserved.
 *
 * @precisions normal z -> s d c
 *
 */

#include "parsec/data_distribution.h"
#include "parsec/data_dist/matrix/matrix.h"

#if defined(PARSEC_HAVE_MPI)
#include <mpi.h>
static parsec_datatype_t block;
#endif
#include <stdio.h>

int32_t always_zero()
{
    return 0;
}

int64_t always_one(void)
{
    return 1;
}

%}

descA      [type = "struct parsec_tiled_matrix_dc_t*"]
descB      [type = "struct parsec_tiled_matrix_dc_t*"]
NR
NT

READER_B(r, t)
r = 0 .. NR-1
t = 0 .. NT-1

: descB(t, 0)

READ B <- (r == 0) ? descB(t, 0) : B READER_B(r-1, t) [count = %{ return 1; %}
                                                       displ = %{ return 0; %}]
       -> A RECV(r, 0 .. NT-1, t)                     [count = 1
                                                       displ = 0]
       -> A FANIN(r, t)                               [count = %{ return always_one(); %}
                                                       displ = %{ return always_zero(); %}]
       -> (r != NR-1) ? B READER_B(r+1, t)
BODY
END

FANOUT(r, t)
r = 0 .. NR-1
t = 0 .. NT-1

: descA(t, 0)

READ A <- (r == 0) ? descA(t, 0) : A FANOUT(r-1, t)
       -> A SEND(r, t, 0 .. NT-1)
BODY
END

SEND(r, t, s)
r = 0 .. NR-1
t = 0 .. NT-1
s = 0 .. NT-1

: descA(t, 0)

READ A <- A FANOUT(r, t)
       -> B RECV(r, s, t)
BODY
END

RECV(r, s, t)
r = 0 .. NR-1
t = 0 .. NT-1
s = 0 .. NT-1

: descB(t, 0)

RW   A <- B READER_B(r, t)
READ B <- A SEND(r, t, s)
CTL  T -> T FANIN(r, t)

BODY
END

FANIN(r, t)
r = 0 .. NR-1
t = 0 .. NT-1

: descB(t, 0)

RW A  <- B READER_B(r, t)
CTL T <- T RECV(r, t, 0 .. NT-1)

BODY
END

extern "C" %{

/**
 * @param [IN] A    the data, already distributed and allocated
 * @param [IN] size size of each local data element
 * @param [IN] nb   number of iterations
 *
 * @return the parsec taskpool to schedule.
 */
parsec_taskpool_t *a2a_new(parsec_tiled_matrix_dc_t *A, parsec_tiled_matrix_dc_t *B, int size, int repeat)
{
    int worldsize;
    parsec_a2a_taskpool_t *tp = NULL;
    (void)size;

#if defined(PARSEC_HAVE_MPI)
    MPI_Comm_size(MPI_COMM_WORLD, &worldsize);
#else
    worldsize = 1;
#endif

    if( repeat <= 0 ) {
        fprintf(stderr, "To work, A2A must do at least one exchange of at least one byte\n");
        return (parsec_taskpool_t*)tp;
    }

    tp = parsec_a2a_new(A, B, repeat, worldsize);

    parsec_matrix_add2arena_rect(tp->arenas[PARSEC_a2a_DEFAULT_ARENA],
                                 parsec_datatype_int32_t,
                                 size, 1, size);

    return (parsec_taskpool_t*)tp;
}

/**
 * @param [INOUT] o the parsec taskpool to destroy
 */
void a2a_destroy(parsec_taskpool_t *tp)
{
#if defined(PARSEC_HAVE_MPI)
    MPI_Type_free( &block );
#endif

    PARSEC_INTERNAL_TASKPOOL_DESTRUCT(tp);
}

%}
