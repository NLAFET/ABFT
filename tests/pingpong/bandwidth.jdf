extern "C" %{
#include "parsec/data_distribution.h"
#include "parsec/utils/mca_param.h"

#include <assert.h>
#include <stdarg.h>
#include <sys/time.h>

#include "bandwidth.h"

typedef struct {
    parsec_data_collection_t  super;
    int            frags;
    int            size;
    parsec_data_t **data;
    uint8_t       *ptr;
} my_datatype_t;

/**
 * This data is not distributed. A copy of the entire
 * array is available on each node.
 */
static inline uint32_t
rank_of_key(parsec_data_collection_t *desc, parsec_data_key_t key)
{
    my_datatype_t *array = (my_datatype_t*)desc;
    int f = (int)key; (void)f;

    assert( (f < array->frags) && (f >= 0) );
    return array->super.myrank;
}

static uint32_t
rank_of(parsec_data_collection_t *desc, ...)
{
    va_list ap;
    int f;

    va_start(ap, desc);
    f = va_arg(ap, int);
    va_end(ap);

    return rank_of_key(desc, f);
}

static inline int32_t
vpid_of_key(parsec_data_collection_t *desc, parsec_data_key_t key)
{
    my_datatype_t *array = (my_datatype_t*)desc;
    int f = (key);

    assert( (f < array->size) && (f >= 0) );
    (void)array; (void)f;
    return 0;
}

static int32_t
vpid_of(parsec_data_collection_t *desc, ...)
{
    va_list ap;
    int f;

    va_start(ap, desc);
    f = va_arg(ap, int);
    va_end(ap);

    return vpid_of_key(desc, f);
}

static inline parsec_data_t* data_of_key(parsec_data_collection_t *desc, parsec_data_key_t key)
{
    my_datatype_t *array = (my_datatype_t*)desc;
    int f = (int)key;

    assert( (f < array->size) && (f >= 0) );
    (void)f;
    if(NULL == array->data[f]) {
        parsec_data_t      *data;
        parsec_data_copy_t *copy;

        array->data[f] = data = parsec_data_new();
        data->key = f;
        data->nb_elts = array->size;

        copy = parsec_data_copy_new(array->data[f], 0 /* main memory */);
        copy->device_private = array->ptr + f * array->size;
    }
    return (void*)(array->data[f]);
}

static parsec_data_t* data_of(parsec_data_collection_t *desc, ...)
{
    va_list ap;
    int f;

    va_start(ap, desc);
    f = va_arg(ap, int);
    va_end(ap);

    return data_of_key(desc, f);
}

static uint32_t data_key(parsec_data_collection_t *desc, ...)
{
    my_datatype_t *dat = (my_datatype_t*)desc;
    va_list ap;
    int f;

    va_start(ap, desc);
    f = va_arg(ap, int);
    va_end(ap);

    assert( (f < dat->size) && (f >= 0) ); (void)dat;

    return (uint32_t)f;
}

static int
memory_register(parsec_data_collection_t* desc, struct parsec_device_s* device)
{
    my_datatype_t* m = (my_datatype_t*)desc;
    return device->device_memory_register(device,
                                          desc,
                                          m->ptr,
                                          m->frags * m->size * sizeof(uint8_t));
}

static int
memory_unregister(parsec_data_collection_t* desc, struct parsec_device_s* device)
{
    my_datatype_t* m = (my_datatype_t*)desc;
    return device->device_memory_unregister(device, desc, m->ptr);
}

static parsec_data_collection_t*
create_and_distribute_data(int rank, int world, int frags, int size)
{
    my_datatype_t *m = (my_datatype_t*)calloc(1, sizeof(my_datatype_t));
    parsec_data_collection_t *d = &(m->super);

    d->myrank = rank;
    d->nodes  = world;

    d->rank_of           = rank_of;
    d->rank_of_key       = rank_of_key;
    d->data_of           = data_of;
    d->data_of_key       = data_of_key;
    d->vpid_of           = vpid_of;
    d->vpid_of_key       = vpid_of_key;
    d->register_memory   = memory_register;
    d->unregister_memory = memory_unregister;

#if defined(PARSEC_PROF_TRACE)
    asprintf(&d->key_dim, "(%d)", size);
#endif  /* defined(PARSEC_PROF_TRACE) */
    d->key_base = strdup("A");
    d->data_key = data_key;

    m->frags = frags;
    m->size  = size;
    m->data  = (parsec_data_t**)calloc(frags, sizeof(parsec_data_t*));
    m->ptr   = (uint8_t*)calloc(frags * size, sizeof(uint8_t));

    return d;
}

static void
free_data(parsec_data_collection_t *d)
{
    my_datatype_t *array = (my_datatype_t*)d;
    if(NULL != array->data) {
        /* TODO: free each parsec_data_t element */
        free(array->data); array->data = NULL;
    }
    free(array->ptr); array->ptr = NULL;
    parsec_data_collection_destroy(d);
    free(d);
}

/**
 * @param [IN] A     the data, already distributed and allocated
 * @param [IN] loops the number of iteration
 * @param [IN] frags the number of fragments per iterations
 * @param [IN] size  size of each local data element
 * @param [IN] ws    the size of the group (1 by now)
 *
 * @return the parsec object to schedule.
 */
static parsec_taskpool_t*
bandwidth_new(parsec_data_collection_t *A, int loops, int frags, int size, int ws)
{
    parsec_bandwidth_taskpool_t *tp = NULL;

    if( (loops < 1) || (frags < 1) ) {
        fprintf(stderr, "To work, this test needs at lest 1 loop \n"
                        "  (instead of %d) and 1 frag (instead of %d)\n", loops, frags);
        return NULL;
    }
    if(size > ((my_datatype_t*)A)->size) {
        fprintf(stderr, "The size (%d) must be smaller than the declared size of the data in the array (%d)\n",
                size, ((my_datatype_t*)A)->size);
        return NULL;
    }

    tp  = parsec_bandwidth_new(A, loops, frags, ws);

    ptrdiff_t lb, extent;
    parsec_datatype_t block;
    parsec_type_create_contiguous(size, MPI_BYTE, &block);
    parsec_type_extent(block, &lb, &extent);

    parsec_arena_construct(((parsec_bandwidth_taskpool_t*)tp)->arenas[PARSEC_bandwidth_DEFAULT_ARENA],
                          size*sizeof(uint8_t), PARSEC_ARENA_ALIGNMENT_SSE, block);

    return (parsec_taskpool_t*)tp;
}

/**
 * @param [INOUT] o the parsec object to destroy
 */
static void
bandwidth_destroy(parsec_taskpool_t* tp)
{
    parsec_bandwidth_taskpool_t * bw_tp = (parsec_bandwidth_taskpool_t*)tp;

    parsec_datatype_t block;
    block = bw_tp->arenas[PARSEC_bandwidth_DEFAULT_ARENA]->opaque_dtt;
    bw_tp->arenas[PARSEC_bandwidth_DEFAULT_ARENA]->opaque_dtt = PARSEC_DATATYPE_NULL;
    parsec_type_free(&block);

    PARSEC_INTERNAL_TASKPOOL_DESTRUCT(bw_tp);
}

%}

NT  /* number of turns */
NF  /* number of simultaneous fragments */
WS  /* worldsize: must be 1 by now */

SYNC(t)

t = 0 .. NT-1

: A(0)

CTL C -> C PING(t, 0 .. NF-1)
      <- (t > 0) ? C PONG(t-1, 0 .. NF-1)
BODY
    /*printf("SYNC(%d)\n", t);*/
END

PING(t, f)

t = 0 .. NT-1
f = 0 .. NF-1

: A(f)

RW   T <- (t == 0) ? A(f) : T PONG(t-1, f)
       -> T PONG(t, f)
CTL  C <- C SYNC(t)

BODY

END

PONG(t, f)

t = 0 .. NT-1
f = 0 .. NF-1

: A(f)

RW   T <- T PING(t, f)
       -> (t < NT-1) ? T PING(t+1, f) : A(f)
CTL  C -> C SYNC(t+1)

BODY [type = CUDA]
{
    /* Nothing to do */
}
END

BODY
    //printf("PONG(%d, %d)\n", t, f);
END

extern "C" %{

int main(int argc, char *argv[])
{
    parsec_context_t* parsec;
    int rank, world, cores = -1, ngpus = 0;
    int i, rc, size, loops, frags;
    parsec_data_collection_t *dcA;
    parsec_taskpool_t *bw_test;
    struct timeval tstart, tend;
    double t, bw;

    loops = 10;
    frags = 1;
    size = 1024;
    
    MPI_Init(&argc, &argv);
    MPI_Comm_size(MPI_COMM_WORLD, &world);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);

    for( i = 1; i < argc; i++ ) {
        if(0 == strcmp(argv[i], "-c")) {
            cores = atoi(argv[i+1]); i++;
            if( 0 >= cores ) cores = 1;
        }
        if(0 == strcmp(argv[i], "-n")) {
            loops = atoi(argv[i+1]); i++;
            if( 0 >= loops ) loops = 10;
        }
        if(0 == strcmp(argv[i], "-f")) {
            frags = atoi(argv[i+1]); i++;
            if( 0 >= frags ) frags = 1;
        }
        if(0 == strcmp(argv[i], "-l")) {
            size = atoi(argv[i+1]); i++;
            if( 0 >= size ) size = 1024;
        }
        /* GPU management */
        if(0 == strcmp(argv[i], "-g")) {
            ngpus = atoi(argv[i+1]); i++;
            if( 0 > ngpus ) ngpus = 0;
        }
    }
    dcA = create_and_distribute_data(rank, world, frags, size);
    parsec_data_collection_set_key(dcA, "A");

    /* if the use of GPUs is specified on the command line updated the environment
     * prior to the runtime initialization.
     */
    if(ngpus > 0) {
        char *param, value[128];
        param = parsec_mca_param_env_var("device_cuda_enabled");
        snprintf(value, 128, "%d", ngpus);
        setenv(param, value, 1);
        free(param);
    }
    parsec = parsec_init(cores, &argc, &argv);

    for(i = 0; i < 2; i++) {
        bw_test = bandwidth_new(dcA, loops, frags, size, world);

        gettimeofday(&tstart, NULL);
        rc = parsec_context_add_taskpool(parsec, bw_test);
        PARSEC_CHECK_ERROR(rc, "parsec_context_add_taskpool");

        rc = parsec_context_start(parsec);
        PARSEC_CHECK_ERROR(rc, "parsec_context_start");

        rc = parsec_context_wait(parsec);
        PARSEC_CHECK_ERROR(rc, "parsec_context_wait");
        gettimeofday(&tend, NULL);

        if( 0 != i ) {
            t = (tend.tv_sec - tstart.tv_sec) * 1000000.0 + (tend.tv_usec - tstart.tv_usec);
            assert(t > 0.0);
            bw = ((double)loops * (double)frags * (double)size) / t * ((1000.0 * 1000.0) / (1024.0 * 1024.0)) * 2.0;
            printf("[%d, %d, %d, %08.4g] %4.8g MB/s\n", loops, frags, size, t / 1000000.0, bw);
        }
        bandwidth_destroy(bw_test);
    }

    free_data(dcA);

    parsec_fini(&parsec);
    MPI_Finalize();
    return 0;
}
%}
