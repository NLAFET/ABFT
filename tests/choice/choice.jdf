extern "C" %{
/*
 * Copyright (c) 2014-2016 The University of Tennessee and The University
 *                         of Tennessee Research Foundation.  All rights
 *                         reserved.
 */
%}

A        [ type = "parsec_data_collection_t *" ]
NT       [ type = "int" ]
P        [ type = "int" ]
decision [ type = "int *" ]

Choice(k)

k = 0 .. NT
: A(k)

RW D  <- (k == 0) ? A(k)
      <- %{ return (k > 0) && (decision[k-1] == 1); %} ? D TA(k-1)
      <- %{ return (k > 0) && (decision[k-1] == 2); %} ? D TB(k-1)
      -> %{ return (k <= NT) && (decision[k] == 1); %} ? D TA(k)
      -> %{ return (k <= NT) && (decision[k] == 2); %} ? D TB(k)

CTL T -> (k == NT) ? T Terminate(0..P-1)

BODY
{
        int d;
        if(k <= NT ) {
             d = rand() % 2 + 1;
             decision[k] = d ;
             printf("Execute Choice(%d), choosing decision %c\n", k, d == 0 ? '#' : (d == 1 ? 'A' : 'B'));
        }
}
END

Terminate(pos)
pos = 0..P-1
:A(pos)

CTL T <- T Choice(NT)

BODY
{
     printf("Execute Terminate(%d): Terminating the DAG\n", pos);
}
END

TB(k)

k = 0 .. NT

: A(k)

RW  D <- D Choice(k)
      -> D Choice(k+1)

BODY
{
        decision[k] = 2;
        printf("Execute TB(%d); decision[%d] = %d\n", k, k, decision[k]);

        /* Decrease counter for the task A not done */
        (void)parsec_atomic_fetch_dec_int32(&this_task->taskpool->nb_tasks);
}
END

TA(k)

k = 0 .. NT

: A(k)

RW  D <- D Choice(k)
      -> D Choice(k+1)

BODY
{
        decision[k] = 1;
        printf("Execute TA(%d); decision[%d] = %d\n", k, k, decision[k]);

        /* Decrease counter for the task B not done */
        (void)parsec_atomic_fetch_dec_int32(&this_task->taskpool->nb_tasks);
}
END
